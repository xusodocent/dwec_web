{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ies-jaume-ii-el-just-tavernes-de-la-valldigna","title":"IES JAUME II EL JUST (TAVERNES DE LA VALLDIGNA)","text":""},{"location":"DWEC_BOM/","title":"BOM","text":""},{"location":"DWEC_BOM/#1-que-es-el-bom","title":"1. Que \u00e9s el BOM?","text":"<p>\u00c9s un concepte similar al <code>DOM</code> que hem estudiat en unitats anteriors per\u00f2 adaptat al navegador. </p> <p>Mitjan\u00e7ant <code>BOM</code>, \u00e9s possible redimensionar i moure la finestra del navegador, modificar el text que es mostra a la barra d'estat i fer moltes altres manipulacions no relacionades amb el contingut de la p\u00e0gina HTML.</p> <p>L'inconvenient m\u00e9s gran de BOM \u00e9s que, al contrari del que passa amb DOM, cap entitat s'encarrega d'estandarditzar-lo o definir uns m\u00ednims d'interoperabilitat entre navegadors.</p> <p>Alguns dels elements que formen el BOM s\u00f3n els seg\u00fcents:</p> <ul> <li>Crear, moure, redimensionar i tancar finestres de navegador.</li> <li>Obtenir informaci\u00f3 sobre el propi navegador.</li> <li>Propietats de la p\u00e0gina actual i de la pantalla de lusuari.</li> <li>Gesti\u00f3 de galetes.</li> </ul> <p></p>"},{"location":"DWEC_BOM/#2-window-object","title":"2. Window Object","text":"<p>L'objecte <code>Window</code> \u00e9s compatible amb tots els navegadors. Representa la finestra del navegador.</p> <p>Tots els objectes, funcions i variables globals de JavaScript es converteixen autom\u00e0ticament en membres de l'objecte <code>Window</code>.</p> <p>Les variables globals s\u00f3n propietats de l'objecte <code>Window</code>.</p> <p>Les funcions globals s\u00f3n m\u00e8todes de l'objecte <code>Window</code>.</p> <p>Fins i tot l'objecte document (del DOM HTML) \u00e9s una propietat de l'objecte finestra: </p> JavaScript<pre><code>window.document.getElementById(\"header\");\ndocument.getElementById(\"header\");\n//\u00e9s el mateix\n</code></pre>"},{"location":"DWEC_BOM/#tamany-de-la-finestra","title":"Tamany de la finestra","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h2&gt;JavaScript Window&lt;/h2&gt;\n\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\ndocument.getElementById(\"demo\").innerHTML =\n\"Browser inner window width: \" + window.innerWidth + \"px&lt;br&gt;\" +\n\"Browser inner window height: \" + window.innerHeight + \"px\";\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La seua eixida \u00e9s:</p> Text Only<pre><code>Browser inner window width: 912px\nBrowser inner window height: 813px\n</code></pre>"},{"location":"DWEC_BOM/#altres-funcions","title":"Altres funcions","text":"JavaScript<pre><code>// Mover la ventana 20 p\u00edxel hacia la derecha y 30 p\u00edxel hacia abajo\nwindow.moveBy(20, 30);\n\n// Redimensionar la ventana hasta un tama\u00f1o de 250 x 250\nwindow.resizeTo(250, 250);\n\n// Agrandar la altura de la ventana en 50 p\u00edxel\nwindow.resizeBy(0, 50);\n\n// Colocar la ventana en la esquina izquierda superior de la ventana\nwindow.moveTo(0, 0);\n</code></pre> <p>Tamb\u00e9 tenim funcions per a obrir i tancar la finestra actual com <code>window.open()</code> i <code>window.close()</code>.</p>"},{"location":"DWEC_BOM/#3-screen-object","title":"3. Screen Object","text":"<p>S'utilitza per a obtindre informaci\u00f3 de la pantalla de l'usuari.</p> <ul> <li>screen.width</li> <li>screen.height</li> <li>screen.availWidth</li> <li>screen.availHeight</li> <li>screen.colorDepth</li> <li>screen.pixelDepth</li> </ul> <p>Es poden vore un exemple del seu funcionament en la web de la 3wschool.</p> <p>Tamb\u00e9 pots consultar una captura del seu resultat.</p> HTML<pre><code>    &lt;script&gt;  \n    document.writeln(\"&lt;br/&gt;screen.width: \"+screen.width);  \n    document.writeln(\"&lt;br/&gt;screen.height: \"+screen.height);  \n    document.writeln(\"&lt;br/&gt;screen.availWidth: \"+screen.availWidth);  \n    document.writeln(\"&lt;br/&gt;screen.availHeight: \"+screen.availHeight);  \n    document.writeln(\"&lt;br/&gt;screen.colorDepth: \"+screen.colorDepth);  \n    document.writeln(\"&lt;br/&gt;screen.pixelDepth: \"+screen.pixelDepth);  \n    &lt;/script&gt;  \n</code></pre> Text Only<pre><code>screen.width: 1920\nscreen.height: 1080\nscreen.availWidth: 1853\nscreen.availHeight: 1053\nscreen.colorDepth: 24\nscreen.pixelDepth: 24 \n</code></pre>"},{"location":"DWEC_BOM/#4-location-object","title":"4. Location Object","text":"<p>S'utilitza per a interactuar amb la <code>URL</code> i redirigir la p\u00e0gina.</p> JavaScript<pre><code>window.location.href //returns the href (URL) of the current page\nwindow.location.hostname //returns the domain name of the web host\nwindow.location.pathname //returns the path and filename of the current page\nwindow.location.protocol //returns the web protocol used (http: or https:)\nwindow.location.assign() //loads a new document\n</code></pre> <p>Pots consultar el resultat de cadascuna d'aquestes funcions a la web de la 3wschool</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h2&gt;JavaScript&lt;/h2&gt;\n\n&lt;h3&gt;The window.location object&lt;/h3&gt;\n\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n&lt;p id=\"demo2\"&gt;&lt;/p&gt;\n&lt;p id=\"demo3\"&gt;&lt;/p&gt;\n&lt;p id=\"demo4\"&gt;&lt;/p&gt;\n&lt;p id=\"demo5\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\ndocument.getElementById(\"demo\").innerHTML = \n\"The full URL of this page is:&lt;br&gt;\" + window.location.href;\n\ndocument.getElementById(\"demo2\").innerHTML =\n\"Page hostname is \" + window.location.hostname;\n\ndocument.getElementById(\"demo3\").innerHTML =\n\"Page path is \" + window.location.pathname;\n\ndocument.getElementById(\"demo4\").innerHTML =\n\"Page protocol is \" + window.location.protocol;\n\ndocument.getElementById(\"demo5\").innerHTML =\n\"Port number is \" + window.location.port; \n\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La seua eixida \u00e9s </p> Text Only<pre><code>The full URL of this page is:\nhttps://www.w3schools.com/js/tryit.asp?filename=tryjs_loc_href\n\nPage hostname is www.w3schools.com\n\nPage path is /js/tryit.asp\n\nPage protocol is https:\n\nPort number is \n</code></pre> <p>I per a utilitzar <code>assign()</code> es pot fer de la seg\u00fcent forma:</p> HTML<pre><code> &lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction newDoc() {\n  window.location.assign(\"https://www.w3schools.com\")\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=\"button\" value=\"Load new document\" onclick=\"newDoc()\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>"},{"location":"DWEC_BOM/#5-history-object","title":"5. History Object","text":"<p>Cont\u00e9 l'historial del navegador i pot ser \u00fatil per anavegar cap endavant i cap endarrere.</p> JavaScript<pre><code>history.back() //carrega l'anterior URL de l'historial\nhistory.forward() //carrega la seg\u00fcent URL de l'historial \n</code></pre> <p>Pots consultar en la web de la 3wschool el seu funcionament.</p> HTML<pre><code> &lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction goBack() {\n  window.history.back()\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=\"button\" value=\"Back\" onclick=\"goBack()\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>"},{"location":"DWEC_BOM/#6-navigator-object","title":"6. Navigator Object","text":"<p>\u00c9s l'objecte que representa al navegador. No est\u00e0 estandaritzat per\u00f2 hi ha propietats comuns a la majoria de navegadors.</p> <p></p> JavaScript<pre><code>    &lt;script&gt;  \n    document.writeln(\"&lt;br/&gt;navigator.appCodeName: \"+navigator.appCodeName);  \n    document.writeln(\"&lt;br/&gt;navigator.appName: \"+navigator.appName);  \n    document.writeln(\"&lt;br/&gt;navigator.appVersion: \"+navigator.appVersion);  \n    document.writeln(\"&lt;br/&gt;navigator.cookieEnabled: \"+navigator.cookieEnabled);  \n    document.writeln(\"&lt;br/&gt;navigator.language: \"+navigator.language);  \n    document.writeln(\"&lt;br/&gt;navigator.userAgent: \"+navigator.userAgent);  \n    document.writeln(\"&lt;br/&gt;navigator.platform: \"+navigator.platform);  \n    document.writeln(\"&lt;br/&gt;navigator.onLine: \"+navigator.onLine);  \n    &lt;/script&gt;  \n  ```\n\n  ```\n  navigator.appCodeName: Mozilla \nnavigator.appName: Netscape \nnavigator.appVersion: 5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 \n(KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36 \nnavigator.cookieEnabled: true \nnavigator.language: en-US \nnavigator.userAgent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 \n(KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36 \nnavigator.platform: Win32 \nnavigator.onLine: true\n</code></pre> <p>Es pot consultar altres formes en la web de la 3wschool</p>"},{"location":"DWEC_BOM/#7-cookies","title":"7. Cookies","text":"<p>Les cookies o galetes s\u00f3n porcions d'informaci\u00f3 que s'emmagatzemen en forma de text en l'ordinador del client i que serveixen, per exemple, per a recordar dades seues.</p> <p>Un exemple de <code>cookie</code> amb data d'expiraci\u00f3:</p> JavaScript<pre><code>document.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC\";\n</code></pre> <p>Es pot llegir la <code>cookie</code> aix\u00ed:</p> JavaScript<pre><code>let x = document.cookie; \n</code></pre>"},{"location":"DWEC_BOM/#8-control-del-temps","title":"8. Control del temps","text":"<p>L'objecte <code>Window</code> permet temporitzar les execucions fent \u00fas d'aquestes dues funcions principals</p> JavaScript<pre><code>setTimeout(function, milliseconds); //executa la funci\u00f3 despr\u00e9s d'haver esperat els milisegons indicats\nsetInterval(function, milliseconds); //igual que la funci\u00f3 anterior per\u00f2 executant repetidament la funci\u00f3\n</code></pre> <p>Es pot parar l'execuci\u00f3 d'un Timeout aix\u00ed</p> <p>JavaScript<pre><code>myVar = setTimeout(function, milliseconds);\nclearTimeout(myVar);\n</code></pre> I la d'un interval aix\u00ed</p> HTML<pre><code> &lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;button onclick=\"clearInterval(myVar)\"&gt;Stop time&lt;/button&gt;\n\n&lt;script&gt;\nlet myVar = setInterval(myTimer, 1000);\nfunction myTimer() {\n  const d = new Date();\n  document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}\n&lt;/script&gt; \n</code></pre>"},{"location":"DWEC_BOM/#9-exemples","title":"9. Exemples","text":"<p>Pots provar aquest recull d'exemples sobre el tema que acabem d'estudiar.</p>"},{"location":"DWEC_Projecte_av1/","title":"Enunciat","text":"<p>La Penya Ciclista Dolor de Cul vos ha demanat que programeu una s\u00e8rie de funcionalitats per a la seua p\u00e0gina web. Com que \u00e9s molt habitual entre els membres de la penya consultar l\u2019altimetria dels principals ports de muntanya, heu de modelar fent \u00fas de JSON les seg\u00fcents dades:</p> <p>Ports dels Pirineus</p> <ul> <li>Tourmalet: altitud 2115m, longitud 17km, pendent 7.3%, desnivell 1268m, coeficient APM 315, imatge altimetria</li> <li>Coll de la Gallina: altitud 1910m, longitud 11.76km, desnivell 982m, pendent 8.36%, coeficient APM 263, imatge altimetria</li> </ul> <p>Ports als Pics d'Europa</p> <ul> <li>Lagos de Covadonga: altitud 1124, longitud 13,9km, desnivell 962m, pendent 6,92%, coeficient APM 268, imatge altimetria</li> <li>L\u2019Angliru: altitud 1572m, longitud 12.4km, desnivell 1266m, pendent 10,21%, coeficient APM 514, imatge altimetria</li> </ul> <p>La web tindr\u00e0 una part est\u00e0tica on hi haur\u00e0 un select, un bot\u00f3 per a tornar al estat inicial i un bot\u00f3 de contacte. Tot el contingut din\u00e0mic estar\u00e0 allotjat en un <code>&lt;div&gt;</code> amb un \u00abid\u00bb que siga \u00abcontingut\u00bb, i que en el seu estat inicial estar\u00e0 en blanc.Heu d\u2019incloure un \u00abselect\u00bb on triarem si volem mostrar dades de Pirineus, dels Pics d\u2019Europa o de tots els ports.</p> <p>S\u2019ha de mostrar la informaci\u00f3 de cada port en forma de llista i la imatge de l\u2019altimetria. A m\u00e9s a m\u00e9s s\u2019ha d\u2019incorporar una funcionalitat la qual, en fer clic sobre algun dels ports, esborrar\u00e0 el contingut del div de continguts i mostrar\u00e0 una o v\u00e0ries imatges del port en q\u00fcesti\u00f3 (les baixeu de Google).</p> <p>En polsar sobre el bot\u00f3 de contacte s\u2019obrir\u00e0 un formulari d\u2019inscripci\u00f3 que tindr\u00e0 el seu bot\u00f3 de validar deshabilitat fins que el formulari estiga validat correctament. El formulari ha de tindre obligatoriament (i validat) el nom, cognoms, un radio per al g\u00e8nere, i un checkbox per al tipus de bicicleta que li agrada (carretera, gravel, r\u00edgida, doble, el\u00e8ctrica). Cal informar dels errors de validaci\u00f3. La validaci\u00f3 es far\u00e0 en <code>javascript</code> i no per camps de les etiquetes <code>html</code>.</p> <p>Inclou en algun lloc de la web, fora del <code>div</code> de contingut principal les seg\u00fcents funcionalitats:</p> <ul> <li>Un rellotge amb compte enrere de la data d'inici del Tour de Fran\u00e7a (29 de Juny a les 16h)</li> <li>Una secci\u00f3 que mostre imatges aleat\u00f2ries sobre ciclisme que canvien autom\u00e0ticament cada 2 segons. Comprovar que no es mostre la mateixa imatge dues vegades seguides.</li> <li>Una secci\u00f3 en la que hi hauran dues fotos, una de Tadej Pogacar i altra de Jonas Vingegaard. Fes en CSS una classe que s'anomene \"destacat_verd\" i altra que s'anomene \"destacat_blau\". Quan el ratol\u00ed passe per damunt d'una de les fotos, fent \u00fas dels events del ratol\u00ed has de canviar din\u00e0micament la classe amb <code>javascript</code> per a que tinga el borde blau, i torne a ser verd quan el ratol\u00ed no estiga damunt.</li> <li>Quan fem clic sobre alguna de les imatges anteriors, ha d'identificar fent \u00fas del <code>magic object</code> de l'event sobre quina imatge ha fet clic i mostrar el nom del ciclista. Hi hauran dos <code>div</code> amb el nom del ciclista que estaran ocults i es mostrar\u00e0 el correcte quan fem clic.</li> </ul> <p>Puntuacions</p> <ul> <li>Modelat correcte de la informaci\u00f3 en <code>JSON</code> 0,5p</li> <li>C\u00e0rrega del contingut din\u00e0mica 1p</li> <li>Assignaci\u00f3 correcta dels events en el <code>onload</code> de la p\u00e0gina 1p</li> <li>Assignaci\u00f3 correcta dels <code>listeners</code> quan creem el contingut din\u00e0mic 1p</li> <li>Informaci\u00f3 de l'opci\u00f3 escollida en forma de llista 1p</li> <li>Mostra de les imatges del port si fem clic 1p</li> <li>Validaci\u00f3 del formulari 1p</li> <li>Compte enrere 0,5p</li> <li>Imatges aleat\u00f2ries 1p</li> <li>Canvi din\u00e0mic de classe 1p</li> <li>Obtenci\u00f3 informaci\u00f3 del <code>magic object</code> 1p</li> </ul> <p>CSS i est\u00e8tica</p> <p>No es va a valorar l'est\u00e8tica de la p\u00e0gina, per tant no heu de perdre temps en fer el CSS per a que queden les coses aseades. Centreu-se en <code>javascript</code> i en crear contingut din\u00e0micament, que \u00e9s l'objectiu principal del m\u00f2dul</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/","title":"1 Introducci\u00f3","text":"<p>Les pricipals eines que anem a utilitzar durant el curs van a ser:</p> <ul> <li>Visual Studio Code com a entorn de desenvolupament.</li> <li>GitHub com a repositori dels nostres programes.</li> </ul> <p>Es recomana utilitzar Ubuntu o qualsevol altra distro de Linux com a sistema operatiu.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#2-installacio-de-visual-studio-code","title":"2 Instal\u00b7laci\u00f3 de Visual Studio Code","text":"<p>En aquest enlla\u00e7 podeu consultar com fer el proc\u00e9s tant com a paquet <code>snap</code> o com a <code>deb</code>.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#3-github","title":"3 GitHub","text":""},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#31-compte-dusuari-a-github","title":"3.1 Compte d'usuari a GitHub","text":"<p>Caldr\u00e0 que et dones d'alta a GitHub i crees un repositori per a utilitzar durant el curs. Ha de ser p\u00fablic, per tant no publiques informaci\u00f3 o dades sensibles al repositori.</p> <p>Consulta ac\u00ed com fer un repositori.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#32-token-dacces","title":"3.2 Token d'acc\u00e9s","text":"<p>Per raons de seguretat <code>GitHub</code> ha limitat l'acc\u00e9s per usuari/contrasenya i ara \u00e9s necessar accedir amb un token.</p> <p>Consulta al seg\u00fcent enlla\u00e7 com crear-lo.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#4-git","title":"4 Git","text":""},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#41-installacio","title":"4.1 Instal\u00b7laci\u00f3","text":"<p>Per a insta\u00b7lar Git en el teu ordinador amb Ubuntu pots fer \u00fas de la terminal.</p> <p>Bash<pre><code>$ sudo apt-get update\n$ sudo apt-get install git\n</code></pre> Comprova que est\u00e0 correctament instal\u00b7lat amb</p> Bash<pre><code>xus@angliru:~$ git version\ngit version 2.34.1\n</code></pre>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#42-iniciar-git-a-un-directori","title":"4.2 Iniciar Git a un directori","text":"<p>Comandament: <code>git init</code></p> Bash<pre><code>xus@angliru:~$ mkdir prova_git\nxus@angliru:~$ cd prova_git/\nxus@angliru:~/prova_git$ git init\nhint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint: \nhint:   git config --global init.defaultBranch &lt;name&gt;\nhint: \nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint: \nhint:   git branch -m &lt;name&gt;\nInitialized empty Git repository in /home/xus/prova_git/.git/\n</code></pre> <p>Comprova que ha creat un subdirectori ocult <code>.git</code></p> Bash<pre><code>xus@angliru:~/prova_git$ ll\ntotal 12\ndrwxrwxr-x  3 xus xus 4096 de set.  15 09:05 ./\ndrwxr-x--- 23 xus xus 4096 de set.  15 09:05 ../\ndrwxrwxr-x  7 xus xus 4096 de set.  15 09:05 .git/\n</code></pre> <p>Podem indentificar-nos amb el nostre nom i correu.</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git config --global user.email \"jorti@ieseljust.com\"\nxus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git config --global user.name \"Xuso\"\n</code></pre>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#43-unir-repositori-local-i-remot","title":"4.3 Unir repositori local i remot","text":"<p>Hem de tindre la <code>url</code> del nostre repositori a GitHub</p> Bash<pre><code>xus@angliru:~/prova_git$ git remote add origin https://github.com/xusodocent/apunts_dwec.git\n</code></pre>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#44-afegir-arxius","title":"4.4 Afegir arxius","text":"<p>Quan treballem en local, podem vore els arxius que est\u00e0 controlant <code>Git</code> amb <code>git status</code>. Si no heu afegit cap arxiu <code>git</code> informa de que hi ha arxius que no est\u00e0 controlant. En el cas seg\u00fcent una carpeta anomenada <code>T1</code>.</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    T1/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Afegim tots els arxius amb <code>git add .</code> i tornem a comprovar l'estat.</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git add .\nxus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   T1/Tema1.html\n    new file:   T1/Tema1.md\n    new file:   T1/Tema1.pdf\n    new file:   T1/eisvogel.latex\n    new file:   T1/img/bkaztar.png\n    new file:   T1/img/bkaztar.xcf\n    new file:   T1/img/bkmo.png\n    new file:   T1/img/bkmotar.png\n    new file:   T1/img/logocap.png\n    new file:   T1/img/portadaparcial.png\n</code></pre> <p>Vegem que s'han afegit correctament.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#45-el-commit","title":"4.5 El commit","text":"<p>El <code>commit</code> serveix per a guardar els canvis fets als arxius del nostre projecte afegint un missatge.</p> <p>L'opci\u00f3 <code>-m</code> indica que s'utilitzar\u00e0 un missatge o comentari</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git commit -m \"Fem el primer commit\"\n[master (root-commit) b7d39d6] Fem el primer commit\n 10 files changed, 1185 insertions(+)\n create mode 100644 T1/Tema1.html\n create mode 100644 T1/Tema1.md\n create mode 100644 T1/Tema1.pdf\n create mode 100644 T1/eisvogel.latex\n create mode 100644 T1/img/bkaztar.png\n create mode 100644 T1/img/bkaztar.xcf\n create mode 100644 T1/img/bkmo.png\n create mode 100644 T1/img/bkmotar.png\n create mode 100644 T1/img/logocap.png\n create mode 100644 T1/img/portadaparcial.png\n</code></pre> <p>Tens una explicaci\u00f3 m\u00e9s detallada al seg\u00fcent enlla\u00e7.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#46-pujar-arxius-a-repositori-remot","title":"4.6 Pujar arxius a repositori remot","text":"<p>El comandament per a pujar arxius des del nostre repositori local a <code>Github</code> \u00e9s <code>git push</code>.</p> <p>Recorda que cal utilitzar el token de Github</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git push origin master\nUsername for 'https://github.com': jorti@ieseljust.com\nPassword for 'https://jorti@ieseljust.com@github.com': \nEnumerating objects: 14, done.\nCounting objects: 100% (14/14), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (14/14), 440.53 KiB | 15.73 MiB/s, done.\nTotal 14 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/xusodocent/apunts_dwec.git\n * [new branch]      master -&gt; master\n</code></pre>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#47-actualitzar-des-del-repositori-remot","title":"4.7 Actualitzar des del repositori remot.","text":"<p>Pot donar-se el cas que participes a un projecte amb m\u00e9s programadors i tots contribui pujant arxius a un mateix repositori remot. Per tal d'actualitzar el teu repositori local des del remot cal fer <code>git pull</code>. </p> <p>Tal vegada necessites especificar repositori i branca.</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git pull origin master\nFrom https://github.com/xusodocent/apunts_dwec\n * branch            master     -&gt; FETCH_HEAD\nAlready up to date.\n</code></pre> <p>Ac\u00ed tens una explicaci\u00f3 m\u00e9s detallada.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#48-branques-en-git","title":"4.8 Branques en Git","text":"<p>En un principi nom\u00e9s est\u00e0 creada la branca <code>master</code>.</p> <p>Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git branch\n* master\n</code></pre> Es poden crear branques noves.</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git branch new_branch\nxus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git branch\n* master\n  new_branch\n</code></pre> <p>Fem activa la branca nova.</p> Bash<pre><code>xus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git checkout new_branch\nM   T1/Tema1.md\nM   T1/Tema1.pdf\nSwitched to branch 'new_branch'\nxus@angliru:~/Documents/IES_El_Just_2022_2023/apunts_markdown$ git branch\n  master\n* new_branch\n</code></pre> <p>Es poden fusionar branques amb <code>git merge</code>.</p>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#49-altres-comandaments","title":"4.9 Altres comandaments","text":"<p>Comandos b\u00e1sicos de GitHub</p> <ul> <li>git init: crear un repositorio.</li> <li>git add: agregar un archivo a staging.</li> <li>git commit -m \u201cmensaje\u201d: guardar el archivo en git con un mensaje.</li> <li>git branch: crear una nueva rama.</li> <li>git checkout: moverse entre ramas.</li> <li>git push: mandar cambios a un servidor remoto.</li> <li>git fetch: traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local.</li> <li>git merge: tiene dos usos. Uno es la fusi\u00f3n de ramas, funcionando como un commit en la rama actual, trayendo la rama indicada. Su otro uso es guardar los cambios de un servidor remoto en nuestro directorio.</li> <li>git pull: fetch y merge al mismo tiempo.</li> </ul> <p>Comandos para correcci\u00f3n en GitHub</p> <ul> <li>git checkout \u201ccodigo de version\u201d \u201cnombre del archivo\u201d: volver a la \u00faltima versi\u00f3n de la que se ha hecho commit.</li> <li>git reset: vuelve al pasado sin posibilidad de volver al futuro, se debe usar con especificaciones.</li> <li>git reset --soft: vuelve a la versi\u00f3n en el repositorio, pero guarda los cambios en staging. As\u00ed, podemos aplicar actualizaciones a un nuevo commit.</li> <li>git reset --hard: todo vuelve a su versi\u00f3n anterior</li> <li>git reset HEAD: saca los cambios de staging, pero no los borra. Es lo opuesto a git add.</li> <li>git rm: elimina los archivos, pero no su historial. Si queremos recuperar algo, solo hay que regresar. se utiliza as\u00ed:</li> <li>git rm --cached elimina los archivos en staging pero los mantiene en el disco duro.</li> <li>git rm --force elimina los archivos de git y del disco duro.</li> </ul> <p>Comandos para revisi\u00f3n y comparaci\u00f3n en GitHub</p> <ul> <li>git status: estado de archivos en el repositorio.</li> <li>git log: historia entera del archivo.</li> <li>git log --stat: cambios espec\u00edficos en el archivo a partir de un commit.</li> <li>git show: cambios hist\u00f3ricos y espec\u00edficos hechos en un archivo.</li> <li>git diff \u201ccodigo de version 1\u201d \u201ccodigo de version 2\u201d: comparar cambios entre versiones.</li> <li>git diff: comparar directorio con staging.</li> </ul>"},{"location":"DWEC_UD0_Eines_Programaci%C3%B3_tema/#5-exercici","title":"5 Exercici","text":"<ul> <li>Crea un compte de Github i crea un repositori anomenar proves_p1</li> <li>Crea el token d'acc\u00e9s necessari</li> <li>Instal\u00b7la git al teu ordinador</li> <li>Fes les pases descrites al tutorial per a tindre un projecte a <code>GitHub</code> amb un parell o tres de commits, un per a cada funcionalitat nova.</li> </ul>"},{"location":"DWEC_UD0_Pr_Git/","title":"1 Exercici creaci\u00f3 de repositoris","text":"<ul> <li> <p>Crear un repositorio nuevo con el nombre <code>libro</code> y mostrar su contenido.</p> </li> <li> <p>Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de la salida. Mostrar la configuraci\u00f3n final.</p> </li> <li> <p>Comprobar el estado del repositorio. Crear un fichero indice.txt con el siguiente contenido:</p> </li> </ul> <p>Text Only<pre><code>Cap\u00edtulo 1: Introducci\u00f3n a Git\nCap\u00edtulo 2: Flujo de trabajo b\u00e1sico\nCap\u00edtulo 3: Repositorios remotos\n</code></pre> - Comprobar de nuevo el estado del repositorio. A\u00f1adir el fichero a la zona de intercambio temporal. Volver a comprobar una vez m\u00e1s el estado del repositorio.</p> <ul> <li> <p>Realizar un commit de los \u00faltimos cambios con el mensaje \u201cA\u00f1adido \u00edndice del libro.\u201d y ver el estado del repositorio.</p> </li> <li> <p>Cambiar el fichero indice.txt. Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\u201d.</p> </li> <li> <p>Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior. Cambiar el mensaje del \u00faltimo commit por \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\u201d Volver a mostrar los \u00faltimos cambios del repositorio.</p> </li> </ul>"},{"location":"DWEC_UD0_Pr_Git/#2-exercici-gestio-de-canvis","title":"2 Exercici gesti\u00f3 de canvis","text":"<p>Clona el seg\u00fcent repositori per a fer l'exercici. https://github.com/asalber/libro-git</p> <ul> <li> <p>Mostrar el historial de cambios del repositorio. Crear la carpeta capitulos y crear dentro de ella el fichero capitulo1.txt con alg\u00fan texto. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 1.\u201d Volver a mostrar el historial de cambios del repositorio.</p> </li> <li> <p>Crear el fichero capitulo2.txt en la carpeta capitulos con alg\u00fan texto. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.</p> </li> <li> <p>A\u00f1adir al final del fichero indice.txt un l\u00ednea de texto.  A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201dMostrar qui\u00e9n ha hecho cambios sobre el fichero indice.txt.</p> </li> </ul>"},{"location":"DWEC_UD0_Pr_Git/#3-exercici-desfer-canvis","title":"3 Exercici desfer canvis","text":"<p>Clona el seg\u00fcent repositori per a fer l'exercici. https://github.com/asalber/libro-git</p> <ul> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.  Comprobar el estado del repositorio. Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio.</p> </li> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.  A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio.</p> </li> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.  Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir un fichero nuevo captitulos/capitulo4.txt vac\u00edo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio. Volver a comprobar el estado del repositorio.</p> </li> <li> <p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.  Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d Comprobar el historial del repositorio. Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal. Comprobar el historial y el estado del repositorio. Volver a hacer el commit con el mismo mensaje de antes. Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio. Comprobar de nuevo el historial y el estado del repositorio.</p> </li> </ul>"},{"location":"DWEC_UD0_Pr_Git/#4-exercici-gestio-de-branques","title":"4 Exercici gesti\u00f3 de branques","text":"<p>Clona el seg\u00fcent repositori per a fer l'exercici. https://github.com/asalber/libro-git</p> <ul> <li> <p>Crear una nueva rama bibliografia y mostrar las ramas del repositorio.</p> </li> <li> <p>Crear el fichero capitulos/capitulo4.txt y a\u00f1ade texto. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.</p> </li> <li> <p>Cambiar a la rama bibliografia. Crear el fichero bibliografia.txt.  A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.</p> </li> <li> <p>Fusionar la rama bibliografia con la rama master. Mostrar la historia del repositorio incluyendo todas las ramas. Eliminar la rama bibliografia. Mostrar de nuevo la historia del repositorio incluyendo todas las ramas.</p> </li> <li> <p>Crear la rama bibliografia. Cambiar a la rama bibliografia. Cambiar el fichero bibliografia.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Cambiar a la rama master. Cambiar el fichero bibliografia.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Fusionar la rama bibliografia con la rama master. Resolver el conflicto dejando el fichero bibliografia.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un.Commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.</p> </li> </ul>"},{"location":"DWEC_UD0_Pr_Git/#5-exercici-de-repositoris-remots","title":"5 Exercici de repositoris remots","text":"<ul> <li> <p>Crear un nuevo repositorio p\u00fablico en GitHub con el nombre libro-git. A\u00f1adirlo al repositorio local del libro. Mostrar todos los repositorios remotos configurados.</p> </li> <li> <p>A\u00f1adir los cambios del repositorio local al repositorio remoto de GitHub. Acceder a GitHub y comprobar que se han subido los cambios mostrando el historial de versiones.</p> </li> <li> <p>Colaborar en el repositorio remoto libro-git de otro usuario. Clonar su repositorio libro-git. A\u00f1adir el fichero autores.txt que contenga el nombre del usuario y su correo electr\u00f3nico. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d Subir los cambios al repositorio remoto</p> </li> <li> <p>Hacer una bifurcaci\u00f3n del repositorio remoto asalber/libro-git en GitHub. Clonar el repositorio creado en la cuenta de GitHub del usuario. Crear una nueva rama autoria y activarla. A\u00f1adir el nombre del usuario y su correo al fichero autores.txt. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d Subir los cambios de la rama autoria al repositorio remoto en GitHub. Hacer un Pull Request de los cambios en la rama autoria.</p> </li> </ul>"},{"location":"DWEC_UD0_Pr_Git/#6-sollucions","title":"6 Sol\u00b7lucions","text":"<p>Accedir a aquesta web per\u00f2 heu de saber la clau... </p> <p>5jLZASqNpndVeIXURLst+S/</p> <p>GFbRglbiGcrleVYZrIcwXJnljrSUVE7HCc7T907Jzm2oS2GL/</p> <p>6wIs79z02UG5/BOPc41w9hPizGJhiXF54jzYOc+fFOKafr+KS3geyqpl</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/","title":"Introducci\u00f3 a Javascript","text":""},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#introduccio-a-javascript","title":"Introducci\u00f3 a Javascript","text":""},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#historia-de-js","title":"Hist\u00f2ria de <code>JS</code>","text":"<p>JavaScript (abreujat comunament JS) \u00e9s un llenguatge de programaci\u00f3 interpretat, dialecte de l'est\u00e0ndard ECMAScript. Es defineix com orientat a objectes, basat en prototips, imperatiu, d\u00e8bilment tipat i din\u00e0mic.</p> <p>S'utilitza principalment de la banda de el client, implementat com a part d'un navegador web permetent millores en la interf\u00edcie d'usuari i p\u00e0gines web din\u00e0miques i JavaScript d'costat de servidor (Server-side JavaScript o SSJS). El seu \u00fas en aplicacions externes a la web, per exemple en documents PDF, aplicacions d'escriptori (majorit\u00e0riament widgets) \u00e9s tamb\u00e9 significatiu.</p> <p>Des de 2012, tots els navegadors moderns suporten completament ECMAScript 5.1, una versi\u00f3 de JavaScript. Els navegadors m\u00e9s antics suporten almenys ECMAScript 3. La sisena edici\u00f3 es va alliberar al juliol de 2015.</p> <p>JavaScript es va dissenyar amb una sintaxi similar a <code>C</code> , encara que adopta noms i convencions de el llenguatge de programaci\u00f3 <code>Java</code>. No obstant aix\u00f2, Java i JavaScript tenen sem\u00e0ntiques i prop\u00f2sits diferents.</p> <p>Tots els navegadors moderns interpreten el codi JavaScript integrat en les p\u00e0gines web. Per interactuar amb una p\u00e0gina web es proveeix a l'llenguatge JavaScript d'una implementaci\u00f3 del Document Object Model (DOM).</p> <p>Tradicionalment es venia utilitzant en p\u00e0gines web HTML per realitzar operacions i \u00fanicament en el marc de l'aplicaci\u00f3 client, sense acc\u00e9s a funcions de servidor. Actualment \u00e9s \u00e0mpliament utilitzat per a enviar i rebre informaci\u00f3 de servidor juntament amb ajuda d'altres tecnologies com <code>AJAX</code>. JavaScript s'interpreta en l'agent d'usuari a el mateix temps que les sent\u00e8ncies van descarregant juntament amb el codi HTML.</p> <p>Des del llan\u00e7ament al juny de 1997 de l'est\u00e0ndard ECMAScript 1, han existit les versions 2, 3 i 5, que \u00e9s la m\u00e9s usada actualment (la 4 es va abandonar). Al juny de 2015 es va tancar i va publicar la versi\u00f3 ECMAScript 6.6</p> <p>Com a curiositat, podem observar quina posici\u00f3 ocupa Javascript en la llista de llenguatges m\u00e9s utilitzats el segon trimestre del 2021.</p> <p>\\begin{center}     \\includegraphics[width=0.9\\linewidth]{./img/llenguatges2021.png}     \\captionof{figure}{Llista dels llenguatges m\u00e9s utilitzats en 2021} \\end{center}</p> <p>Consulta la gr\u00e0fica</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#possibilitats-i-limitacions","title":"Possibilitats i limitacions","text":"<p>Javascript fou dissenyat de forma que l'entorn en el que s'executen els scripts est\u00e0 limitat per raons de seguretat. Aix\u00f2 fa que tinga algunes limitacions com aquestes:</p> <ul> <li>Els scripts s'executen en un entorn dintre del mateix domini del que es descarregaren i per tant no poden comunicar-se amb recursos externs a eixe domini.</li> <li>No poden tancar finestres que no han obert ells mateix.</li> <li>No poden accedir a arxius de l'ordinador del client.</li> <li>No poden crear finestres fora del camp visual del client, i la mida de les finestres est\u00e0 limitada.</li> </ul> <p>Algunes limitacions tenen diferents sol\u00b7lucions que anirem mirant durant el curs.</p> <p>Investiga com pots sol\u00b7lucionar algunes d'aquestes limitacions, com per exemple la del problema del Cross-site-scripting. </p> <p>Per a entendre alguna d'aquestes limitacions, mira el seg\u00fcent escenari:</p> <p>Suposem que un lloc web t\u00e9 la seg\u00fcent forma:</p> <p>http://www.example.com/home.asp?frame=menu.asp</p> <p>i que a l'accedir es crear\u00e0 un document HTML enlla\u00e7ant amb un frame a menu.asp.</p> <p>En aquest exemple, qu\u00e8 passaria si es posa com a URL de l'frame un codi javascript? JavaScript<pre><code>javascript: while (1) alert (\"Aquest missatge sortir\u00e0 indefinidament\");\n</code></pre> Si aquest enlla\u00e7 ho posa un atacant cap a una v\u00edctima, un visitant podr\u00e0 veure-ho i veur\u00e0 que \u00e9s de el mateix domini, suposant que no pot ser res dolent i de resultat tindr\u00e0 un bucle infinit de missatges. </p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#que-pot-fer-javascript","title":"Qu\u00e8 pot fer Javascript?","text":"<ul> <li>Modificar un document</li> </ul> JavaScript<pre><code>document.getElementById(\"demo\").innerHTML = \"Hello JavaScript\";\n</code></pre> <ul> <li>Modificar valors HTML</li> </ul> <p>Prova a encendre la perilla</p> <ul> <li>Modificar estils CSS</li> </ul> JavaScript<pre><code>document.getElementById(\"demo\").style.fontSize = \"35px\";\n</code></pre> <ul> <li>Ocultar i mostrar elements*</li> </ul> JavaScript<pre><code>document.getElementById(\"demo\").style.display = \"none\";\ndocument.getElementById(\"demo\").style.display = \"block\";\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#eixides-de-javascript","title":"Eixides de Javascript","text":"<ul> <li>Amb InnerHTML</li> </ul> <p>HTML<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My First Web Page&lt;/h1&gt;\n    &lt;p&gt;My First Paragraph&lt;/p&gt;\n    &lt;p id=\"demo\"&gt;&lt;/p&gt;\n    &lt;script&gt;\n     document.getElementById(\"demo\").innerHTML = 5 + 6;\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt; \n</code></pre> - Amb document.write()</p> HTML<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My First Web Page&lt;/h1&gt;\n    &lt;p&gt;My first paragraph.&lt;/p&gt;\n    &lt;script&gt;\n        document.write(5 + 6);\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>Aquest m\u00e8tode esborrar\u00e0 tot el que hi haja carregat a la web.</p> <ul> <li>Amb un alert()</li> </ul> HTML<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My First Web Page&lt;/h1&gt;\n    &lt;p&gt;My first paragraph.&lt;/p&gt;\n    &lt;script&gt;\n      window.alert(5 + 6);\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <ul> <li>Mitjan\u00e7ant la consola</li> </ul> HTML<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;script&gt;\n      console.log(5 + 6);\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt; \n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#on-incloure-javascript","title":"On incloure Javascript?","text":"<ul> <li>Dintre de les etiquetes</li> </ul> JavaScript<pre><code> &lt;p onclick=\"alert('Un mensaje de prueba')\"&gt;Un p\u00e1rrafo de texto.&lt;/p&gt;\n</code></pre> <ul> <li>Dintre del HTML</li> </ul> HTML<pre><code>&lt;title&gt;Ejemplo de c\u00f3digo JavaScript en el propio documento&lt;/title&gt;\n  &lt;script type=\"text/javascript\"&gt;\n  alert(\"Un mensaje de prueba\");\n  &lt;/script&gt;\n</code></pre> <ul> <li>En un arxiu extern</li> </ul> HTML<pre><code>&lt;script type=\"text/javascript\" src=\"/js/codigo.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#etiqueta-noscript","title":"Etiqueta <code>&lt;noscript&gt;</code>","text":"<p>Aquesta etiqueta serveix per a mostrar un missatge a l'usuari en cas que el seu navegador (per a versions molt antigues) no dispose de suport per a Javascript, o b\u00e9 estiga desactivat.</p> HTML<pre><code>&lt;head&gt; ... &lt;/head&gt;\n&lt;body&gt;\n  &lt;noscript&gt;\n    &lt;p&gt;Bienvenido a Mi Sitio&lt;/p&gt;\n    &lt;p&gt;La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript.\n  Si lo has deshabilitado intencionadamente, por favor vuelve a activarlo.&lt;/p&gt;\n  &lt;/noscript&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#el-meu-primer-script","title":"El meu primer script","text":"<p>Comencem el tema mostrant un exemple cl\u00e0ssic del \"Hola mundo\" en Javascript.</p> <p>HTML<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Mi primer codigo JavaScript&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Mi primer c\u00f3digo JavaScript&lt;/h1&gt;\n    &lt;script&gt;\n      document.write(\"Hola Mundo\");\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Es pot comprovar que el codi Javascript est\u00e0 incl\u00f2s dintre del <code>&lt;body&gt;</code>. Es pot incorporar a qualsevol lloc, tot i aix\u00f2, es recomana que s'incloga dintre del <code>&lt;head&gt;</code>.</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#sintaxi-basica","title":"Sintaxi b\u00e0sica","text":"<ul> <li> <p>Paraules reservades: Aquelles que s'utilitzen per construir sent\u00e8ncies, i que no es poden utilitzar lliurement. Alguens d'aquestes s\u00f3n: break, case, catch, class, continue, default, delete, do, else, finally, for, function, if, in, instanceof, new, return, switch, this, throw, try, typeof, var, void, while, with.</p> </li> <li> <p>Els espais en blanc sobrants i les noves l\u00ednies no es tenen en compte, pel que admet qualsevol tipus de tabulaci\u00f3, etc.</p> </li> <li> <p>Case Sensitive (es distingeixen maj\u00fascules i min\u00fascules).</p> </li> <li> <p>No cal definir el tipus de les variables, l'assignaci\u00f3 de tipus \u00e9s din\u00e0mica, pel que una variable pot modificar din\u00e0micament el tipus de dada que emmagatzema. A mes, permet definir variables en la seua inicialitzaci\u00f3, sense necessitat ni tan sols de declarar-les. Aquest comportament es pot modificar amb el mode escricte (stric mode).</p> </li> <li> <p>No \u00e9s necessari acabar les sent\u00e8ncies amb ; encara que \u00e9s recomanable.</p> </li> </ul> <p>Els comentaris en una l\u00ednia es realitzen utilitant doble barra. JavaScript<pre><code>//anem a fer un alert\nalert(\"hola a tots\");\n</code></pre></p> <p>Els comentaris llargs es realitzen utilitzant els asteriscs i les barres <code>/*comentari*/</code>.</p> <p>Investigueu que \u00e9s el <code>mode strict</code> i en que pot afectar a la nostra forma de programar.</p> <p>Podeu provar aquest exemple de codi fent \u00fas o no del mode strict i comproveu les difer\u00e8ncies.</p> JavaScript<pre><code>\"use strict\"\nvar x = 2;\nvar y = 3;\nz = x + y;\nconsole.log(z);\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#variables","title":"Variables","text":"<p>Les variables en javascript poden tindre diferents tipus, i fins i tot, una mateixa variable, pot guardar informaci\u00f3 de diversos tipus en diferents moments de l'execuci\u00f3. El tipus d'una variable es defineix de forma din\u00e0mica en el moment de la seua assignaci\u00f3 (no de la declaraci\u00f3).</p> <p>Si no existissin variables, un programa que suma dos numeros podria escriure com: JavaScript<pre><code>resultat = 3 + 1\n</code></pre></p> <p>El programa anterior \u00e9s tan poc \u00fatil que nom\u00e9s serveix per al cas en qu\u00e8 el primer nombre de la suma sigui el 3 i el segon nombre sigui el 1. En qualsevol altre cas, el programa obt\u00e9 un resultat incorrecte.</p> <p>No obstant aix\u00f2, el programa es pot refer de la seg\u00fcent manera utilitzant variables per emmagatzemar i referir-se a cada nombre:</p> <p>numero_1 = 3 numero_2 = 1 resultat = numero_1 + numero_2</p> <p>Els elements numero_1 i numero_2 s\u00f3n variables que emmagatzemen els valors que utilitza el programa. El resultat es calcula sempre en funci\u00f3 de la valor emmagatzemat per les variables, de manera que aquest programa funciona correctament per a qualsevol parell de nombres indicat. Si es modifica el valor de les variables numero_1 i numero_2, el programa segueix funcionant correctament.</p> <p>Les variables en JavaScript es creen mitjan\u00e7ant la paraula reservada <code>var</code>. D'aquesta manera, l'exemple anterior es pot realitzar en JavaScript de la seg\u00fcent manera: </p> <p>JavaScript<pre><code>var numero_1 = 3;\nvar numero_2 = 1;\nvar resultado = numero_1 + numero_2;\n</code></pre> La paraula reservada <code>var</code> nom\u00e9s s'ha d'indicar a l'definir per primera vegada la variable, el que s'anomena declarar una variable. Quan s'utilitzen les variables a la resta d'instruccions de l'script, nom\u00e9s cal indicar el seu nom. </p> <p>Si quan es declara una variable se li assigna tamb\u00e9 un valor, es diu que la variable ha estat inicialitzada. En JavaScript no \u00e9s obligatori inicialitzar les variables, ja que es poden declarar per una banda i assignar-los un valor posteriorment.</p> <p>Una de les caracter\u00edstiques m\u00e9s sorprenents de JavaSript per als programadors habituats a altres llenguatges de programaci\u00f3 \u00e9s que tampoc cal declarar les variables. En altres paraules, es poden utilitzar variables que no s'han definit anteriorment mitjan\u00e7ant la paraula reservada <code>var</code>.</p> <p>Els noms de les variables (identificadors) han d'estar formats per lletres, n\u00fameros, guions baixos o s\u00edmbols del dolar. A m\u00e9s a m\u00e9s la primera lletra no pot ser un n\u00famero. Per exemple <code>var 1num</code>seria un nom incorrecte, per\u00f2 <code>var $$num1</code> seria v\u00e0lid.</p> <p>Tamb\u00e9 es poden declarar v\u00e0ries variables en una \u00fanica l\u00ednia.</p> JavaScript<pre><code>var person = \"John Doe\", carName = \"Volvo\", price = 200;\n</code></pre> <p>Aquelles variables que declarem sense assignar valor tindran el valor <code>undefined</code> per defecte.</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#tipus-de-variables","title":"Tipus de variables","text":"<ul> <li>Variables de tipus num\u00e8riques (number): Emmagatzema valors enters o decimals (amb el car\u00e0cter . per separar la part entera de decimal)</li> </ul> JavaScript<pre><code>var numero = 10;\nvar valor = 35.5;\n</code></pre> <ul> <li>Cadenes de text. Emmagatzema una llista de caracters, entrecomillats, b\u00e9 amb cometes simples o dobles. En cas que el text continga cometes, cal anar amb compte amb la construcci\u00f3, no podent utilitzar internament les cometes que hem utilitzat per definir la cadena de text o b\u00e9 escapant estes.</li> </ul> JavaScript<pre><code>var text=\"Aqueta frase utilita 'cometes simples'\"\nvar text=\"Aquesta frase utilitza \\\"cometes dobles escapades\\\"\"\n</code></pre> <p>Fes un script que mostre per pantalla dos alerts, un utilitzant cometes simples i altre utilitzant cometes dobles.</p> <ul> <li>Els vectors o arrays es declaren de la seg\u00fcent forma.</li> </ul> JavaScript<pre><code>var cars = [\"Saab\", \"Volvo\", \"BMW\"];\n</code></pre> <p>Per a accedir als elements del vector utilitzem aquesta sintaxi.</p> JavaScript<pre><code>var marcaSeleccionada = cars[0];\n</code></pre> <p>Fes un script que emmagatzeme els dies de la setmana en un vector i els mostre per pantalla amb un alert per a cada dia.</p> <ul> <li>Booleanes. Poden adquirir el valor <code>true</code> o <code>false</code>.</li> </ul> JavaScript<pre><code>var opcio = true; //opci\u00f3 vertadera\nvar opcio2 = false; //opci\u00f3 falsa\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#operadors","title":"Operadors","text":""},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#assignacio","title":"Assignaci\u00f3","text":"<p>Utilitza l'operador <code>=</code> per a assignar un valor a una variable.</p> JavaScript<pre><code>var nom = \"Xuso\";\n</code></pre> <p>L'assignaci\u00f3 sempre es realitza declarant la variable a l'esquerre i el valor a la dreta. Per tant aquesta sent\u00e8ncia seria incorrecta.</p> JavaScript<pre><code>\"Xuso\" = var nom; //sent\u00e8ncia incorrecta\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#increment-i-decrement","title":"Increment i decrement","text":"<p>S'utilitzen per a incrementar o decrementar una variable.</p> JavaScript<pre><code>var a = 1;\na++; //el valor de a ara \u00e9s 2\na--; //el valor de a ara \u00e9s 1\n</code></pre> <p>Tamb\u00e9 seria correcte el seg\u00fcent codi</p> JavaScript<pre><code>var a = 1;\n++a; //el valor de a ara \u00e9s 2\n--a; //el valor de a ara \u00e9s 1\n</code></pre> <p>Pot semblar que el funcionament \u00e9s el mateix, per\u00f2 hi ha una subtil difer\u00e8ncia. Si l'operador <code>++</code> s'indica com a prefix de l'identificador de la variable, el seu valor s'incrementa abans de realitzar qualsevol altra operaci\u00f3. Si l'operador <code>++</code> s'indica com sufix de l'identificador de la variable, el seu valor s'incrementa despr\u00e9s d'executar la sent\u00e8ncia en la qual apareix.</p> JavaScript<pre><code>var numero1 = 5;\nvar numero2 = 2;\nnumero3 = numero1++ + numero2;\n// numero3 = 7, numero1 = 6\n\nvar numero1 = 5;\nvar numero2 = 2;\nnumero3 = ++numero1 + numero2;\n// numero3 = 8, numero1 = 6\n</code></pre> <p>Per tant, en la instrucci\u00f3 <code>numero3 = numero1 ++ + numero2;</code> el valor de numero1 s'incrementa despr\u00e9s de realitzar l'operaci\u00f3 (primer es suma i numero3 val 7, despr\u00e9s s'incrementa el valor de numero1 i val 6). No obstant aix\u00f2, en la instrucci\u00f3 <code>numero3 = ++ numero1 + numero2;</code> en primer lloc s'incrementa el valor de numero1 i despr\u00e9s es realitza la suma (primer s'incrementa numero1 i val 6, despr\u00e9s es realitza la suma i numero3 val 8).</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#logics","title":"L\u00f2gics","text":"<p>S'utilitzen per a oprecions de presa de decisions sobre variables amb un valor de tipus boole\u00e0. </p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#negacio","title":"Negaci\u00f3","text":"<p>Emprem l'operador <code>!</code> per a negar el valor d'una variable.</p> JavaScript<pre><code>var visible = true;\nalert(!visible);  // Muestra \"false\" y no \"true\"\n</code></pre> <p>El funcionament \u00e9s el seg\u00fcent.</p> Variable !Variable true false false true <p>Si la variable original \u00e9s de tipus boole\u00e0, \u00e9s molt senzill obtenir la seva negaci\u00f3. No obstant aix\u00f2, qu\u00e8 passa quan la variable \u00e9s un nombre o una cadena de text? Per obtenir la negaci\u00f3 en aquest tipus de variables, es realitza en primer lloc la seva conversi\u00f3 a un valor boole\u00e0.</p> <ul> <li>Si la variable cont\u00e9 un n\u00famero, el valor ser\u00e0 <code>false</code> en cas que el n\u00famero siga un <code>0</code>, i valdr\u00e0 <code>true</code> en cas que la variable tinga altre valor.</li> <li>Si la variable \u00e9s una cadena valdr\u00e0 <code>false</code> en cas que la cadena estiga buida i valdr\u00e0 <code>true</code> en cas que continga qualsevol altre valor.</li> </ul> JavaScript<pre><code>var cantidad = 0;\nvacio = !cantidad;  // vacio = true\ncantidad = 2;\nvacio = !cantidad;  // vacio = false\nvar mensaje = \"\";\nmensajeVacio = !mensaje;  // mensajeVacio = true\nmensaje = \"Bienvenido\";\nmensajeVacio = !mensaje;  // mensajeVacio = false\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#and","title":"AND","text":"<p>Utilitza l'operador <code>&amp;&amp;</code> i el funcionament \u00e9s el seg\u00fcent.</p> Variable1 Variable2 Valor false false false false true false true false false true true true JavaScript<pre><code>var valor1 = true;\nvar valor2 = false;\nresultado = valor1 &amp;&amp; valor2; // resultado = false\nvalor1 = true;\nvalor2 = true;\nresultado = valor1 &amp;&amp; valor2; // resultado = true\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#or","title":"OR","text":"<p>Utilitza l'operador <code>||</code> i el seu funcionament \u00e9s el seg\u00fcent.</p> Variable1 Variable2 Valor false false false false true true true false true true true true JavaScript<pre><code>var valor1 = true;\nvar valor2 = false;\nresultado = valor1 || valor2; // resultado = true\nvalor1 = false;\nvalor2 = false;\nresultado = valor1 || valor2; // resultado = false\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#matematics","title":"Matem\u00e0tics","text":"<p>Utilitzen els operadors suma <code>+</code>, resta <code>-</code>, multiplicaci\u00f3 <code>*</code>, divisi\u00f3 <code>/</code> i m\u00f2dul <code>%</code>. No confondre en m\u00f2dul amb el percentatge, el m\u00f2dul calcula el resto d'una divisi\u00f3 entre n\u00fameros sencers. Per exemple el m\u00f2dul resultant de dividir 21 entre 7 seria 0 ja que el resultat de la divisi\u00f3 \u00e9s 3 i el resto 0.</p> JavaScript<pre><code>var numero1 = 10;\nvar numero2 = 5;\nresultado = numero1 / numero2;  // resultado = 2\nresultado = 3 + numero1;        // resultado = 13\nresultado = numero2 \u2013 4;        // resultado = 1\nresultado = numero1 * numero2; // resultado = 50\nresultado = numero1 % numero2; //resultado = 0\n</code></pre> <p>Es poden abreviar les assignacions fent \u00fas de la seg\u00fcent sintaxi.</p> JavaScript<pre><code>var num = 2;\nnum += 3; //num = num + 3 = 5\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#relacionals","title":"Relacionals","text":"<p>S\u00f3n els operadors menor que <code>&lt;</code>, major que <code>&gt;</code>, igual que <code>==</code> i distint que <code>!=</code>. Cal tindre molta cura ja que \u00e9s habitual confondre l'operador d'assignaci\u00f3 <code>=</code> en el de comparaci\u00f3 <code>==</code>.</p> JavaScript<pre><code>var numero1 = 3;\nvar numero2 = 5;\nresultado = numero1 &gt; numero2; // resultado = false\nresultado = numero1 &lt; numero2; // resultado = true\nnumero1 = 5;\nnumero2 = 5;\nresultado = numero1 &gt;= numero2; // resultado = true\nresultado = numero1 &lt;= numero2; // resultado = true\nresultado = numero1 == numero2; // resultado = true\nresultado = numero1 != numero2; // resultado = false\n//per a cadenes de text\nvar texto1 = \"hola\";\nvar texto2 = \"hola\";\nvar texto3 = \"adios\";\nresultado = texto1 == texto3; // resultado = false\nresultado = texto1 != texto2; // resultado = false\nresultado = texto3 &gt;= texto2; // resultado = false\n</code></pre> <p>Quan s'utilitzen cadenes de text, els operadors \"m\u00e9s gran que\" <code>&gt;</code> i \"menor que\" <code>&lt;</code> segueixen un raonament no intu\u00eftiu: es compara lletra a lletra comen\u00e7ant des de l'esquerra fins que es trobi una difer\u00e8ncia entre les dues cadenes de text. Per determinar si una lletra \u00e9s m\u00e9s o menys que una altra, les maj\u00fascules es consideren menors que les min\u00fascules i les primeres lletres de l'alfabet s\u00f3n menors que les \u00faltimes (a \u00e9s menor que b, b \u00e9s menor que c, A \u00e9s menor que a, etc.)</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#igualtat-estricta","title":"Igualtat estricta <code>===</code>","text":"<p>L'operador d'estricta igualtat <code>===</code> revisa si dos operands s\u00f3n iguals i produeix un resultat Boole\u00e0. A difer\u00e8ncia de l'operador d'igualtat regular <code>==</code>, l'operador d'estricta igualtat sempre considera que els operands de diferent tipus de valor s\u00f3n diferents i mai similars. </p> JavaScript<pre><code>console.log(1 === 1);\n// expected output: true\nconsole.log('hello' === 'hello');\n// expected output: true\nconsole.log('1' ===  1);\n// expected output: false\nconsole.log(0 === false);\n// expected output: false\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#operador-ternari","title":"Operador ternari","text":"<p>\u00c9s l'unic operador en javascript que disposa de tres operands, i s'utilitza com a abreviatura de la instrucci\u00f3 <code>if</code>. Serveix per a realitzar una acci\u00f3 si la comparaci\u00f3 \u00e9s vertadera i altra si \u00e9s falsa.</p> <p><code>condici\u00f3 ? expr1 : expr2</code></p> JavaScript<pre><code>//si \u00e9s membre la quota ser\u00e0 de 5 euros i si no ser\u00e0 de 10 euros\n\"La quota \u00e9s de:  \" + (isMember ? \"5.00\u20ac\" : \"10.00\u20ac\")\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#estructures-de-control","title":"Estructures de control","text":""},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#if","title":"If","text":"<p>\u00c9s una de les estructures de control m\u00e9s senzilles, funciona executant les instruccions compreses entre <code>{}</code> en cas que la condici\u00f3 siga <code>true</code>.</p> JavaScript<pre><code>if (condicio){\n    //instruccions a executar\n}\n</code></pre> <p>Hi ha diferent formes d'avaluar les instruccions. </p> JavaScript<pre><code>var condicio = true;\nif (condicio){\n    alert(\"tot correcte\");\n}\n</code></pre> <p>Altra forma igualment v\u00e0lida seria...</p> JavaScript<pre><code>var condicio = true;\nif (condicio == true) {\n    //instruccions a executar\n}\n</code></pre> <p>Una errada de programaci\u00f3 molt habitual en principiants \u00e9s confondre els operadors <code>=</code> i <code>==</code></p> JavaScript<pre><code>var condicio = false;\nif (condicio = true) {\n    //errada, estem assignant a condici\u00f3 el valor true\n}\n</code></pre> <p>Es poden combinar diferents operadors l\u00f2gics en la condici\u00f3.</p> JavaScript<pre><code>var condicio1 = true;\nvar condicio2 = false;\n\nif (!condicio1 || condicio 2){\n    alert(\"hola\");//no s'executa ja que la condici\u00f3 \u00e9s negativa.\n}\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#ifelse","title":"If...else","text":"<p>\u00c9s una evoluci\u00f3 del cas anteriorn en el que si la condici\u00f3 \u00e9s <code>true</code> s'executen les instruccions dintre del <code>IF</code> i si la condici\u00f3 \u00e9s <code>false</code> s'executen les instruccions dintre del <code>ELSE</code>.</p> <p>JavaScript<pre><code>var edat = 18;\nif (edat &gt;= 18){\n    alert(\"eres major d'edat\");\n}else{\n    alert(\"eres menor d'edat\");\n}\n</code></pre> Es poden encadenar diferents <code>else if</code> per a avaluar diferents condicions.</p> JavaScript<pre><code>if(edad &lt; 12) {\n  alert(\"Todav\u00eda eres muy peque\u00f1o\");\n}\nelse if(edad &lt; 19) {\n  alert(\"Eres un adolescente\");\n}\nelse if(edad &lt; 35) {\n  alert(\"Aun sigues siendo joven\");\n}\nelse {\n  alert(\"Piensa en cuidarte un poco m\u00e1s\");\n}\n</code></pre> <p>Feu el seg\u00fcent exercici  El c\u00e1lculo de la letra del Documento Nacional de Identidad (DNI) es un proceso matem\u00e1tico sencillo que se basa en obtener el resto de la divisi\u00f3n entera del n\u00famero de DNI y el n\u00famero 23. A partir del resto de la divisi\u00f3n, se obtiene la letra seleccion\u00e1ndola dentro de un array de letras.</p> <p>El array de letras es: <code>var letras = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E', 'T'];</code></p> <p>Por tanto si el resto de la divisi\u00f3n es 0, la letra del DNI es la T y si el resto es 3 la letra es la A. Con estos datos, elaborar un peque\u00f1o script que:</p> <p>Almacene en una variable el n\u00famero de DNI indicado por el usuario y en otra variable la letra del DNI que se ha indicado. (Pista: si se quiere pedir directamente al usuario que indique su n\u00famero y su letra, se puede utilizar la funci\u00f3n <code>prompt())</code></p> <p>En primer lugar (y en una sola instrucci\u00f3n) se debe comprobar si el n\u00famero es menor que 0 o mayor que 99999999. Si ese es el caso, se muestra un mensaje al usuario indicando que el n\u00famero proporcionado no es v\u00e1lido y el programa no muestra m\u00e1s mensajes.</p> <p>Si el n\u00famero es v\u00e1lido, se calcula la letra que le corresponde seg\u00fan el m\u00e9todo explicado anteriormente.</p> <p>Una vez calculada la letra, se debe comparar con la letra indicada por el usuario. Si no coinciden, se muestra un mensaje al usuario dici\u00e9ndole que la letra que ha indicado no es correcta. En otro caso, se muestra un mensaje indicando que el n\u00famero y la letra de DNI son correctos.</p> <p>Podeu consultar la soluci\u00f3 ac\u00ed.</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#for","title":"FOR","text":"<p>Serveix per a executar de forma repetida una s\u00e8rie d'instruccions un determinat n\u00famero de vegades. Vegem un exemple de com es pot realitzar un programa que realitze el mateix resultat, primer amb un <code>if</code> i despr\u00e9s amb un <code>for</code>.</p> <p>JavaScript<pre><code>var veces = 0;\n\nif(veces &lt; 4) {\n  alert(\"Mensaje\");\n  veces++;\n}\n</code></pre> Ara amb un <code>FOR</code></p> JavaScript<pre><code>var mensaje = \"Hola, estoy dentro de un bucle\";\n\nfor(var i = 0; i &lt; 5; i++) {\n  alert(mensaje);\n}\n</code></pre> <p>Vegem ara com podriem utilitzar-lo per a obtindre les caselles d'un <code>array</code></p> <p>Feu el seg\u00fcent exercici</p> <p>El factorial de un n\u00famero entero n es una operaci\u00f3n matem\u00e1tica que consiste en multiplicar todos los factores n x (n-1) x (n-2) x ... x 1. As\u00ed, el factorial de 5 (escrito como 5!) es igual a: 5! = 5 x 4 x 3 x 2 x 1 = 120</p> <p>Utilizando la estructura for, crear un script que calcule el factorial de un n\u00famero entero. Soluci\u00f3</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#for-in","title":"For in","text":"<p>\u00c9s una variant del <code>FOR</code> i s'utilitza per a rec\u00f2rrer <code>arrays</code> de manera que es va recorrent element a element del vector.</p> JavaScript<pre><code>for (index in array){\n    //instruccions a executar\n}\n\nTornem a vore l'exemple dels dies de la setmana.\n\n```javascript\nvar dias = [\"Lunes\", \"Martes\", \"Mi\u00e9rcoles\", \"Jueves\", \"Viernes\", \"S\u00e1bado\", \"Domingo\"];\n\nfor(i in dias) {\n  alert(dias[i]);\n}\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#while","title":"While","text":"<p>Estructura que repeteix les instruccions mentre siga vertadera la condici\u00f3. Avalua la condici\u00f3 al principi del bucle.</p> JavaScript<pre><code>while(condicio) {\n  //instruccions a executar\n}\n</code></pre> <p>Vegem un exemple.</p> JavaScript<pre><code>let n = 0;\nlet x = 0;\nwhile (n &lt; 3) {\n  n++;\n  x += n;\n}\n</code></pre> <p>En cada iteracci\u00f3 augmenta en 1 el valor de <code>n</code> i el suma a la variable <code>x</code>. Despr\u00e9s de la primera passada: n = 1 i x = 1. Despr\u00e9s de la segona passada: n = 2 i x = 3. Despr\u00e9s de la tercera pasada: n = 3 i x = 6.</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#dowhile","title":"Do...While","text":"<p>Similar a l'anterior per\u00f2 en aquest cas, com a m\u00ednim, realitzar\u00e0 les instruccions almenys una vegada, ja que s'avalua la condici\u00f3 al finalitzar el bucle.</p> JavaScript<pre><code>var numero = 0;\n\ndo {\n  alert(\"saludant...\");\n  numero--;\n} while(numero &gt; 0);\n//almenys saludaria una vegada ja que sempre fa la primera iteraci\u00f3\n</code></pre> <p>Altre exemple interesant es que es sumen n\u00fameros per\u00f2 tractats com a cadena de car\u00e0cters.</p> JavaScript<pre><code>let result = '';\nlet i = 0;\n\ndo {\n  i = i + 1;\n  result = result + i;\n} while (i &lt; 5);\n\nconsole.log(result);\n// expected result: \"12345\"\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#switch","title":"Switch","text":"<p>Serveix per a casos en que la condici\u00f3 pot tindre diversos valors. \u00c9s m\u00e9s amigable que una s\u00e8ries de <code>else if</code> seguits. </p> <p>Mirem un codi fer en <code>else if</code></p> JavaScript<pre><code>if(numero == 5) {\n  ...\n}\nelse if(numero == 8) {\n  ...\n}\nelse if(numero == 20) {\n  ...\n}\nelse {\n  ...\n}\n</code></pre> <p>Observem com queda en <code>switch</code></p> JavaScript<pre><code>switch(numero) {\n  case 5:\n    ...\n    break;\n  case 8:\n    ...\n    break;\n  case 20:\n    ...\n    break;\n  default:\n    ...\n    break;\n}\n</code></pre> <p>\u00c9s convenient posar una opci\u00f3 per defecte, en cas que la condici\u00f3 no coincidisca amb ningun valor.</p> JavaScript<pre><code>switch (expr) {\n  case 'Naranjas':\n    console.log('El kilogramo de naranjas cuesta $0.59.');\n    break;\n  case 'Manzanas':\n    console.log('El kilogramo de manzanas cuesta $0.32.');\n    break;\n  case 'Platanos':\n    console.log('El kilogramo de platanos cuesta $0.48.');\n    break;\n  case 'Cerezas':\n    console.log('El kilogramo de cerezas cuesta $3.00.');\n    break;\n  case 'Mangos':\n  case 'Papayas':\n    console.log('El kilogramo de mangos y papayas cuesta $2.79.');\n    break;\n  default:\n    console.log('Lo lamentamos, por el momento no disponemos de ' + expr + '.');\n}\n\nconsole.log(\"\u00bfHay algo m\u00e1s que te quisiera consultar?\");\n</code></pre> <p>Programa un joc breu per a aprendre les capitals de 15 paissos europeus. Has d'introduir el nom del pa\u00eds i el programa et respondr\u00e0 la capital. El programa acabar\u00e0 d'executar-se quan introduisques la cadena <code>eixir</code>.</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#funcions","title":"Funcions","text":""},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#definicio","title":"Definici\u00f3","text":"<p>Una funci\u00f3 \u00e9s un conjunt agrupat d'instruccions que realitzen una tasca i que generalment es poden reutilitzar.</p> <p>\u00c9s un concepte que est\u00e0 present en multitud de llenguatges de programaci\u00f3. En <code>Javascript</code> definim una funci\u00f3 de la seg\u00fcent forma:</p> <p>JavaScript<pre><code>function nom_funcio() {\n  ...//instruccions \n}\n</code></pre> I la utilitzem amb <code>nom_funcio(arguments)</code>.</p> <p>Per a declarar una funci\u00f3 hem de:</p> <ul> <li>Utilitzar la paraula reservada <code>function</code>.</li> <li>El nom de la funci\u00f3.</li> <li>Una llista de par\u00e0metres entre par\u00e8ntesi.</li> <li>Les instruccions agrupades entre corxets <code>{}</code>.</li> </ul> <p>A les funcions podem passa-los una s\u00e8rie de par\u00e0metres per a que operen amb ells (arguments) i a m\u00e9s a m\u00e9s poden retornar algun valor. Com a exemple, anem a declarar una funci\u00f3 que calcule i retorne el quadrat d'un n\u00famero que nosaltres li passem.</p> JavaScript<pre><code>function square(number) {\n  return number * number;\n}\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#arguments","title":"Arguments","text":"<p>Tal i com es veu en l'exemple anterior, per a utilitzar els arguments que li passem a la funci\u00f3 els hem de nomenar tal i com ho fem al passar-los. A m\u00e9s a m\u00e9s Abans que puga utilitzar-los, la funci\u00f3 ha d'indicar quants arguments necessita i quin \u00e9s el nom de cada argument. A m\u00e9s, a l'invocar la funci\u00f3, s'han d'incloure els valors que se li van a passar a la funci\u00f3. Els arguments s'indiquen dins dels par\u00e8ntesis que van darrere del nom de la funci\u00f3 i se separen amb una coma <code>,</code>.Vegem el seg\u00fcent exemple.</p> <p>JavaScript<pre><code>function suma_y_muestra(primerNumero, segundoNumero) { \n  var resultado = primerNumero + segundoNumero;\n  alert(\"El resultado es \" + resultado);\n}\n</code></pre> Dins de la funci\u00f3, el valor de la variable primerNumero ser\u00e0 igual a el primer valor que se li passi a la funci\u00f3 i el valor de la variable segundoNumero ser\u00e0 igual a el segon valor que se li passa. Per passar valors a la funci\u00f3, s'inclouen dins dels par\u00e8ntesis utilitzats a l'cridar a la funci\u00f3.</p> <p>Vegem un exemple complet de declaraci\u00f3 de la funci\u00f3, variables i crida a la funci\u00f3.</p> <ul> <li> <p>Encara que gaireb\u00e9 sempre s'utilitzen variables per passar les dades a la funci\u00f3, es podria haver utilitzat directament el valor d'aquestes variables: <code>suma_y_muestra (3, 5);</code></p> </li> <li> <p>El nombre d'arguments que es passa a una funci\u00f3 hauria de ser el mateix que el nombre d'arguments que ha indicat la funci\u00f3. No obstant aix\u00f2, JavaScript no mostra cap error si es passen m\u00e9s o menys arguments dels necessaris.</p> </li> <li> <p>L'ordre dels arguments \u00e9s fonamental, ja que la primera dada que s'indica en l'anomenada, ser\u00e0 el primer valor que s'espera la funci\u00f3; el segon valor indicat a la crida, \u00e9s el segon valor que s'espera la funci\u00f3 i aix\u00ed successivament.</p> </li> <li> <p>Es pot utilitzar un nombre il\u00b7limitat d'arguments, encara que si el seu nombre \u00e9s molt gran, es complica en exc\u00e9s la crida a la funci\u00f3.</p> </li> <li> <p>No \u00e9s obligatori fer coincidir el nom dels arguments que utilitza la funci\u00f3 i el nom dels arguments que se li passen. En l'exemple anterior, els arguments que es passen s\u00f3n <code>numero1</code> i <code>numero2</code> i els arguments que utilitza la funci\u00f3 s\u00f3n <code>primerNumero</code> i <code>segundoNumero</code>.</p> </li> </ul> <p>JavaScript<pre><code>function suma_y_muestra(primerNumero, segundoNumero){\n  var resultado = primerNumero + segundoNumero;\n}\n</code></pre> Fes els seg\u00fcents exercicis de la web Uniwebsidad.</p> <p>Escriure el codi d'una funci\u00f3 a la qual es passa com a par\u00e0metre un nombre enter i retorna com a resultat una cadena de text que indica si el n\u00famero \u00e9s parell o imparell. Mostra per pantalla el resultat retornat per la funci\u00f3.</p> <p>Definir una funci\u00f3 que mostri informaci\u00f3 sobre una cadena de text que se li passa com a argument. A partir de la cadena que se li passa, la funci\u00f3 determina si aquesta cadena est\u00e0 formada nom\u00e9s per maj\u00fascules, nom\u00e9s per min\u00fascules o per una barreja de totes dues.</p> <p>Definir una funci\u00f3 que determini si la cadena de text que se li passa com a par\u00e0metre \u00e9s un pal\u00edndrom, \u00e9s a dir, si es llegeix de la mateixa manera des de l'esquerra i des de la dreta. Exemple d'pal\u00edndrom complex:\"La ruta nos aporto otro paso natural\".</p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#ambit-de-les-variables","title":"\u00c0mbit de les variables.","text":"<p>En Javascript, tal i com ocorre en altres llenguatges de programaci\u00f3, tenim que les variables poden ser d'\u00e0mbit local o global. Segons com es defineix la variable, el seu \u00e0mbit o <code>scope</code> fa que siga visible dintre de la funci\u00f3 on est\u00e0 creada, o b\u00e9 en la totalitat del programa.</p> <p>En Javascript no podrem accedir a variables que hagin estat definides en una altra p\u00e0gina. Per tant, la mateixa p\u00e0gina on es defineix \u00e9s l'\u00e0mbit m\u00e9s habitual d'una variable i l'anomenarem a aquest tipus de variables globals a la p\u00e0gina. Veurem tamb\u00e9 es poden fer variables amb \u00e0mbits diferents de l'global, \u00e9s a dir, variables que declararem i tindran validesa en llocs m\u00e9s tancats. </p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#variables-locals","title":"Variables locals","text":"<p>JavaScript<pre><code>function creaMensaje() {\n  var mensaje = \u201cMensaje de prueba\u201d;\n}\ncreaMensaje();\nalert(mensaje);\n</code></pre> L'exemple anterior defineix en primer lloc una funci\u00f3 anomenada creaMensaje que crea una variable anomenada missatge. A continuaci\u00f3, s'executa la funci\u00f3 mitjan\u00e7ant l'anomenada <code>creaMensaje ();</code> i tot seguit, es mostra mitjan\u00e7ant la funci\u00f3 <code>alert ()</code> el valor d'una variable anomenada missatge.</p> <p>No obstant aix\u00f2, a l'executar el codi anterior no es mostra cap missatge per pantalla. La ra\u00f3 \u00e9s que la variable missatge s'ha definit dins de la funci\u00f3 <code>creaMensaje ()</code> i per tant, \u00e9s una variable local que nom\u00e9s est\u00e0 definida dins de la funci\u00f3.</p> <p>Qualsevol instrucci\u00f3 que es trobe dins de la funci\u00f3 pot fer \u00fas d'aquesta variable, per\u00f2 totes les instruccions que es troben en altres funcions o fora de qualsevol funci\u00f3 no tindran definida la variable missatge. D'aquesta manera, per mostrar el missatge en el codi anterior, la funci\u00f3 <code>alert ()</code> ha de cridar des de dins de la funci\u00f3 <code>creaMensaje ()</code></p> JavaScript<pre><code>function creaMensaje() {\n  var mensaje = \u201cMensaje de prueba\u201d;\n  alert(mensaje);\n}\ncreaMensaje();\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#variables-globals","title":"Variables globals","text":"<p>La variable global \u00e9s una variable que es pot definir en qualsevol punt del programa, incl\u00fas dintre d'una funci\u00f3. JavaScript<pre><code>var = \"mensaje de prueba\";\nfunctions muestraMensaje(){\n  alert(mensaje);\n}\n</code></pre></p> <p>El codi anterior \u00e9s l'exemple invers al mostrat anteriorment. Dins de la funci\u00f3 <code>muestraMensaje ()</code> es vol fer \u00fas d'una variable anomenada <code>mensaje</code> i que no ha estat definida dins de la pr\u00f2pia funci\u00f3. No obstant aix\u00f2, si s'executa el codi anterior, s\u00ed que es mostra el missatge definit per la variable <code>mensaje</code>.</p> <p>El motiu \u00e9s que en el codi JavaScript anterior, la variable <code>mensaje</code> s'ha definit fora de qualsevol funci\u00f3. Aquest tipus de variables autom\u00e0ticament es transformen en variables globals i estan disponibles a qualsevol punt de el programa (fins i tot dins de qualsevol funci\u00f3).</p> <p>D'aquesta manera, tot i que a l'interior de la funci\u00f3 no s'ha definit cap variable anomenada <code>mensaje</code>, la variable global creada anteriorment permet que la instrucci\u00f3 <code>alert ()</code> dins de la funci\u00f3 mostri el missatge correctament. </p> <p>Si una variable es declara fora de qualsevol funci\u00f3, autom\u00e0ticament es transforma en variable global independentment de si es defineix utilitzant la paraula reservada <code>var</code> o no. No obstant aix\u00f2, les variables definides dins d'una funci\u00f3 poden ser globals o locals.</p> <p>Si a l'interior d'una funci\u00f3, les variables es declaren mitjan\u00e7ant <code>var</code> es consideren locals i les variables que no s'han declarat mitjan\u00e7ant var, es transformen autom\u00e0ticament en variables globals. </p> <p>En el cas que una funci\u00f3 defineix una variable local amb el mateix nom que una global, domina la variable local.</p> <p>JavaScript<pre><code>var mensaje = \"gana la de fuera\";\n function muestraMensaje() {\n  var mensaje = \"gana la de dentro\";\n  alert(mensaje);\n}\nalert(mensaje);\nmuestraMensaje();\nalert(mensaje);\n</code></pre> El resultat \u00e9s: <code>gana la de fuera</code> <code>gana la de dentro</code> <code>gana la de fuera</code></p> <p>Si dintre d'una funci\u00f3 definim una variable global amb el mateix nom que una variable que ja existeix, el que ocorrir\u00e0 \u00e9s que es modifica el valor de la variable global existent.</p> JavaScript<pre><code>var mensaje = \"gana la de fuera\";\nfunction muestraMensaje(){\n  mensaje = \"gana la de dentro\";\n  alert(mensaje);\n}\nmuestraMensaje();\n</code></pre> <p>El resultat que s'obt\u00e9 \u00e9s  <code>gana la de dentro</code></p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#let-i-const","title":"<code>let</code> i <code>const</code>","text":"<p>A m\u00e9s a m\u00e9s del que s'ha explicat de les variables globals, en Javascript, la versi\u00f3 ES6 introdueix aquestes paraules reservades i podem declarar variables fent \u00fas de les sent\u00e8ncies <code>let</code> i <code>const</code>.</p> <p><code>const</code> ser\u00e0 una variable que mai canviar\u00e0 el seu valor al llarg del programa.</p> <p><code>let</code> ser\u00e0 una variable que nom\u00e9s existir\u00e0 dintre del seu <code>scope</code>.</p> <p>Vegem el concepte de <code>let</code> comparant <code>ES5</code> i <code>ES6</code>. En primer lloc tenim un programa fet amb <code>ES5</code>.</p> <p>JavaScript<pre><code>var x = 0; // Variable x declarada como var\nfunctionfour5(){\n    for (var i = 0; i &lt; 5; i++){ // un for loop que va desde 0 hasta i menor a 5, osea 4\n        x = i; // asignamos el valor de i a x, como vamos hasta 4, porque cuando i alcanza el valor de 5 el lopop termina, x tiene el valor 4\n    }\n}\nfour5();\nconsole.log(x) //al imprimir x, efectivamente es 4\n// La x declarada con el valor 0 y la x dentro de la funcion, son la misma x.\n</code></pre> Observem ara un codi similar per\u00f2 implementat amb <code>ES6</code></p> JavaScript<pre><code>let y = 0;\nfunctionfour6(){\n    for(let i = 0; i &lt; 5; i++) {\n        y = i; // Esta y no ha sido declarada si quiera, el alcance de cada variable esta sujeta a los {}, as'i que es undefined\n    }\n}\nfour6();\nconsole.log(y); // Retorna 0, el valor declarado en un principio, la variable y no entr\u00f3 en lafuncion four6(), asi que son y diferentes.\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#funcions-anonimes","title":"Funcions an\u00f2nimes","text":"<p>S\u00f3n funcions declarades sense cap nom i que incl\u00fas es poden emmagatzemar en una variable.</p> <p>JavaScript<pre><code>const square = function(number) { return number * number }\nvar x = square(4) // x obtiene el valor 16\n</code></pre> \u00c9s un concepte molt utilitzat en casos en que has de passar una funci\u00f3 com a argument a altra funci\u00f3.</p> <p>JavaScript<pre><code>function map(f, a) {\n  let result = []; // Crea un nuevo arreglo\n  let i; // Declara una variable\n  for (i = 0; i != a.length; i++)\n    result[i] = f(a[i]);\n  return result;\n}\nconst f = function(x) {\n   return x * x * x;\n}\nlet numbers = [0, 1, 2, 5, 10];\nlet cube = map(f,numbers);\nconsole.log(cube);\n</code></pre> Es mostra per pantalla <code>[0, 1, 8, 125, 1000]</code></p>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#la-variable-arguments","title":"La variable arguments","text":"<p>En <code>Javascript</code> tenim per defecte un pseudo-vector anomenat <code>Arguments[]</code> en que estan tots els parametres que passem a una funci\u00f3. En sitaxi <code>ES6</code>, que estudiarem m\u00e9s endavant, disposarem d'un element similar anomenat <code>par\u00e0metres REST</code>.</p> JavaScript<pre><code>function func1(a, b, c) {\n  console.log(arguments[0]);\n  // expected output: 1\n\n  console.log(arguments[1]);\n  // expected output: 2\n\n  console.log(arguments[2]);\n  // expected output: 3\n}\n\nfunc1(1, 2, 3);\n</code></pre> <p>Es pot recorrer...</p> JavaScript<pre><code>function total() {\n    var total = 0;\n        for( var i = 0; i &lt; arguments.length; i++){total += arguments[i]};\n    return total;\n}\nconsole.log(total(1, 2, 3, 4, 5));// devuelve 15\nconsole.log(total(1, 2, 3, 4, 5, 6, 7, 8, 9));// devuelve 45\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#funcions-arrow","title":"Funcions <code>arrow</code>","text":"<p>Les funcions arrow en JavaScript s\u00f3n una caracter\u00edstica introdu\u00efda en ECMAScript 6 (ES6) que ofereixen una sintaxi m\u00e9s concisa per a definir funcions. Aquest tipus de funci\u00f3 tamb\u00e9 introdueixen canvis en com es maneixa el context (<code>this</code>) en comparaci\u00f3 amb les funcions tradicionals.</p> JavaScript<pre><code>// Sintaxi d'una funci\u00f3 arrow b\u00e0sica\nconst arrowFunction = () =&gt; {\n  // Codi de la funci\u00f3\n};\n</code></pre> <p>Si passem un s\u00f2l par\u00e0metre podem utilitzar o no els par\u00e8ntesis a voluntat... JavaScript<pre><code>const func = param =&gt; {\n  console.log(param);\n};\n\nfunc('Hola'); // Imprimeix 'Hola'\n</code></pre></p> <p>Si tenim m\u00e9s d'un par\u00e0metre...</p> JavaScript<pre><code>const sum = (a, b) =&gt; {\n  return a + b;\n};\n\nconsole.log(sum(2, 3)); // Imprimeix 5\n</code></pre> <p>Si no tenim par\u00e0metres deixem els par\u00e8ntesis buits...</p> JavaScript<pre><code>const greet = () =&gt; {\n  console.log('Hola!');\n};\n\ngreet(); // Imprimeix 'Hola!'\n</code></pre> <p>Vegem la difer\u00e8ncia entre una funci\u00f3 tradicional i una funci\u00f3 <code>arrow</code>.</p> JavaScript<pre><code>// Funci\u00f3n tradicional\nfunction (a){\n  return a + 100;\n}\n\n// Desglose de la funci\u00f3n flecha\n\n// 1. Elimina la palabra \"function\" y coloca la flecha entre el argumento y el corchete de apertura.\n(a) =&gt; {\n  return a + 100;\n}\n\n// 2. Quita los corchetes del cuerpo y la palabra \"return\" \u2014 el return est\u00e1 impl\u00edcito.\n(a) =&gt; a + 100;\n\n// 3. Suprime los par\u00e9ntesis de los argumentos\na =&gt; a + 100;\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#parametres-per-defecte","title":"Par\u00e0metres per defecte","text":"<p>Podem definir par\u00e0metres per defecte.</p> JavaScript<pre><code>const greetPerson = (name = 'Usuari') =&gt; {\n  console.log(`Hola, ${name}!`);\n};\n\ngreetPerson(); // Imprimeix 'Hola, Usuari!'\ngreetPerson('John'); // Imprimeix 'Hola, John!'\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#parametres-rest","title":"Par\u00e0metres <code>...rest</code>","text":"<p>Els par\u00e0metres \"rest\" en JavaScript s\u00f3n una funcionalitat que permet capturar un nombre variable d'arguments passats a una funci\u00f3 i encapsular-los en un array. Aquesta caracter\u00edstica s'utilitza quan no sabem quantos arguments seran passats a la funci\u00f3 o volem treballar amb una llista de par\u00e0metres d'una manera m\u00e9s vers\u00e0til.</p> <p>La sintaxi per als par\u00e0metres \"rest\" fa servir tres punts (...) seguits d'un nom de variable, que recopila els arguments restants en un array. Aquesta variable pot ser utilitzada dins de la funci\u00f3 com un array que cont\u00e9 tots els arguments addicionals que no han estat assignats a altres par\u00e0metres.</p> JavaScript<pre><code>function sum(...theArgs) {\n  let total = 0;\n  for (const arg of theArgs) {\n    total += arg;\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2, 3));\n// Expected output: 6\n\nconsole.log(sum(1, 2, 3, 4));\n// Expected output: 10\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#annex-i-funcions-predefinides-del-llenguatge","title":"ANNEX I - Funcions predefinides del llenguatge","text":""},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#funcions-generals","title":"Funcions generals","text":"<ul> <li><code>alert()</code>: Mostra un missatge d'alerta amb el contingut especificat a l'usuari.</li> <li><code>console.log()</code>: Escriu missatges de registre a la consola del navegador o de l'entorn d'execuci\u00f3.</li> <li><code>prompt()</code>: Mostra un quadre de di\u00e0leg perqu\u00e8 l'usuari introdueixi una entrada.</li> <li><code>confirm()</code>: Mostra un quadre de di\u00e0leg de confirmaci\u00f3 amb els botons \"Acceptar\" i \"Cancel\u00b7lar\".</li> <li><code>setTimeout()</code>: Executa una funci\u00f3 despr\u00e9s d'un cert temps (en mil\u00b7lisegons) especificat.</li> <li><code>setInterval()</code>: Executa una funci\u00f3 a intervals regulars (en mil\u00b7lisegons) especificats.</li> <li><code>clearTimeout()</code>: Cancel\u00b7la un temporitzador establert amb setTimeout().</li> <li><code>clearInterval()</code>: Cancel\u00b7la un interval establert amb setInterval().</li> </ul> JavaScript<pre><code>alert(\"Aix\u00f2 \u00e9s un missatge d'alerta!\");\n\nconsole.log(\"Missatge de la consola\");\n\nlet input = prompt(\"Introdueix una dada:\");\n\nlet result = confirm(\"Est\u00e0s segur?\");\n\nsetTimeout(function() {\n  console.log(\"S'ha passat un temps!\");\n}, 1000); // Executa despr\u00e9s d'1 segon\n\nsetInterval(function() {\n  console.log(\"Aquesta funci\u00f3 es repeteix cada segon.\");\n}, 1000); // Repetici\u00f3 cada 1 segon\n\nlet timeoutId = setTimeout(function() {\n  console.log(\"Aix\u00f2 no es mostrar\u00e0.\");\n}, 1000);\n\nclearTimeout(timeoutId); // Cancel\u00b7la el temporitzador\n\nlet intervalId = setInterval(function() {\n  console.log(\"Aix\u00f2 es mostra cada segon.\");\n}, 1000);\n\nclearInterval(intervalId); // Cancel\u00b7la l'interval\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#funcions-per-al-tractament-darrays","title":"Funcions per al tractament d'arrays","text":"<ul> <li> <p><code>push()</code>: Afegeix un element al final de l'array. JavaScript<pre><code>let array = [1, 2, 3];\narray.push(4); // L'array ara cont\u00e9 [1, 2, 3, 4]\n</code></pre></p> </li> <li> <p><code>pop()</code>: Elimina l'\u00faltim element de l'array i el retorna. JavaScript<pre><code>let array = [1, 2, 3];\nlet lastElement = array.pop(); // lastElement cont\u00e9 3, l'array ara \u00e9s [1, 2]\n</code></pre></p> </li> <li> <p><code>shift()</code>: Elimina el primer element de l'array i despla\u00e7a els altres elements cap enrere. JavaScript<pre><code>let array = [1, 2, 3];\nlet firstElement = array.shift(); // firstElement cont\u00e9 1, l'array ara \u00e9s [2, 3]\n</code></pre></p> </li> <li> <p><code>unshift()</code>: Afegeix un element al principi de l'array i despla\u00e7a els altres elements cap endavant. JavaScript<pre><code>let array = [2, 3];\narray.unshift(1); // L'array ara cont\u00e9 [1, 2, 3]\n</code></pre></p> </li> <li> <p><code>splice()</code>: Permet afegir, eliminar o reempla\u00e7ar elements en posicions espec\u00edfiques de l'array. JavaScript<pre><code>let array = [1, 2, 3, 4, 5];\narray.splice(2, 1); // Elimina un element a la posici\u00f3 2: l'array ara \u00e9s [1, 2, 4, 5]\n</code></pre></p> </li> <li> <p><code>concat()</code>: Uneix dos o m\u00e9s arrays creant un nou array amb tots els elements. JavaScript<pre><code>let array1 = [1, 2];\nlet array2 = [3, 4];\nlet newArray = array1.concat(array2); // newArray cont\u00e9 [1, 2, 3, 4]\n</code></pre></p> </li> <li> <p><code>slice()</code>: Crea una c\u00f2pia superficial d'una part de l'array indicada per les posicions inicial i final. JavaScript<pre><code>let array = [1, 2, 3, 4, 5];\nlet subArray = array.slice(1, 4); // subArray cont\u00e9 [2, 3, 4]\n</code></pre></p> </li> <li> <p><code>forEach()</code>: Executa una funci\u00f3 per a cada element de l'array. JavaScript<pre><code>let array = [1, 2, 3];\narray.forEach(function(element) {\n  console.log(element);\n});\n// Mostra: 1, 2, 3\n</code></pre></p> </li> </ul>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#funcions-per-al-tractament-de-cadenes","title":"Funcions per al tractament de cadenes","text":"JavaScript<pre><code>let str = \"Hola, m\u00f3n!\";\nconsole.log(str.length); // Mostra: 12\n/************************************/\nlet str = \"Hola\";\nconsole.log(str.charAt(1)); // Mostra: \"o\" (el car\u00e0cter a la posici\u00f3 1)\n/************************************/\nlet str = \"Hola, m\u00f3n!\";\nlet subStr = str.substring(0, 4); // subStr cont\u00e9 \"Hola\"\n/************************************/\nlet str = \"Hola, m\u00f3n!\";\nlet subStr = str.slice(0, 4); // subStr cont\u00e9 \"Hola\"\n/************************************/\nlet str = \"Hola\";\nconsole.log(str.toUpperCase()); // Mostra: \"HOLA\"\n/************************************/\nlet str = \"Hola\";\nconsole.log(str.toLowerCase()); // Mostra: \"hola\"\n/************************************/\nlet str1 = \"Hola\";\nlet str2 = \"m\u00f3n\";\nlet result = str1.concat(\", \", str2); // result cont\u00e9 \"Hola, m\u00f3n\"\n/************************************/\nlet str = \"Hola, m\u00f3n!\";\nlet parts = str.split(\",\"); // parts cont\u00e9 [\"Hola\", \" m\u00f3n!\"]\n/************************************/\nlet str = \"Hola, m\u00f3n!\";\nconsole.log(str.indexOf(\"m\u00f3n\")); // Mostra: 6\n/************************************/\nlet str = \"Hola, m\u00f3n!\";\nlet newStr = str.replace(\"m\u00f3n\", \"univers\"); // newStr cont\u00e9 \"Hola, univers!\"\n</code></pre>"},{"location":"DWEC_UD1_Javascript_Introducci%C3%B3/#la-consola-de-javascript","title":"La consola de <code>javascript</code>","text":"<p>Per obrir la consola de JavaScript en diferents navegadors web, es pot utilitzar un dels seg\u00fcents m\u00e8todes per a cada navegador important:</p> <ul> <li>Google Chrome:</li> <li>M\u00e8tode 1: Utilitzant el Teclat:             Prem Ctrl+Shift+I (Windows/Linux) o Command+Option+I (Mac) per obrir les eines de desenvolupament. Despr\u00e9s, ves a l'opci\u00f3 \"Consola\".</li> <li> <p>M\u00e8tode 2: Utilitzant el Ratol\u00ed:             Fes clic amb el bot\u00f3 dret en qualsevol part de la p\u00e0gina web i selecciona \"Inspeccionar\". Despr\u00e9s, ves a l'opci\u00f3 \"Consola\".</p> </li> <li> <p>Mozilla Firefox:</p> <ul> <li>M\u00e8tode 1: Utilitzant el Teclat:         Prem Ctrl+Shift+K (Windows/Linux) o Command+Option+K (Mac) per obrir la consola.</li> <li>M\u00e8tode 2: Utilitzant el Ratol\u00ed:         Fes clic amb el bot\u00f3 dret en qualsevol part de la p\u00e0gina web i selecciona \"Inspecta element\". A la finestra que apareix, selecciona l'opci\u00f3 \"Consola\".</li> </ul> </li> <li> <p>Microsoft Edge:</p> <ul> <li>M\u00e8tode 1: Utilitzant el Teclat:         Prem Ctrl+Shift+I (Windows/Linux) o Command+Option+I (Mac) per obrir les eines de desenvolupament. Despr\u00e9s, ves a l'opci\u00f3 \"Consola\".</li> <li>M\u00e8tode 2: Utilitzant el Ratol\u00ed:         Fes clic amb el bot\u00f3 dret en qualsevol part de la p\u00e0gina web i selecciona \"Inspecciona\" o \"Inspecta element\". Despr\u00e9s, ves a l'opci\u00f3 \"Consola\".</li> </ul> </li> <li> <p>Safari:</p> <ul> <li>M\u00e8tode 1: Utilitzant el Teclat:         Prem Option+Command+C per obrir les eines de desenvolupament. Despr\u00e9s, ves a l'opci\u00f3 \"Consola\".</li> <li>M\u00e8tode 2: Utilitzant el Ratol\u00ed:         Accedeix a les prefer\u00e8ncies de Safari, ves a \"Avan\u00e7at\" i activa \"Mostrar el men\u00fa Desenvolupador a la barra de men\u00fas\". A continuaci\u00f3, selecciona \"Mostrar la consola </li> </ul> </li> </ul>"},{"location":"DWEC_UD2_Javascript_DOM/","title":"Unitat 6 - DOM","text":""},{"location":"DWEC_UD2_Javascript_DOM/#1-que-es-el-document-object-model","title":"1. Que \u00e9s el Document Object Model?","text":"<p>DOM</p> <p>El DOM permet manipular documents <code>XHTML</code> tal i com ho farien amb documents <code>XML</code>. </p> <p>Quan obrim una web escrita amb <code>HTML</code> el navegador crea una representaci\u00f3 del document en forma d'arbre de nodes, d'aquesta manera, el DOM permet automatitzar operacions com acc\u00e9s als nodes, manipulaci\u00f3, reaccionar a events, etc. Aquesta representaci\u00f3 en forma d'arbre el navegador la realitza en base a les etiquetes i el contingut que componen el document. Vegem una representaci\u00f3 del DOM d'un document HTML senzill.</p> <p></p> <p><code>Javascript</code> proporciona una API nativa als programadors per a treballar amb el <code>DOM</code>, per\u00f2 tamb\u00e9 podem fer \u00fas del <code>DOM</code> des d'altres llenguatges com <code>JAVA</code>, <code>PHP</code>, etc.</p> <p>Es pot observar en la figura anterior que es generen nodes de tipus <code>element</code>, de tipus <code>text</code> o de tipus <code>attribute</code> d'una forma similar l <code>html</code> on tenim etiquetes, text dintre de les etiquetes o atributs.</p> <p>Observem altre exemple de la web uniwebsidad on s'observa d'una forma molt gr\u00e0fica la transformaci\u00f3 de codi <code>html</code>en nodes.</p> <p>HTML<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /&gt;\n&lt;title&gt;P\u00e1gina sencilla&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;p&gt;Esta p\u00e1gina es &lt;strong&gt;muy sencilla&lt;/strong&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p>"},{"location":"DWEC_UD2_Javascript_DOM/#2-tipus-de-nodes","title":"2. Tipus de nodes","text":"<p>Els tipus de nodes m\u00e9s habituals i usats per a manipular les p\u00e0gines web s\u00f3n aquestos:</p> <ul> <li><code>document</code>: \u00e9s el node arrel</li> <li><code>element</code>: representa a les etiquetes html, pot contindre nodes de tipus <code>text</code> o <code>attr</code> aix\u00ed com tindre nodes fills.</li> <li><code>text</code>: cont\u00e9 el text de l'interior de les etiquetes.</li> <li><code>attr</code>: cont\u00e9 el valor d'un dels atributs de l'etiqueta.</li> <li><code>comment</code>: cont\u00e9 comentaris del codi.</li> </ul> <p>Pots consultar els tipus de nodes existents aix\u00ed com m\u00e9s informaci\u00f3 en aquesta web;</p>"},{"location":"DWEC_UD2_Javascript_DOM/#3-acces-als-nodes","title":"3. Acc\u00e9s als nodes","text":"<p>Pots consultar ac\u00ed una llista completa de m\u00e8todes i propietats per a manipular el DOM. En aquest apartat anem a centrar-nos en els m\u00e8todes de que disposem per a accedir als nodes.</p>"},{"location":"DWEC_UD2_Javascript_DOM/#getelementsbytagname","title":"getElementsByTagName()","text":"<p>Serveix per a obtindre aquells elements que coincidesquen amb l'etiqueta que passem per par\u00e0metre.</p> <p>JavaScript<pre><code>const element = document.getElementsByTagName(\"p\");\n</code></pre> Aquest m\u00e8tode, en el cas anterior, ens tornar\u00e0 un <code>array</code> amb tots els nodes de tipus par\u00e0graf que hi ha al document.</p> <p>No nom\u00e9s funciona aplicant la funci\u00f3 a l'objecte <code>document</code> sin\u00f2 que es por aplicar de forma recursiva a elements menors...</p> JavaScript<pre><code>var parrafos = document.getElementsByTagName(\"p\");\nvar primerParrafo = parrafos[0];\nvar enlaces = primerParrafo.getElementsByTagName(\"a\");\n//buscaria els enlla\u00e7os que hi han al primer par\u00e0graf\n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#getelementsbyname","title":"getElementsByName()","text":"<p>Obt\u00e9 una llista d'elements que el seu atribut <code>name</code> coincidisca amb el valor que passem per par\u00e0metre.</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n ...\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;form name=\"up\"&gt;&lt;input type=\"text\"&gt;&lt;/form&gt;\n&lt;div name=\"down\"&gt;&lt;input type=\"text\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\nvar up_forms = document.getElementsByName(\"up\");\nconsole.log(up_forms[0].tagName); // returns \"FORM\"\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#getelementbyid","title":"getElementById()","text":"<p>Selecciona un element que el seu atribut <code>id</code> coincidisca amb el que passem per par\u00e0metre. A difer\u00e8ncia dels dos m\u00e8todes anteriors serveix per a seleccionar elements individualment, ja que no pot haver m\u00e9s d'un element amb el mateix indentificar a una web.</p> <p>HTML<pre><code>&lt;html&gt;\n&lt;head&gt;\n   &lt;title&gt;Ejemplo getElementById&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n   &lt;p id=\"para\"&gt;Cualquier texto ac\u00e1&lt;/p&gt;\n   &lt;button onclick=\"changeColor('blue');\"&gt;Azul&lt;/button&gt;\n   &lt;button onclick=\"changeColor('red');\"&gt;Rojo&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> JavaScript<pre><code>function changeColor(newColor) {\n   var elem = document.getElementById('para');\n   elem.style.color = newColor;\n}\n</code></pre></p>"},{"location":"DWEC_UD2_Javascript_DOM/#seleccionant-mitjancant-selectors-css","title":"Seleccionant mitjan\u00e7ant selectors CSS","text":"<p>La funci\u00f3 <code>document.querySelector(selector)</code> seleccionar\u00e0 el primer element que coincidisca amb el selector passat. Per exemple, seleccionem el primer element que siga de la classe miClase.</p> JavaScript<pre><code>var el = document.querySelector(\".miClase\");\n</code></pre> <p>Tamb\u00e9 podem fer \u00fas de la funci\u00f3 <code>document.querySelectorAll(selector)</code> en la que seleccionarem tots els elements que coincidisquen amb el selector. Per exemple podem seleccionar tots els <code>div</code> del document que tinguen les classes <code>blau</code> o <code>verd</code>.</p> JavaScript<pre><code>var matches = document.querySelectorAll('div.blau, div.verd');\n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#seleccionant-mitjancant-coleccions-delements","title":"Seleccionant mitjan\u00e7ant coleccions d'elements","text":"<p>Hi ha alguns elements com per exemple els formularis que es poden seleccionar directmanet de la forma...</p> JavaScript<pre><code>const x = document.forms[\"frm1\"];\nlet text = \"\";\nfor (let i = 0; i &lt; x.length; i++) {\n  text += x.elements[i].value + \"&lt;br&gt;\";\n}\ndocument.getElementById(\"demo\").innerHTML = text; \n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#4-creacio-de-nodes","title":"4. Creaci\u00f3 de nodes","text":"<p>Es poden crear nodes i anidar-los a elements \"pare\". Vegem el proc\u00e9s de crear un node de tipus par\u00e0graf, afegir un text i incrustrar-lo dintre del node <code>&lt;body&gt;</code>.</p> JavaScript<pre><code>// Crear nodo de tipo Element\nvar parrafo = document.createElement(\"p\");\n\n// Crear nodo de tipo Text\nvar contenido = document.createTextNode(\"Hola Mundo!\");\n\n// A\u00f1adir el nodo Text como hijo del nodo Element\nparrafo.appendChild(contenido);\n\n// A\u00f1adir el nodo Element como hijo de la pagina\ndocument.body.appendChild(parrafo);\n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#5-eliminacio-de-nodes","title":"5. Eliminaci\u00f3 de nodes","text":"<p>Per a eliminar un node hi ha que accedir al seu node pare i eliminar el fill.</p> JavaScript<pre><code>var parrafo = document.getElementById(\"provisional\");\nparrafo.parentNode.removeChild(parrafo);\n\n&lt;p id=\"provisional\"&gt;...&lt;/p&gt;\n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#6-acces-als-atributs-dels-nodes","title":"6. Acc\u00e9s als atributs dels nodes","text":"<p>Es pot seleccionar un element i accedir als seua atributs i l'anidem amb <code>.atribut</code>. Per exemple, podem obtindre el valor de l'atribut <code>href</code> d'un enllac mitjan\u00e7ant</p> JavaScript<pre><code>var enlace = document.getElementById(\"enlace\");\nalert(enlace.href); // muestra http://www...com\n\n&lt;a id=\"enlace\" href=\"http://www...com\"&gt;Enlace&lt;/a&gt;\n</code></pre> <p>Per a obtindre els atributs CSS cal utilitzat <code>style</code>.</p> <p>JavaScript<pre><code>var imagen = document.getElementById(\"imagen\");\nalert(imagen.style.margin);\n\n&lt;img id=\"imagen\" style=\"margin:0; border:0;\" src=\"logo.png\" /&gt;\n</code></pre> Els atributs compostos s'utilitzen eliminant el gui\u00f3. Es veu com <code>font-weight</code> passa a ser <code>fontWeight</code>.</p> JavaScript<pre><code>var parrafo = document.getElementById(\"parrafo\");\nalert(parrafo.style.fontWeight);  // muestra \"bold\"\n\n&lt;p id=\"parrafo\" style=\"font-weight: bold;\"&gt;...&lt;/p&gt;\n</code></pre> <p>Com que la paraula <code>class</code> est\u00e0 reservada, per a obtindre la clase farem \u00fas de <code>className</code>.</p> JavaScript<pre><code>var parrafo = document.getElementById(\"parrafo\");\nalert(parrafo.class); // muestra \"undefined\"\nalert(parrafo.className); // muestra \"normal\"\n\n&lt;p id=\"parrafo\" class=\"normal\"&gt;...&lt;/p&gt;\n</code></pre> <p>Podem canviar el valor d'un atribut amb <code>document.getElementById(id).attribute = new value</code>.</p> HTML<pre><code> &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;img id=\"myImage\" src=\"smiley.gif\"&gt;\n\n&lt;script&gt;\ndocument.getElementById(\"myImage\").src = \"landscape.jpg\";\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#7-la-propietat-innerhtml","title":"7. La propietat innerHTML","text":"<p>Aquesta propietat permet que, mitjan\u00e7ant la selecci\u00f3 d'un component, modificar el <code>html</code> del seu interior. D'aquesta forma podem canviar el contingut d'un text d'un par\u00e0graf, generar nous nodes fills, etc. La seua sintaxi \u00e9s <code>document.getElementById(id).innerHTML = new HTML</code>.</p> <p>Vegem com modificar el contingut d'un par\u00e0graf.</p> HTML<pre><code> &lt;html&gt;\n&lt;body&gt;\n\n&lt;p id=\"p1\"&gt;Hello World!&lt;/p&gt;\n\n&lt;script&gt;\ndocument.getElementById(\"p1\").innerHTML = \"New text!\";\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>Podem generar contingut din\u00e0micament fent \u00fas d'algunes funcions de <code>Javascript</code></p> HTML<pre><code> &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;script&gt;\ndocument.getElementById(\"demo\").innerHTML = \"Date : \" + Date(); &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>"},{"location":"DWEC_UD2_Javascript_DOM/#8-exercicis","title":"8. Exercicis","text":"<p>Pots fer els exercicis resolts sobre el DOM que hi ha a la web uniwebsidad</p>"},{"location":"DWEC_UD2_Javascript_Events/","title":"Events","text":""},{"location":"DWEC_UD2_Javascript_Events/#1-que-son-els-events","title":"1. Que s\u00f3n els events?","text":"<p>En el model de programaci\u00f3 que heu vist fins ara, les instruccions s'executaven una darrere l'altra fins a acabar el programa. Les aplicacions web actuals requerixen interacci\u00f3 amb l'usuari i amb accions que ocorren a la p\u00e0gina, com per exemple pr\u00e8mer una tecla, passar el ratol\u00ed sobre una secci\u00f3 o esperar a que es carregue la p\u00e0gina per a interactuar amb el <code>DOM</code>. </p> <p>Aquestes accions s\u00f3n el que anomenem <code>events</code> i s\u00f3n de gran utilitat per als programadors ja que doten a l'aplicaci\u00f3 de interacci\u00f3 amb l'usuari.</p> <p>Que s\u00f3n els events?</p> <p>Els events s\u00f3n notificacions que envia la p\u00e0gina per a notificar que alguna cosa ha ocorregut. Els events estan representats per objectes de la interfaz <code>Event</code>.</p> <p>;</p>"},{"location":"DWEC_UD2_Javascript_Events/#2-tipus-devents","title":"2. Tipus d'events","text":"<p>Els events estan nomenats amb el prefixe <code>on</code> de manera que l'event que correspondria a fer click amb el ratol\u00ed seria <code>onclick</code>, polsar una tecla <code>onkeypress</code>, seleccionar un element <code>onfocus</code>, etc. Cada element podr\u00e0 proporcionar diferents tipus d'events. Podem consultar una llista m\u00e9s completa d'events a la web de la 3wschool.</p> <p>Els m\u00e9s habituals s\u00f3n:</p> <p>;</p>"},{"location":"DWEC_UD2_Javascript_Events/#3-manejadors-devents","title":"3. Manejadors d'events","text":"<p>Els events s\u00f3n controlats per porcions de codi que s'encarreguen de gestionar que ocorre a la p\u00e0gina en cas que l'event es produisca. Aquest control es pot dur a terme de v\u00e0ries formes.</p>"},{"location":"DWEC_UD2_Javascript_Events/#com-a-atributs-dintre-del-html","title":"Com a atributs dintre del HTML","text":"<p>JavaScript<pre><code>&lt;button onclick=\"alert('Hello!')\"&gt;Saludar&lt;/button&gt;\n</code></pre> Com es veu es crea un atribut amb el nom de l'event i el codi a executar. No \u00e9s recomanable utilitzar aquest m\u00e8tode ja que embruta el codi HTML i \u00e9s tedi\u00f3s gestionar events amb codi de m\u00e9s d'una l\u00ednia.</p>"},{"location":"DWEC_UD2_Javascript_Events/#amb-la-variable-this","title":"Amb la variable <code>this</code>","text":"<p>La variable <code>this</code> permet reduir el codi ja que ens proporciona una referencia a l'element propi. Vegem dos porcions de codi que realitzen el mateix.</p> <p>Sense la variable <code>this</code>.</p> JavaScript<pre><code>&lt;div id=\"contenidos\" style=\"width:150px; height:60px; border:thin solid silver\" onmouseover=\"document.getElementById('contenidos').style.borderColor='black';\" onmouseout=\"document.getElementById('contenidos').style.borderColor='silver';\"&gt;\n  Secci\u00f3n de contenidos...\n&lt;/div&gt;\n</code></pre> <p>Amb la variable <code>this</code>.</p> JavaScript<pre><code>&lt;div id=\"contenidos\" style=\"width:150px; height:60px; border:thin solid silver\" onmouseover=\"this.style.borderColor='black';\" onmouseout=\"this.style.borderColor='silver';\"&gt;\n  Secci\u00f3n de contenidos...\n&lt;/div&gt;\n</code></pre>"},{"location":"DWEC_UD2_Javascript_Events/#manejadors-semantics","title":"Manejadors sem\u00e0ntics","text":"<p>Fent \u00fas de funcions aconseguim eliminar qualsevol porci\u00f3 de codi <code>Javascript</code> dintre del codi <code>HTML</code>. \u00c9s una versi\u00f3 molt m\u00e9s recomanable que les estudiades anteriorment. La metodologia \u00e9s seleccionar un element de la p\u00e0gina i assignar-li una funci\u00f3 que s'encarregar\u00e0 de controlar el funcionament d'un event determinar.</p> JavaScript<pre><code>// Funci\u00f3n externa\nfunction muestraMensaje() {\n  alert('Gracias por pinchar');\n}\n\n// Asignar la funci\u00f3n externa al elemento\ndocument.getElementById(\"pinchable\").onclick = muestraMensaje;\n\n// Elemento XHTML\n&lt;input id=\"pinchable\" type=\"button\" value=\"Pinchame y ver\u00e1s\" /&gt;\n</code></pre> <p>Es pot comprovar la separaci\u00f3 dels codis <code>HTML</code> i <code>Javascript</code>.</p> <p>Tamb\u00e9 es pot implementar fent \u00fas de funcions an\u00f2nimes.</p> JavaScript<pre><code>const button = document.querySelector(\"button\");\nbutton.onclick = function() {\n  alert(\"Hello!\");\n}\n</code></pre>"},{"location":"DWEC_UD2_Javascript_Events/#amb-listeners-addeventlistener-i-removeeventlistener","title":"Amb Listeners: addEventListener() i removeEventListener()","text":"<p>\u00c9s un m\u00e8tode que permet assignar una funci\u00f3 per a manejar una funci\u00f3 a un event determinat. A difer\u00e8ncia de les anteriors, es pot assignar en temps d'execuci\u00f3 de la p\u00e0gina. Imaginem que creem contingut din\u00e0micament en la nostra web, estil <code>SPA</code>. Volem assignar unes funcions per a controlar uns elements <code>select</code> per\u00f2 aquestos elements no existeixen en carregar-se la p\u00e0gina, sin\u00f2 que els creem din\u00e0micament degut a alguna acci\u00f3 de l'usuari (exemple t\u00edpic de dos selects anidats de prov\u00edncia i poble). Com que no existeix el select en el moment de crear la p\u00e0gina no podem assignar una funci\u00f3 que controle l'event <code>onchange</code> que provoca el select.</p> <p>Vegem com es resol amb els <code>Listeners</code>.</p> JavaScript<pre><code>function assignarEvents(){\n    selects=document.getElementsByTagName('select');\n    for(j=0;j&lt;selects.length;j++){\n        selects[j].addEventListener(\"change\", revisa_select);\n    }\n}\n</code></pre> <p>D'aquesta forma hem assignat el control de l'event <code>onchange</code> de tots els <code>select</code> de la p\u00e0gina a una funci\u00f3 anomenada <code>revisa_select</code>.</p> <p>La sintaxi utilitzada \u00e9s la seg\u00fcent:</p> <p>;</p> <p>Es poden assignar v\u00e0ries funcions manejadores a un event.</p> JavaScript<pre><code>document.addEventListener(\"click\", myFunction);\ndocument.addEventListener(\"click\", someOtherFunction); \n</code></pre> <p>Es poden afegir diferents tipus d'events al document.</p> JavaScript<pre><code>document.addEventListener(\"mouseover\", myFunction);\ndocument.addEventListener(\"click\", someOtherFunction);\ndocument.addEventListener(\"mouseout\", someOtherFunction); \n</code></pre> <p>En cas que necessites passar par\u00e0metres, ho pots fer mitjan\u00e7ant les funcions an\u00f2nimes.</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;p&gt;This example demonstrates how to pass parameter values when using the \naddEventListener() method.&lt;/p&gt;\n\n&lt;p&gt;Click anywhere in the document to perform a calculation.&lt;/p&gt;\n\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\nvar p1 = 5;\nvar p2 = 7;\n\ndocument.addEventListener(\"click\", function() {\n  myFunction(p1, p2);\n});\n\nfunction myFunction(a, b) {\n  var result = a * b;\n  document.getElementById(\"demo\").innerHTML = result;\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En cas que vullgues desasignar una funci\u00f3 a un event, pots emprar <code>removeEventListener()</code>.</p> JavaScript<pre><code>// Attach an event handler to the document\ndocument.addEventListener(\"mousemove\", myFunction);\n\n// Remove the event handler from the document\ndocument.removeEventListener(\"mousemove\", myFunction); \n</code></pre>"},{"location":"DWEC_UD2_Javascript_Events/#4-informacio-de-levent","title":"4. Informaci\u00f3 de l'event","text":"<p>Per a obtindre informaci\u00f3 de l'event podem fer \u00fas de l'objecte m\u00e0gic <code>Event</code> que es crea autom\u00e0ticament i \u00e9s passat com a argument a la funci\u00f3 en cada crida a l'event.</p> <p>Pdem veure, amb un exemple de Uniwebsidad com no definim cap objecte <code>Event</code> en l'assignaci\u00f3 del manejador, per\u00f2 a l'hora de programar la funci\u00f3 tenim acc\u00e9s a dit objecte. </p> JavaScript<pre><code>function resalta(elEvento) {\n  var evento = elEvento || window.event;\n  switch(evento.type) {\n    case 'mouseover':\n      this.style.borderColor = 'black';\n      break;\n    case 'mouseout':\n      this.style.borderColor = 'silver';\n      break;\n  }\n}\n\nwindow.onload = function() {\n  document.getElementById(\"seccion\").onmouseover = resalta;\n  document.getElementById(\"seccion\").onmouseout = resalta;\n}\n\n&lt;div id=\"seccion\" style=\"width:150px; height:60px; border:thin solid silver\"&gt;\n  Secci\u00f3n de contenidos...\n&lt;/div&gt;\n</code></pre> <p>En Aprendeaprogramar tenim aquesta taula amb les propietats que presenta l'objecte <code>Event</code>.</p> <p>;</p> <p>\u00c9s molt important per a aprendre a fer \u00fas de les propietats de l'objecte <code>Event</code> que repases en la web de Uniwebsidad com es realitza el tractament dels events de teclat i ratol\u00ed, i faces els exercicis 15 i 16 de dita web.</p>"},{"location":"DWEC_UD2_Javascript_Events/#5-flux-devents","title":"5. Flux d'events","text":"<p>Com que en <code>html</code>podem tindre elements dintre d'altres elements, que ocorre si per exemple fem clic amb el ratol\u00ed? En quin element es dispara primer l'event? El de dins o el de fora?</p> <p>;</p>"},{"location":"DWEC_UD2_Javascript_Events/#bubbling","title":"Bubbling","text":"<p>El DOM suporta tant <code>Bubling</code> com <code>Capturing</code> per\u00f2 el <code>Capturing</code> \u00e9s el que s'executa en primer lloc, tot i ser molt menys usat. </p> HTML<pre><code>&lt;style&gt;\n  body * {\n    margin: 10px;\n    border: 1px solid blue;\n  }\n&lt;/style&gt;\n\n&lt;form onclick=\"alert('form')\"&gt;FORM\n  &lt;div onclick=\"alert('div')\"&gt;DIV\n    &lt;p onclick=\"alert('p')\"&gt;P&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>Vegem com el <code>Bubbling</code> funciona recorrent l'element m\u00e9s espec\u00edfic fins el menys espec\u00edfic.</p> <p>;</p>"},{"location":"DWEC_UD2_Javascript_Events/#capturing","title":"Capturing","text":"<p>Funciona a la inversa que l'anterior. Anir\u00e0 recorrent l'element m\u00e9s gen\u00e8ric fins el m\u00e9s espec\u00edfic.</p> <p>Podem triar com volem que es comporte el nostra manejador d'events. Si el <code>handler</code> \u00e9s <code>true</code> es capturar\u00e0 l'event el el capturing, si \u00e9s <code>false</code> es capturar\u00e0 en el <code>bubbling</code>.</p> JavaScript<pre><code>elem.addEventListener(..., {capture: true})\n// or, just \"true\" is an alias to {capture: true}\nelem.addEventListener(..., true)\n</code></pre> <p>Vegem ara com podem capturar un event en la fase del capturing i en la del bubbling.</p> HTML<pre><code>&lt;style&gt;\n  body * {\n    margin: 10px;\n    border: 1px solid blue;\n  }\n&lt;/style&gt;\n\n&lt;form&gt;FORM\n  &lt;div&gt;DIV\n    &lt;p&gt;P&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  for(let elem of document.querySelectorAll('*')) {\n    elem.addEventListener(\"click\", e =&gt; alert(`Capturing: ${elem.tagName}`), true);\n    elem.addEventListener(\"click\", e =&gt; alert(`Bubbling: ${elem.tagName}`));\n  }\n&lt;/script&gt;\n</code></pre> <p></p>"},{"location":"DWEC_UD2_Prac_formularis/","title":"Pr\u00e0ctica Formularis","text":""},{"location":"DWEC_UD2_Prac_formularis/#1-lectura-de-camps","title":"1. Lectura de camps","text":"<p>Llig tots els camps del formulari i mostra el que ha emplenat l'usuari en fer el <code>submitt</code> en un <code>alert</code>.</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Ejemplo de Formulario&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Formulario de Ejemplo&lt;/h1&gt;\n\n&lt;form action=\"/submit\" method=\"post\"&gt;\n\n  &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;&lt;br&gt;\n\n  &lt;label for=\"correo\"&gt;Correo electr\u00f3nico:&lt;/label&gt;\n  &lt;input type=\"email\" id=\"correo\" name=\"correo\"&gt;&lt;br&gt;\n\n  &lt;label for=\"contrasena\"&gt;Contrase\u00f1a:&lt;/label&gt;\n  &lt;input type=\"password\" id=\"contrasena\" name=\"contrasena\"&gt;&lt;br&gt;\n\n  &lt;label for=\"fecha_nacimiento\"&gt;Fecha de nacimiento:&lt;/label&gt;\n  &lt;input type=\"date\" id=\"fecha_nacimiento\" name=\"fecha_nacimiento\"&gt;&lt;br&gt;\n\n  &lt;label for=\"numero\"&gt;N\u00famero de tel\u00e9fono:&lt;/label&gt;\n  &lt;input type=\"tel\" id=\"numero\" name=\"numero\"&gt;&lt;br&gt;\n\n  &lt;label for=\"checkbox\"&gt;Acepto los t\u00e9rminos y condiciones:&lt;/label&gt;\n  &lt;input type=\"checkbox\" id=\"checkbox\" name=\"aceptar_terminos\"&gt;&lt;br&gt;\n\n  &lt;label for=\"radio1\"&gt;Opci\u00f3n 1:&lt;/label&gt;\n  &lt;input type=\"radio\" id=\"radio1\" name=\"opcion\" value=\"opcion1\"&gt;&lt;br&gt;\n\n  &lt;label for=\"radio2\"&gt;Opci\u00f3n 2:&lt;/label&gt;\n  &lt;input type=\"radio\" id=\"radio2\" name=\"opcion\" value=\"opcion2\"&gt;&lt;br&gt;\n\n  &lt;label for=\"seleccion\"&gt;Seleccione una opci\u00f3n:&lt;/label&gt;\n  &lt;select id=\"seleccion\" name=\"seleccion\"&gt;\n    &lt;option value=\"opcion1\"&gt;Opci\u00f3n 1&lt;/option&gt;\n    &lt;option value=\"opcion2\"&gt;Opci\u00f3n 2&lt;/option&gt;\n    &lt;option value=\"opcion3\"&gt;Opci\u00f3n 3&lt;/option&gt;\n  &lt;/select&gt;&lt;br&gt;\n\n  &lt;label for=\"area_texto\"&gt;Comentarios:&lt;/label&gt;\n  &lt;textarea id=\"area_texto\" name=\"comentarios\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;&lt;br&gt;\n\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD2_Prac_formularis/#2-restriccio-de-camps","title":"2. Restricci\u00f3 de camps","text":"<p>En el formulari anterior, resalta en roig el borde d'aquells elements incorrectes.</p> <ul> <li>Els elements de text han de tindre un tamany m\u00ednim de 3 lletres, no poden tindre n\u00fameros, etc.</li> <li>Tots els camps s\u00f3n requerits.</li> <li>Triar almenys dos temes per a rebre art\u00edcles.</li> </ul>"},{"location":"DWEC_UD2_Prac_formularis/#3-control-denviament","title":"3. Control d'enviament","text":"<p>Deshabilita el bot\u00f3 d'enviament fins que el formulari siga correcte. Informa a l'usuari dels errors.</p> <p>Codi formulari</p>"},{"location":"DWEC_UD2_exemples_extra/","title":"UD2 Codis d'exemple","text":""},{"location":"DWEC_UD2_exemples_extra/#exemple-1-crear-elements-assignar-events","title":"EXEMPLE 1: crear elements, assignar events.","text":"<p>Aquest \u00e9s un exemple senzill en el que tenim un bot\u00f3 que al polsar carrega una imatge. Despr\u00e9s en fer clic sobre la imatge ha de traure un <code>alert</code> indicant que \u00e9s una imatge.</p> <p>La imatge no existeix al crear la p\u00e0gina</p> <p>La principar dificultat d'aquest exemple \u00e9s que has de crear contingut din\u00e0micament amb <code>innerHTML</code> i a m\u00e9s a mes, has d'assignar una funci\u00f3 que controle l'event <code>onclick</code> sobre una imatge que no existeix quan es crea el DOM.</p> <p>Els conceptes que es veuen s\u00f3n: - Crear contingut din\u00e0micament amb innerHTML - Manejadors sem\u00e0ntics d'events - Assignaci\u00f3 d'events amb <code>listeners</code></p> <p>Pots descarregar el codi amb les imatges de prova.</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"codigo.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"contingut\"&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;button id=\"saludo\"&gt;Mostra Sant Maurici&lt;/button&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> codigo.js<pre><code>function carregaImatge(){\n    //utilitzem una cadena de text per a emmagatzemar el codi html a injectar\n    cadenaHTML='&lt;img id=\"foto\" src=\"./img/Estany_de_Sant_Maurici_-_panoramio_(1).jpg\" alt=\"\"&gt;'\n    //injectem el codi en el &lt;div&gt; amb id=contingut\n    document.getElementById(\"contingut\").innerHTML=cadenaHTML;\n    //com acabem de crear la imatge, li assignem un listener\n    document.getElementById(\"foto\").addEventListener(\"click\", saludarImatge);\n}\n\nfunction saludarImatge(){\n    alert(\"hola, a\u00e7\u00f2 \u00e9s una imatge\");\n}\n\n/*per a assegurar-nos que el DOM est\u00e0 creat quan assignem funcions per a manejar events, \nho fem d'aquesta forma*/\nwindow.onload=function(){\n    /*cal tindre la precauci\u00f3 de no assignar les funcions amb el par\u00e8ntesi,\n    ja que si ho fem amb carregaImatge() assigna i executa, \u00e9s una \n    particularitat de Javascript*/\n    document.getElementById(\"saludo\").onclick = carregaImatge;\n}\n</code></pre>"},{"location":"DWEC_UD2_exemples_extra/#exemple-2-carregar-des-dun-array","title":"EXEMPLE 2: carregar des d'un array","text":"<p>En aquest exemple anem a crear contingut din\u00e0micament a partir d'un array. Tenim informaci\u00f3 d'uns usuaris en un <code>array</code> i volem pintar-la en una taula en polsar un bot\u00f3.</p> <p>HTML com a cadena de text</p> <p>Aquesta t\u00e8cnica consisteix en anar creant una cadena de text amb el <code>html</code> que volem injectar.</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script type=\"text/javascript\"&gt;\n\n        var usuaris=[{nom: \"Mortadelo\", edat: 50}, {nom: \"Filem\u00f3n\", edat: 53}];\n\n        function creaTaula(){\n            let cadenaHTML = \"&lt;table&gt;\" + creaCabecera() + creaCos(usuaris) + \"&lt;/table&gt;\";\n            console.log(cadenaHTML);\n            document.getElementById(\"boto\").innerHTML=cadenaHTML;\n        }\n\n        function creaCabecera(){\n            let cadenaHTML=\"&lt;tr&gt;&lt;th&gt;Nom&lt;/th&gt;&lt;th&gt;Edat&lt;/th&gt;&lt;/tr&gt;\";\n            return cadenaHTML;\n        }\n\n        function creaCos(arrayUsuaris){\n            let cadenaHTML=\"\";\n            arrayUsuaris.forEach(element =&gt; {\n                cadenaHTML+=\"&lt;tr&gt;&lt;td&gt;\" + element.nom + \"&lt;/td&gt;&lt;td&gt;\" + element.edat + \"&lt;td&gt;&lt;/tr&gt;\";\n            });\n            return cadenaHTML;\n        }\n\n        window.onload = ()=&gt; {\n            document.getElementById(\"boto\").onclick = creaTaula;\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"boto\"&gt;Carrega usuaris&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD2_exemples_extra/#exemple-3-deshabilitar-el-boto-denviament-dun-formulari-fins-que-estiga-correctament-validat","title":"EXEMPLE 3: deshabilitar el bot\u00f3 d'enviament d'un formulari fins que estiga correctament validat","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Validaci\u00f3 de Formulari&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;h2&gt;Formulari de Validaci\u00f3&lt;/h2&gt;\n\n  &lt;form id=\"myForm\"&gt;\n    &lt;label for=\"nom\"&gt;Nom:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nom\" name=\"nom\" required&gt;\n    &lt;br&gt;\n\n    &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n    &lt;br&gt;\n\n    &lt;label for=\"password\"&gt;Contrasenya:&lt;/label&gt;\n    &lt;input type=\"password\" id=\"password\" name=\"password\" required&gt;\n    &lt;br&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\" id=\"submitBtn\" disabled&gt;\n  &lt;/form&gt;\n\n  &lt;script&gt;\n    // Funci\u00f3 per validar el formulari\n    function validarFormulari() {\n      var nom = document.getElementById('nom').value;\n      var email = document.getElementById('email').value;\n      var password = document.getElementById('password').value;\n\n      var nomValid = nom.length &gt; 0;\n      var emailValid = /\\S+@\\S+\\.\\S+/.test(email);\n      var passwordValid = password.length &gt;= 8;\n\n      // Habilitar o deshabilitar el bot\u00f3 de submit\n      var submitBtn = document.getElementById('submitBtn');\n      submitBtn.disabled = !(nomValid &amp;&amp; emailValid &amp;&amp; passwordValid);\n    }\n\n    // Afegir esdeveniments als components del formulari\n    document.getElementById('nom').addEventListener('input', validarFormulari);\n    document.getElementById('email').addEventListener('input', validarFormulari);\n    document.getElementById('password').addEventListener('input', validarFormulari);\n\n    // Afegir un esdeveniment de submit al formulari per prevenir l'enviament si no est\u00e0 v\u00e0lid\n    document.getElementById('myForm').addEventListener('submit', function(event) {\n      if (!document.getElementById('submitBtn').disabled) {\n        alert('Formulari enviat amb \u00e8xit!');\n      }\n      event.preventDefault();\n    });\n  &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD2_formularis/","title":"Javascript i Formularis","text":""},{"location":"DWEC_UD2_formularis/#1-validacio","title":"1. Validaci\u00f3","text":"<p>Cal tindre en compte que <code>Javascript</code> nasqu\u00e9 amb l'objectiu principal de validar formularis. Amb l'aparici\u00f3 d'<code>AJAX</code> han augmentat molt m\u00e9s les prestacions del llenguatge, tot i aix\u00f2 la validaci\u00f3 de formularis seguix sent un dels principals usos.</p> <p></p>"},{"location":"DWEC_UD2_formularis/#2-validacio-html","title":"2. Validaci\u00f3 HTML","text":"<p>Es pot fer \u00fas en un primer moment del atributs <code>HTML</code>.</p>"},{"location":"DWEC_UD2_formularis/#required","title":"Required","text":"HTML<pre><code> &lt;form action=\"/action_page.php\"&gt;\n  &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"username\" name=\"username\" required&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt; \n</code></pre>"},{"location":"DWEC_UD2_formularis/#min-i-max","title":"min i max","text":"HTML<pre><code> &lt;form action=\"/action_page.php\"&gt;\n\n  &lt;label for=\"datemax\"&gt;Enter a date before 1980-01-01:&lt;/label&gt;\n  &lt;input type=\"date\" id=\"datemax\" name=\"datemax\" max=\"1979-12-31\"&gt;&lt;br&gt;&lt;br&gt;\n\n  &lt;label for=\"datemin\"&gt;Enter a date after 2000-01-01:&lt;/label&gt;\n  &lt;input type=\"date\" id=\"datemin\" name=\"datemin\" min=\"2000-01-02\"&gt;&lt;br&gt;&lt;br&gt;\n\n  &lt;label for=\"quantity\"&gt;Quantity (between 1 and 5):&lt;/label&gt;\n  &lt;input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\"&gt;&lt;br&gt;&lt;br&gt;\n\n  &lt;input type=\"submit\"&gt;\n\n&lt;/form&gt; \n</code></pre>"},{"location":"DWEC_UD2_formularis/#minlength-i-maxlenth","title":"minlength i maxlenth","text":"HTML<pre><code> &lt;form action=\"/action_page.php\"&gt;\n  &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n  &lt;input type=\"password\" id=\"password\" name=\"password\" minlength=\"8\"&gt;&lt;br&gt;&lt;br&gt;\n  &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt; \n</code></pre>"},{"location":"DWEC_UD2_formularis/#pattern","title":"pattern","text":"HTML<pre><code> &lt;form action=\"/action_page.php\"&gt;\n  &lt;label for=\"country_code\"&gt;Country code:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"country_code\" name=\"country_code\"\n  pattern=\"[A-Za-z]{3}\" title=\"Three letter country code\"&gt;&lt;br&gt;&lt;br&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt; \n</code></pre>"},{"location":"DWEC_UD2_formularis/#3-pseudoclasses","title":"3. Pseudoclasses","text":"<p>Quan un element \u00e9s v\u00e0lid o no, coincideix amb les pseudo-classes de <code>CSS</code> <code>:valid</code> i <code>:invalid</code>.</p> <p></p>"},{"location":"DWEC_UD2_formularis/#4-utilitats","title":"4. Utilitats","text":"<p>A la web de uniwebsidad trobem diferents utilitats per a validar elements.</p>"},{"location":"DWEC_UD2_formularis/#text-i-textarea","title":"text i textarea","text":"JavaScript<pre><code>&lt;input type=\"text\" id=\"texto\" /&gt;\nvar valor = document.getElementById(\"texto\").value;\n\n&lt;textarea id=\"parrafo\"&gt;&lt;/textarea&gt;\nvar valor = document.getElementById(\"parrafo\").value;\n</code></pre>"},{"location":"DWEC_UD2_formularis/#radiobutton","title":"radiobutton","text":"HTML<pre><code>&lt;input type=\"radio\" value=\"si\" name=\"pregunta\" id=\"pregunta_si\"/&gt; SI\n&lt;input type=\"radio\" value=\"no\" name=\"pregunta\" id=\"pregunta_no\"/&gt; NO\n&lt;input type=\"radio\" value=\"nsnc\" name=\"pregunta\" id=\"pregunta_nsnc\"/&gt; NS/NC\n\nvar elementos = document.getElementsByName(\"pregunta\");\n\nfor(var i=0; i&lt;elementos.length; i++) {\n  alert(\" Elemento: \" + elementos[i].value + \"\\n Seleccionado: \" + elementos[i].checked);\n}\n</code></pre>"},{"location":"DWEC_UD2_formularis/#checkbox","title":"checkbox","text":"HTML<pre><code>&lt;input type=\"checkbox\" value=\"condiciones\" name=\"condiciones\" id=\"condiciones\"/&gt; He le\u00eddo y acepto las condiciones\n&lt;input type=\"checkbox\" value=\"privacidad\" name=\"privacidad\" id=\"privacidad\"/&gt; He le\u00eddo la pol\u00edtica de privacidad\n\nvar elemento = document.getElementById(\"condiciones\");\nalert(\" Elemento: \" + elemento.value + \"\\n Seleccionado: \" + elemento.checked);\n\nelemento = document.getElementById(\"privacidad\");\nalert(\" Elemento: \" + elemento.value + \"\\n Seleccionado: \" + elemento.checked);\n</code></pre>"},{"location":"DWEC_UD2_formularis/#select","title":"select","text":"JavaScript<pre><code>&lt;select id=\"opciones\" name=\"opciones\"&gt;\n  &lt;option value=\"1\"&gt;Primer valor&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Segundo valor&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Tercer valor&lt;/option&gt;\n  &lt;option value=\"4\"&gt;Cuarto valor&lt;/option&gt;\n&lt;/select&gt;\n\n// Obtener la referencia a la lista\nvar lista = document.getElementById(\"opciones\");\n\n// Obtener el \u00edndice de la opci\u00f3n que se ha seleccionado\nvar indiceSeleccionado = lista.selectedIndex;\n// Con el \u00edndice y el array \"options\", obtener la opci\u00f3n seleccionada\nvar opcionSeleccionada = lista.options[indiceSeleccionado];\n\n// Obtener el valor y el texto de la opci\u00f3n seleccionada\nvar textoSeleccionado = opcionSeleccionada.text;\nvar valorSeleccionado = opcionSeleccionada.value;\n\nalert(\"Opci\u00f3n seleccionada: \" + textoSeleccionado + \"\\n Valor de la opci\u00f3n: \" + valorSeleccionado);\n</code></pre>"},{"location":"DWEC_UD2_formularis/#establir-focus","title":"establir focus","text":"JavaScript<pre><code>document.getElementById(\"primero\").focus();\n\n&lt;form id=\"formulario\" action=\"#\"&gt;\n  &lt;input type=\"text\" id=\"primero\" /&gt;\n&lt;/form&gt;\n\nif(document.forms.length &gt; 0) {\n  if(document.forms[0].elements.length &gt; 0) {\n    document.forms[0].elements[0].focus();\n  }\n}\n</code></pre>"},{"location":"DWEC_UD2_formularis/#evitar-reenviament","title":"evitar reenviament","text":"<p>Es pot evitar enviar un formulari dues vegades per culpa de connexions lentes, doble polsaci\u00f3, etc. Una forma \u00e9s amb un bot\u00f3 <code>button</code>, deshabilitant-lo abans d'enviar i canviant el missatge del bot\u00f3.</p> HTML<pre><code>&lt;form id=\"formulario\" action=\"#\"&gt;\n  ...\n  &lt;input type=\"button\" value=\"Enviar\" onclick=\"this.disabled=true; this.value=\u2019Enviando...\u2019; this.form.submit()\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"DWEC_UD2_formularis/#5-validacio","title":"5. Validaci\u00f3","text":"<p>Si hem de fer una validaci\u00f3, una bona t\u00e8cnica \u00e9s inhabilitar el comportament per defecte de l'event, validar els camps i provocar vosaltres mateixa el <code>submitt</code>.</p> HTML<pre><code>&lt;form action=\"/login.php\" id=\"formulario\"&gt;\n    &lt;p&gt;\n      Usuario: &lt;input type=\"text\" name=\"usuario\" id=\"usuario\"&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n      Clave: &lt;input type=\"text\" name=\"clave\" id=\"clave\"&gt;\n    &lt;/p&gt;\n    &lt;input type=\"submit\" value=\"Entrar\"&gt;\n  &lt;/form&gt;\n</code></pre> <p>Es pot validar d'aquesta forma.</p> JavaScript<pre><code>  document.addEventListener(\"DOMContentLoaded\", function() {\n  document.getElementById(\"formulario\").addEventListener('submit', validarFormulario); \n});\n\nfunction validarFormulario(evento) {\n  evento.preventDefault();\n  var usuario = document.getElementById('usuario').value;\n  if(usuario.length == 0) {\n    alert('No has escrito nada en el usuario');\n    return;\n  }\n  var clave = document.getElementById('clave').value;\n  if (clave.length &lt; 6) {\n    alert('La clave no es v\u00e1lida');\n    return;\n  }\n  this.submit();\n}\n</code></pre> <p>Consulta m\u00e9s possibilitats de validaci\u00f3 en aquest lloc i en aquest altre.</p>"},{"location":"DWEC_UD4_codis_extra/","title":"UD4 Codis Exemple","text":""},{"location":"DWEC_UD4_codis_extra/#mapbox","title":"MAPBOX","text":"<p>Vos deixe el codi que genera un mapa com el de la imatge amb algun control \"extra\"...</p> <p></p> mapbox.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'&gt;&lt;/script&gt;\n    &lt;link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' /&gt;\n\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Exemple de mapa&lt;/h1&gt;\n    &lt;p&gt;Degut a les limitacions de la API gratuita no centra correctament el mapa quan carrega la p\u00e0gina, a mi\n        generalment em diu que estic a Kenia. Si feu clic en l'esfera de localitzar si que dur\u00e0 a la ubicaci\u00f3 \n        correcta, com podeu vore en la imatge.\n    &lt;/p&gt;\n    &lt;div id='map' style='width: 100%; height: 400px;'&gt;&lt;/div&gt;\n    &lt;script&gt;\n        mapboxgl.accessToken = 'pk.eyJ1Ijoiam9ydGkiLCJhIjoiY2xvaWNwMTkyMW9ubjJxbjA5aTg2YmFycyJ9.w0zdUqxA_kjatKYu7sdneA';\n\n        //let map = null;\n        document.addEventListener(\"DOMContentLoaded\", async e =&gt; {\n            navigator.geolocation.getCurrentPosition(pos =&gt; {\n                console.log();\n                console.log(`Latitud: ${pos.coords.latitude}, Longitud: ${pos.coords.longitude}`);\n                showMap(pos.coords);\n            });\n        });\n\n        function showMap(coords) {\n            var map = new mapboxgl.Map({\n                container: 'map', // ID de l'element HTML que actua com a contenidor\n                style: 'mapbox://styles/mapbox/streets-v11', // Estil del mapa\n                center: [coords.latitude, coords.longitude], // Coordenades centrals\n                //center: [39.0778795, -0.2596927],\n                zoom: 9 // Nivell de zoom\n            });\n\n            //afegint controls de navegaci\u00f3\n            map.addControl(new mapboxgl.NavigationControl());\n\n            //geolocalitzant a l'usuari\n            map.addControl(new mapboxgl.NavigationControl());\n            map.addControl(new mapboxgl.FullscreenControl());\n            map.addControl(new mapboxgl.GeolocateControl({\n                positionOptions: {\n                    enableHighAccuracy: true\n                },\n                trackUserLocation: true\n            }));\n        }\n\n\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/","title":"UD4 Javascript Utilitats","text":""},{"location":"DWEC_UD4_utilitats_extra/#moduls-en-javascript","title":"M\u00f2duls en Javascript","text":"<p>M\u00f2duls</p> <p>Els m\u00f2duls en JavaScript s\u00f3n una forma d'organitzar i reutilitzar el codi en diferents arxius. S\u00f3n especialment \u00fatils en aplicacions grans o complexes on vols separar el codi en parts m\u00e9s petites i gestionables. </p> <p>Per utilitzar m\u00f2duls en JavaScript, segueix aquesta guia:</p>"},{"location":"DWEC_UD4_utilitats_extra/#creacio-dun-modul","title":"Creaci\u00f3 d'un M\u00f2dul:","text":"<ul> <li>Defineix el teu m\u00f2dul en un fitxer JavaScript separat. Per exemple, pots tenir un fitxer anomenat <code>mimodul.js</code>.</li> </ul> mimodul.js<pre><code>// mimodul.js\nexport function funcioDelModul() {\n    return \"Aix\u00f2 \u00e9s una funci\u00f3 del m\u00f2dul.\";\n}\n\nexport const unaVariable = 42;\n</code></pre> <p>En aquest exemple, hem exportat una funci\u00f3 i una variable del m\u00f2dul.</p>"},{"location":"DWEC_UD4_utilitats_extra/#importacio-dun-modul","title":"Importaci\u00f3 d'un M\u00f2dul:","text":"<ul> <li>Ara, pots importar aquest m\u00f2dul a un altre fitxer JavaScript on vulguis fer servir les funcions o variables definides al m\u00f2dul. Per fer-ho, utilitza la paraula clau <code>import</code>.</li> </ul> unaltrefitxer.js<pre><code>// unaltrefitxer.js\nimport { funcioDelModul, unaVariable } from './mimodul.js';\n\nconsole.log(funcioDelModul()); // Aix\u00f2 \u00e9s una funci\u00f3 del m\u00f2dul.\nconsole.log(unaVariable); // 42\n</code></pre> <p>Assegura't que l'adre\u00e7a del fitxer del m\u00f2dul sigui correcta, i utilitza l'extensi\u00f3 <code>.js</code> si cal. En aquest exemple, hem importat la funci\u00f3 <code>funcioDelModul</code> i la variable <code>unaVariable</code> des del m\u00f2dul <code>mimodul.js</code>.</p>"},{"location":"DWEC_UD4_utilitats_extra/#us-del-modul","title":"\u00das del M\u00f2dul:","text":"<ul> <li>Ara pots fer servir les funcions i les variables importades dins del fitxer que has fet la importaci\u00f3, tal com es mostra a l'exemple anterior. Aix\u00f2 et permet utilitzar funcions i dades del m\u00f2dul en altres parts de la teva aplicaci\u00f3.</li> </ul> <p>Els m\u00f2duls s\u00f3n una caracter\u00edstica est\u00e0ndard a partir d'ECMAScript 6 (ES6) i s\u00f3n compatibles amb molts navegadors moderns i entorns de desenvolupament. Aix\u00f2 et permet organitzar i estructurar el teu codi de manera m\u00e9s efica\u00e7 i f\u00e0cil de mantenir.</p>"},{"location":"DWEC_UD4_utilitats_extra/#local-storage","title":"Local Storage","text":"<p>El Local Storage \u00e9s una caracter\u00edstica de l'emmagatzematge web en JavaScript que permet emmagatzemar dades en el navegador web d'un usuari de manera persistent. Aquesta emmagatzematge \u00e9s similar a les cookies, per\u00f2 amb algunes difer\u00e8ncies claus:</p> <ul> <li> <p>Capacitat: El Local Storage t\u00e9 una capacitat m\u00e9s gran que les cookies, permetent emmagatzemar m\u00e9s dades (generalment fins a 5-10 MB per domini, encara que aix\u00f2 pot variar entre navegadors).</p> </li> <li> <p>Persist\u00e8ncia: Les dades emmagatzemades al Local Storage romanen en el navegador despr\u00e9s de tancar-lo i reiniciar-lo. Les cookies poden tenir una data d'expiraci\u00f3.</p> </li> <li> <p>Seguretat: Les dades del Local Storage no s'envien al servidor en cada sol\u00b7licitud HTTP, cosa que succeeix amb les cookies. Aix\u00f2 pot ser m\u00e9s segur per a les dades de l'usuari, ja que no es comparteixen constantment amb el servidor.</p> </li> </ul> <p>Per emmagatzemar dades al Local Storage, pots utilitzar les seg\u00fcents funcions en JavaScript:</p> <ul> <li> <p><code>localStorage.setItem(key, value)</code>: Aquesta funci\u00f3 permet emmagatzemar un valor associat a una clau. La clau \u00e9s una cadena i el valor pot ser qualsevol dada JavaScript v\u00e0lida (generalment una cadena).</p> </li> <li> <p><code>localStorage.getItem(key)</code>: Aquesta funci\u00f3 permet recuperar el valor emmagatzemat associat a una clau espec\u00edfica.</p> </li> <li> <p><code>localStorage.removeItem(key)</code>: Aquesta funci\u00f3 elimina una entrada emmagatzemada a partir de la seva clau.</p> </li> </ul> <p>Per exemple:</p> JavaScript<pre><code>// Emmagatzemar un valor\nlocalStorage.setItem('nom', 'John');\n\n// Recuperar un valor\nvar nom = localStorage.getItem('nom');\nconsole.log(nom); // John\n\n// Eliminar un valor\nlocalStorage.removeItem('nom');\n</code></pre> <p>El Local Storage \u00e9s \u00fatil per emmagatzemar dades com configuracions de l'usuari, prefer\u00e8ncies, estad\u00edstiques i altres dades que vulguis mantenir localment en el navegador. No obstant aix\u00f2, has de ser conscient que les dades del Local Storage s\u00f3n accessibles des de JavaScript en la mateixa p\u00e0gina web, pel que no \u00e9s el lloc adequat per emmagatzemar dades sensibles o privades.</p>"},{"location":"DWEC_UD4_utilitats_extra/#cookies","title":"Cookies","text":"<p>Les cookies</p> <p>Les cookies s\u00f3n petites peces de dades que es poden emmagatzemar en el navegador d'un usuari i que s'envien al servidor amb cada sol\u00b7licitud HTTP. Aquestes s\u00f3n \u00e0mpliament utilitzades en desenvolupament web per emmagatzemar informaci\u00f3 i estat en el costat del client. Les cookies es poden utilitzar en JavaScript mitjan\u00e7ant l'objecte <code>document.cookie</code>. </p> <p>Aqu\u00ed tens una descripci\u00f3 b\u00e0sica de com funcionen les cookies:</p>"},{"location":"DWEC_UD4_utilitats_extra/#emmagatzemar-una-cookie","title":"Emmagatzemar una Cookie:","text":"<p>Per emmagatzemar una cookie des de JavaScript, has d'assignar un valor a <code>document.cookie</code>. El valor ha de ser una cadena en el format \"nom=valor\". Pots afegir tantes cookies com vulguis, separant-les per punts i coma.</p> <p>Exemple:</p> JavaScript<pre><code>document.cookie = \"usuari=John\";\ndocument.cookie = \"preferencia=color=blau\";\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#llegir-cookies","title":"Llegir Cookies:","text":"<p>Per llegir les cookies existents, pots accedir a <code>document.cookie</code> i obtenir la cadena de totes les cookies com una llista separada per punts i coma. Despr\u00e9s, pots dividir aquesta cadena per aconseguir els valors individuals.</p> <p>Exemple:</p> JavaScript<pre><code>var totesLesCookies = document.cookie;\nvar cookiesSeparades = totesLesCookies.split('; ');\nfor (var i = 0; i &lt; cookiesSeparades.length; i++) {\n    var cookie = cookiesSeparades[i];\n    var [nom, valor] = cookie.split('=');\n    console.log(nom + \": \" + valor);\n}\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#modificar-cookies","title":"Modificar Cookies:","text":"<p>Per modificar una cookie existent, simplement reassigna el seu valor mitjan\u00e7ant <code>document.cookie</code>. \u00c9s important tenir en compte que si vols modificar una cookie, has de proporcionar totes les seves propietats (nom, valor, data d'expiraci\u00f3, etc.) de nou, ja que aquesta assignaci\u00f3 reempla\u00e7ar\u00e0 completament la cookie existent.</p> <p>Exemple:</p> JavaScript<pre><code>document.cookie = \"usuari=NouValor; expires=Thu, 01 Jan 2099 00:00:00 UTC\";\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#eliminar-cookies","title":"Eliminar Cookies:","text":"<p>Per eliminar una cookie, assigna-li una data d'expiraci\u00f3 que sigui anterior a la data i hora actual. Aix\u00f2 fa que la cookie sigui inv\u00e0lida i s'eliminar\u00e0.</p> <p>Exemple:</p> JavaScript<pre><code>document.cookie = \"usuari=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#restriccions-de-cookies","title":"Restriccions de Cookies:","text":"<p>Les cookies estan subjectes a diverses restriccions de seguretat i privadesa. Les cookies nom\u00e9s poden ser llegides pel mateix domini que les va crear i estan limitades en capacitat. Tamb\u00e9 has de tenir en compte les prefer\u00e8ncies de privadesa de l'usuari.</p> <p>En resum, les cookies s\u00f3n una manera de persistir dades al navegador de l'usuari i enviar-les de tornada al servidor amb cada sol\u00b7licitud HTTP. Malgrat ser ampliament utilitzades, \u00e9s important tenir en compte les restriccions de seguretat i privadesa quan les utilitzis. Moltes vegades, es fan servir altres m\u00e8todes m\u00e9s segurs i efica\u00e7os per a emmagatzemar dades al costat del client, com el Local Storage o les Web Storage API.</p>"},{"location":"DWEC_UD4_utilitats_extra/#geolocalitzacio","title":"Geolocalitzaci\u00f3","text":"<p>La API de geolocalitzaci\u00f3 en JavaScript proporciona una forma d'accedir a la ubicaci\u00f3 del dispositiu des del navegador. Aix\u00f2 permet a les aplicacions web obtenir la ubicaci\u00f3 de l'usuari, cosa que \u00e9s \u00fatil per a una varietat de casos d'\u00fas, com serveis de mapes, recomanacions basades en la ubicaci\u00f3 i molt m\u00e9s. Aqu\u00ed et explico com funciona:</p>"},{"location":"DWEC_UD4_utilitats_extra/#sollicitud-de-permisos","title":"Sol\u00b7licitud de permisos:","text":"<p>Abans d'accedir a la ubicaci\u00f3 de l'usuari, has de sol\u00b7licitar el seu perm\u00eds. Els navegadors moderns demanen perm\u00eds a l'usuari abans de proporcionar la ubicaci\u00f3. Pots fer-ho utilitzant la funci\u00f3 <code>navigator.geolocation.getCurrentPosition</code> o <code>navigator.geolocation.watchPosition</code>.</p>"},{"location":"DWEC_UD4_utilitats_extra/#obtencio-de-la-ubicacio-actual","title":"Obtenci\u00f3 de la ubicaci\u00f3 actual:","text":"<p>Per obtenir la ubicaci\u00f3 actual, pots utilitzar <code>navigator.geolocation.getCurrentPosition</code>. Aqu\u00ed tens un exemple:</p> JavaScript<pre><code>navigator.geolocation.getCurrentPosition(function(position) {\n    const latitud = position.coords.latitude;\n    const longitud = position.coords.longitude;\n    console.log(`Latitud: ${latitud}, Longitud: ${longitud}`);\n});\n</code></pre> <p>Aquesta funci\u00f3 pren una funci\u00f3 de devoluci\u00f3 de trucada que s'executar\u00e0 un cop s'obtingui la ubicaci\u00f3. Les dades de la ubicaci\u00f3 es passen com a arguments a la funci\u00f3 de devoluci\u00f3 de trucada.</p>"},{"location":"DWEC_UD4_utilitats_extra/#actualitzacio-de-ubicacio-continua","title":"Actualitzaci\u00f3 de ubicaci\u00f3 cont\u00ednua:","text":"<p>Pots utilitzar <code>navigator.geolocation.watchPosition</code> si necessites seguir la ubicaci\u00f3 de l'usuari en temps real. Aquesta funci\u00f3 tamb\u00e9 pren una funci\u00f3 de devoluci\u00f3 de trucada i s'executar\u00e0 cada cop que s'actualitzi la ubicaci\u00f3 de l'usuari.</p> JavaScript<pre><code>const watchId = navigator.geolocation.watchPosition(function(position) {\n    const latitud = position.coords.latitude;\n    const longitud = position.coords.longitude;\n    console.log(`Latitud: ${latitud}, Longitud: ${longitud}`);\n});\n</code></pre> <p>Pots aturar el seguiment de la ubicaci\u00f3 utilitzant <code>navigator.geolocation.clearWatch(watchId)</code>.</p>"},{"location":"DWEC_UD4_utilitats_extra/#gestio-derrors","title":"Gesti\u00f3 d'errors:","text":"<p>Tingues en compte que l'obtenci\u00f3 de la ubicaci\u00f3 de l'usuari pot no estar sempre disponible, i \u00e9s important gestionar els possibles errors. La funci\u00f3 de devoluci\u00f3 de trucada tamb\u00e9 pot rebre un objecte <code>PositionError</code> que descriu qualsevol error que ocorri.</p> JavaScript<pre><code>navigator.geolocation.getCurrentPosition(function(position) {\n    // \u00c8xit\n}, function(error) {\n    switch (error.code) {\n        case error.PERMISSION_DENIED:\n            console.error(\"L'usuari ha denegat el perm\u00eds de ubicaci\u00f3.\");\n            break;\n        case error.POSITION_UNAVAILABLE:\n            console.error(\"La ubicaci\u00f3 no est\u00e0 disponible.\");\n            break;\n        case error.TIMEOUT:\n            console.error(\"Temps d'espera exhaurit en intentar obtenir la ubicaci\u00f3.\");\n            break;\n        case error.UNKNOWN_ERROR:\n            console.error(\"S'ha produ\u00eft un error desconegut.\");\n            break;\n    }\n});\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#requisits-de-seguretat","title":"Requisits de seguretat:","text":"<p>\u00c9s important destacar que, per utilitzar la API de geolocalitzaci\u00f3, el teu lloc web ha d'oferir-se a trav\u00e9s de HTTPS en la majoria dels navegadors moderns. A m\u00e9s, tingues en compte la privadesa de l'usuari i sol\u00b7licita perm\u00eds abans d'accedir a la seva ubicaci\u00f3.</p> <p>La API de geolocalitzaci\u00f3 en JavaScript proporciona una forma potent d'accedir a la ubicaci\u00f3 de l'usuari, per\u00f2 tamb\u00e9 requereix responsabilitat i consideraci\u00f3 de la privadesa de l'usuari.</p>"},{"location":"DWEC_UD4_utilitats_extra/#api-de-mapbox","title":"API de Mapbox","text":"<p>Mapbox \u00e9s una plataforma de mapes que ofereix una API rica per a la visualitzaci\u00f3 de mapes personalitzats en aplicacions web i m\u00f2bils. Per utilitzar la API de Mapbox, has de seguir aquestes passes b\u00e0siques:</p>"},{"location":"DWEC_UD4_utilitats_extra/#crear-un-compte-de-mapbox","title":"Crear un compte de Mapbox:","text":"<p>Abans de comen\u00e7ar, haur\u00e0s de registrar-te a Mapbox i obtenir un access token, que ser\u00e0 necessari per autenticar-te quan facis sol\u00b7licituds a la seva API. Pots obtenir un access token a trav\u00e9s del lloc web de Mapbox.</p>"},{"location":"DWEC_UD4_utilitats_extra/#afegir-el-mapbox-sdk-al-teu-projecte","title":"Afegir el Mapbox SDK al teu projecte:","text":"<p>Si est\u00e0s desenvolupant una aplicaci\u00f3 web, haur\u00e0s d'afegir el SDK de Mapbox al teu projecte. Mapbox ofereix biblioteques JavaScript per a aquest prop\u00f2sit. Pots incloure aquestes biblioteques al teu projecte utilitzant un gestor de paquets com npm o afegint una etiqueta de script directament al teu HTML.</p> <p>Exemple d'inclusi\u00f3 de la biblioteca JavaScript de Mapbox a trav\u00e9s de CDN:</p> HTML<pre><code>&lt;script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'&gt;&lt;/script&gt;\n&lt;link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' /&gt;\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#crear-un-contenidor-daplicacio","title":"Crear un contenidor d'aplicaci\u00f3:","text":"<p>Mapbox utilitza un contenidor HTML per a la visualitzaci\u00f3 del mapa. Haur\u00e0s d'afegir un element HTML, com un div, al teu document HTML que servir\u00e0 com a contenidor del mapa.</p> <p>Exemple d'un div de contenidor:</p> HTML<pre><code>&lt;div id='map' style='width: 100%; height: 400px;'&gt;&lt;/div&gt;\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#inicialitzar-el-mapa-amb-javascript","title":"Inicialitzar el mapa amb JavaScript:","text":"<p>Amb el SDK de Mapbox incl\u00f2s al teu projecte, pots inicialitzar i configurar el mapa amb JavaScript. Has d'utilitzar el teu access token per autenticar-te.</p> <p>Exemple de com inicialitzar el mapa:</p> JavaScript<pre><code>mapboxgl.accessToken = 'YOUR_ACCESS_TOKEN';\n\nvar map = new mapboxgl.Map({\n    container: 'map', // ID de l'element HTML que actua com a contenidor\n    style: 'mapbox://styles/mapbox/streets-v11', // Estil del mapa\n    center: [-74.5, 40], // Coordenades centrals\n    zoom: 9 // Nivell de zoom\n});\n</code></pre>"},{"location":"DWEC_UD4_utilitats_extra/#personalitzar-el-mapa","title":"Personalitzar el mapa:","text":"<p>Pots personalitzar el mapa de Mapbox afegint capes, punts d'inter\u00e8s, rutes i moltes altres caracter\u00edstiques utilitzant les funcions proporcionades pel SDK de Mapbox.</p>"},{"location":"DWEC_UD4_utilitats_extra/#afegir-interaccio-i-funcionalitat","title":"Afegir interacci\u00f3 i funcionalitat:","text":"<p>Pots afegir interacci\u00f3 a trav\u00e9s d'events, com ara clics, moviments del ratol\u00ed i molts altres. Tamb\u00e9 pots afegir funcionalitats com ara geocodificaci\u00f3 i direccions mitjan\u00e7ant les API de Mapbox.</p> <p>Mapbox ofereix una ampla documentaci\u00f3 i recursos en l\u00ednia per a ajudar-te a aprofundir en la seva API i crear mapes personalitzats per a les teves aplicacions. Tamb\u00e9 ofereix l'\u00fas de Mapbox Studio per a dissenyar estils de mapes personalitzats.</p>"},{"location":"DWEC_UD4_utilitats_extra/#template-literals","title":"Template literals","text":"<p>En JavaScript, els \"template literals\" (o plantilles literals) s\u00f3n una caracter\u00edstica introdu\u00efda amb ECMAScript 6 (ES6) que permeten crear cadenes de text de manera m\u00e9s concisa i amb funcionalitats addicionals. Utilitzen la sintaxi de cometes invertides (``) en lloc de les cometes simples o dobles.</p> <p>Aqu\u00ed tens un exemple b\u00e0sic d'\u00fas de template literals:</p> JavaScript<pre><code>const nom = \"John\";\nconst edat = 30;\n\n// Utilitzaci\u00f3 de template literals\nconst missatge = `Hola, el meu nom \u00e9s ${nom} i tinc ${edat} anys.`;\n\nconsole.log(missatge);\n</code></pre> <p>En aquest exemple, la cadena de text est\u00e0 envoltada per cometes invertides, i les variables es poden integrar directament dins la cadena utilitzant <code>${variable}</code>. Aix\u00f2 fa que sigui m\u00e9s llegible i convenient que la concatenaci\u00f3 tradicional de cadenes o l'\u00fas de l'operador <code>+</code>.</p> <p>Les avantatges principals dels template literals inclouen:</p> <ol> <li> <p>Interpolaci\u00f3 de variables: Les variables es poden afegir f\u00e0cilment a la cadena sense necessitat d'operadors de concatenaci\u00f3.</p> </li> <li> <p>Suport per expressions: Pots incrustar expressions dins les plantilles literals, no nom\u00e9s variables. Aquestes expressions s\u00f3n avaluades i incrustades a la cadena.</p> </li> </ol> JavaScript<pre><code>const a = 5;\nconst b = 10;\n\nconst resultat = `La suma de ${a} i ${b} \u00e9s ${a + b}.`;\nconsole.log(resultat); // La suma de 5 i 10 \u00e9s 15.\n</code></pre> <ol> <li>Multil\u00ednia: Pots crear cadenes multil\u00ednia sense necessitat de concatenar m\u00faltiples cadenes o utilitzar car\u00e0cters d'escapament.</li> </ol> JavaScript<pre><code>const multilinea = `\nL\u00ednia 1\nL\u00ednia 2\nL\u00ednia 3\n`;\n</code></pre> <p>En resum, els template literals s\u00f3n una forma m\u00e9s elegant i vers\u00e0til de treballar amb cadenes de text a JavaScript, especialment quan es necessita incorporar variables o expressions dins les cadenes.</p>"},{"location":"DWEC_UD4_utilitats_extra/#aplicar-canvis-en-arrays","title":"Aplicar canvis en <code>arrays</code>","text":"<p>Funci\u00f3 map()</p> <p>La funci\u00f3 <code>map</code> en JavaScript \u00e9s un m\u00e8tode que es pot utilitzar en arrays per iterar sobre cada element i aplicar una funci\u00f3 proporcionada a cada element de l'array original, creant aix\u00ed un nou array amb els resultats de les crides a aquesta funci\u00f3.</p> <p>La signatura de la funci\u00f3 <code>map</code> \u00e9s la seg\u00fcent:</p> JavaScript<pre><code>array.map(callback(currentValue, index, array), thisArg);\n</code></pre> <ul> <li><code>callback</code>: Funci\u00f3 que es crida per cada element de l'array, amb tres arguments:</li> <li><code>currentValue</code>: Valor de l'element actual de l'array.</li> <li><code>index</code>: \u00cdndex de l'element actual.</li> <li><code>array</code>: L'array que est\u00e0 sent iterat.</li> <li><code>thisArg</code> (opcional): Valor per a utilitzar com a \"this\" al executar la funci\u00f3 de retorn.</li> </ul> <p>Aqu\u00ed tens un exemple senzill de com funciona la funci\u00f3 <code>map</code>:</p> JavaScript<pre><code>const nombres = [1, 2, 3, 4, 5];\n\n// Utilitzant map per duplicar cada element de l'array\nconst duplicats = nombres.map(function(num) {\n  return num * 2;\n});\n\nconsole.log(duplicats); // Resultat: [2, 4, 6, 8, 10]\n</code></pre> <p>En aquest exemple, la funci\u00f3 passada com a argument a <code>map</code> duplica cada element de l'array original. El resultat es guarda en un nou array (<code>duplicats</code>), sense modificar l'array original (<code>nombres</code>).</p> <p><code>map</code> \u00e9s \u00fatil quan vols transformar cada element d'un array sense modificar l'array original. Tamb\u00e9 facilita la lectura i el manteniment del codi en comparaci\u00f3 amb l'\u00fas de bucles for.</p>"},{"location":"DWEC_UD4_utilitats_extra/#drag-and-drop","title":"Drag and drop","text":"<p>Arrastra i solta</p> <p>El \"drag and drop\" (arrossega i deixa anar) en JavaScript \u00e9s una funcionalitat que permet als usuaris agafar elements HTML i arrossegar-los a una altra ubicaci\u00f3 de la p\u00e0gina web o interactuar amb ells de manera din\u00e0mica. </p> <p>Aquesta caracter\u00edstica es pot implementar mitjan\u00e7ant una combinaci\u00f3 d'events i m\u00e8todes proporcionats pel model d'objectes del document (DOM) de JavaScript.</p> <p>Aqu\u00ed tens un exemple senzill d'arrossega i deixa anar amb JavaScript:</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Drag and Drop Exemple&lt;/title&gt;\n    &lt;style&gt;\n        .draggable {\n            width: 100px;\n            height: 100px;\n            background-color: #3498db;\n            color: #fff;\n            text-align: center;\n            line-height: 100px;\n            cursor: move;\n\n        }\n\n        .dropzone {\n            width: 300px;\n            height: 200px;\n            border: 2px dashed #2ecc71;\n\n        }\n\n        .contenidor {\n            display: flex;\n            justify-content: space-between;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"contenidor\"&gt;\n        &lt;div id=\"draggableElement\" class=\"draggable\" draggable=\"true\"&gt;\n            Arrossega'm!\n        &lt;/div&gt;\n        &lt;br&gt;\n\n        &lt;div id=\"dropzone\" class=\"dropzone\"&gt;\n            Deixa anar aqu\u00ed\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n\n\n    &lt;script&gt;\n        const draggableElement = document.getElementById('draggableElement');\n        const dropzone = document.getElementById('dropzone');\n\n        // Event listener per iniciar l'arrossega\n        draggableElement.addEventListener('dragstart', function (event) {\n            // Guardar l'identificador de l'element arrossegat\n            event.dataTransfer.setData('text/plain', draggableElement.id);\n        });\n\n        // Event listener per permetre el soltar\n        dropzone.addEventListener('dragover', function (event) {\n            event.preventDefault(); // Prevenir el comportament per defecte que impedeix el soltar\n        });\n\n        // Event listener per gestionar el soltar\n        dropzone.addEventListener('drop', function (event) {\n            event.preventDefault(); // Prevenir el comportament per defecte que impedeix el soltar\n\n            // Obtindre l'identificador de l'element arrossegat\n            const draggedElementId = event.dataTransfer.getData('text/plain');\n\n            // Obtindre l'element arrossegat\n            const draggedElement = document.getElementById(draggedElementId);\n\n            // Afegir l'element arrossegat a la dropzone\n            dropzone.appendChild(draggedElement);\n        });\n    &lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>En aquest exemple, hi ha dos elements: un element arrossegable (amb l'ID \"draggableElement\") i una zona de soltar (amb l'ID \"dropzone\"). Quan l'usuari arrossega l'element, es dispara l'event <code>dragstart</code>, i quan l'usuari deixa anar l'element a la zona de soltar, es dispara l'event <code>drop</code>. L'element arrossegat es mou a la zona de soltar.</p>"},{"location":"DWEC_UD4_utilitats_extra/#objectes","title":"Objectes","text":""},{"location":"DWEC_UD4_utilitats_extra/#creacio","title":"Creaci\u00f3","text":"<p>En JavaScript, es poden crear objectes de diverses maneres. Aqu\u00ed tens algunes de les maneres m\u00e9s comunes de crear objectes:</p> <ol> <li>Object Literal (Literals d'objecte):    \u00c9s la forma m\u00e9s simple i comuna de crear un objecte. Utilitza la notaci\u00f3 d'objecte literal, que consisteix en col\u00b7locar parells de claus i valors entre les claus.</li> </ol> JavaScript<pre><code>const persona = {\n  nom: 'John',\n  edat: 30,\n  ciutat: 'Barcelona'\n};\n</code></pre> <ol> <li>Constructor de l'Objecte:    Pots utilitzar un constructor d'objectes per crear inst\u00e0ncies d'objectes. El constructor \u00e9s una funci\u00f3 que actua com a plantilla per a la creaci\u00f3 d'objectes.</li> </ol> JavaScript<pre><code>function Persona(nom, edat, ciutat) {\n  this.nom = nom;\n  this.edat = edat;\n  this.ciutat = ciutat;\n}\n\nconst persona1 = new Persona('John', 30, 'Barcelona');\n</code></pre> <ol> <li>Object.create: <code>Object.create</code> crea un nou objecte amb el prototip d'un objecte existent.</li> </ol> JavaScript<pre><code>const personaPrototip = {\n  saluda: function() {\n    console.log(`Hola, el meu nom \u00e9s ${this.nom}.`);\n  }\n};\n\nconst persona2 = Object.create(personaPrototip);\npersona2.nom = 'Alice';\n</code></pre> <ol> <li>Classes (ES6 i versions posteriors):    A partir d'ECMAScript 6, es va introduir la paraula clau <code>class</code> per facilitar la creaci\u00f3 de classes i inst\u00e0ncies d'objectes.</li> </ol> JavaScript<pre><code>class Animal {\n  constructor(nom, tipus) {\n    this.nom = nom;\n    this.tipus = tipus;\n  }\n\n  ferSo() {\n    console.log('Fent un so');\n  }\n}\n\nconst gos = new Animal('Firulais', 'gos');\n</code></pre> <ol> <li>Funci\u00f3 Factoria:    Les funcions factoria s\u00f3n funcions que retornen objectes. S\u00f3n \u00fatils per a la creaci\u00f3 d'objectes en situacions m\u00e9s complexes o din\u00e0miques.</li> </ol> JavaScript<pre><code>function creaPersona(nom, edat, ciutat) {\n  return {\n    nom: nom,\n    edat: edat,\n    ciutat: ciutat,\n    saluda: function() {\n      console.log(`Hola, el meu nom \u00e9s ${this.nom}.`);\n    }\n  };\n}\n\nconst persona3 = creaPersona('Maria', 25, 'Madrid');\n</code></pre> <p>Cada m\u00e8tode t\u00e9 els seus avantatges i \u00fas espec\u00edfic. L'elecci\u00f3 dep\u00e8n del context i del que es vol aconseguir amb l'objecte.</p>"},{"location":"DWEC_UD4_utilitats_extra/#herencia","title":"Her\u00e8ncia","text":"<p>En JavaScript, l'her\u00e8ncia es realitza mitjan\u00e7ant els prototips. Cada objecte t\u00e9 un prototip, i els objectes poden heretar propietats i m\u00e8todes del seu prototip. A continuaci\u00f3, et mostrar\u00e9 com funciona l'her\u00e8ncia en JavaScript utilitzant els prototips i les classes.</p>"},{"location":"DWEC_UD4_utilitats_extra/#herencia-amb-prototips","title":"Her\u00e8ncia amb Prototips:","text":"<p>En aquest exemple, crearem una funci\u00f3 constructora <code>Animal</code> com a prototip base i una funci\u00f3 constructora <code>Gos</code> que hereta de <code>Animal</code> mitjan\u00e7ant el seu prototip:</p> JavaScript<pre><code>// Prototip base\nfunction Animal(nom) {\n  this.nom = nom;\n}\n\n// Afegim un m\u00e8tode al prototip d'Animal\nAnimal.prototype.saluda = function() {\n  console.log(`Hola, s\u00f3c un animal anomenat ${this.nom}.`);\n};\n\n// Funci\u00f3 constructora que hereta de Animal\nfunction Gos(nom, ra\u00e7a) {\n  // Cridem al constructor de l'Animal amb la paraula clau \"call\"\n  Animal.call(this, nom);\n  this.ra\u00e7a = ra\u00e7a;\n}\n\n// Establim la relaci\u00f3 de prototip entre Gos i Animal\nGos.prototype = Object.create(Animal.prototype);\nGos.prototype.constructor = Gos;  // Corregim el constructor ja que s'ha sobrescrit amb Object.create\n\n// Afegim un m\u00e8tode addicional al prototip de Gos\nGos.prototype.lladra = function() {\n  console.log('Guau, guau!');\n};\n\n// Creem una inst\u00e0ncia de Gos\nconst firulais = new Gos('Firulais', 'Golden Retriever');\n\n// Fem servir els m\u00e8todes heretats\nfirulais.saluda(); // Hola, s\u00f3c un animal anomenat Firulais.\nfirulais.lladra();  // Guau, guau!\n</code></pre> <p>En aquest exemple, <code>Gos</code> hereta de <code>Animal</code> mitjan\u00e7ant <code>Object.create(Animal.prototype)</code>. Aix\u00f2 significa que els objectes creats amb la funci\u00f3 constructora <code>Gos</code> tindran un prototip que apunta al prototip d'<code>Animal</code>.</p>"},{"location":"DWEC_UD4_utilitats_extra/#herencia-amb-classes-es6-i-versions-posteriors","title":"Her\u00e8ncia amb Classes (ES6 i versions posteriors):","text":"<p>A partir d'ECMAScript 6, es va introduir la paraula clau <code>class</code> per facilitar la creaci\u00f3 de classes i her\u00e8ncia:</p> JavaScript<pre><code>// Classe base\nclass Animal {\n  constructor(nom) {\n    this.nom = nom;\n  }\n\n  saluda() {\n    console.log(`Hola, s\u00f3c un animal anomenat ${this.nom}.`);\n  }\n}\n\n// Classe que hereta d'Animal\nclass Gos extends Animal {\n  constructor(nom, ra\u00e7a) {\n    super(nom); // Cridem al constructor de l'Animal amb la paraula clau \"super\"\n    this.ra\u00e7a = ra\u00e7a;\n  }\n\n  lladra() {\n    console.log('Guau, guau!');\n  }\n}\n\n// Creem una inst\u00e0ncia de Gos\nconst firulais = new Gos('Firulais', 'Golden Retriever');\n\n// Fem servir els m\u00e8todes heretats\nfirulais.saluda(); // Hola, s\u00f3c un animal anomenat Firulais.\nfirulais.lladra();  // Guau, guau!\n</code></pre> <p>En aquest exemple, <code>Gos</code> hereta de <code>Animal</code> amb la paraula clau <code>extends</code>. La paraula clau <code>super</code> s'utilitza per cridar el constructor de la classe pare (<code>Animal</code>) dins del constructor de la classe filla (<code>Gos</code>). Aix\u00f2 garanteix que l'her\u00e8ncia es gestioni correctament.</p>"},{"location":"DWEC_UD4_utilitats_extra_pr/","title":"Pr\u00e0ctica Utilitats Extra","text":""},{"location":"DWEC_UD4_utilitats_extra_pr/#exercici-moduls","title":"Exercici m\u00f2duls","text":"<p>Crea un m\u00f2dul en algunes funcions matem\u00e0tiques que se t'ocurrixquen. Importa i utilitza aquest m\u00f2dul des d'altre arxiu <code>javascript</code>.</p>"},{"location":"DWEC_UD4_utilitats_extra_pr/#exercici-cookies-i-local-storage","title":"Exercici cookies i local storage","text":"<p>Guarda informaci\u00f3 teua com nom, cognoms, email, etc en local storage i despr\u00e9s accedeix a ella.</p> <p>Fes-ho ara amb cookies i fes que expire en un dia. Quan no poses data d'expiraci\u00f3 a una cookie expira en tancar la sessi\u00f3? Comprova-ho...</p>"},{"location":"DWEC_UD4_utilitats_extra_pr/#exercici-mapa","title":"Exercici MAPA","text":"<p>Agafa alguna plantilla o disseny senzill i incorpora un mapa amb funcionalitats extra com cursors, etc. Utilitza <code>MapBox</code> en cas que no tingues compte d'usuari en alguna altra plataforma.</p>"},{"location":"DWEC_UD4_utilitats_extra_pr/#exercici-drag-and-drop","title":"Exercici Drag and Drop","text":"<p>Implementa un exemple de Drag&amp;Drop d'una imatge.</p>"},{"location":"DWEC_UD5_exemple_ajax/","title":"UD5 AJAX exemple","text":"<p>Observem un exemple d'una crida <code>AJAX</code> a una API que retorna un <code>JSON</code> amb la <code>ip</code> d'un servidor. Vos adjunte els arxius per a que ho pugueu provar directament.</p> <p>Baixa els arxius</p>"},{"location":"DWEC_UD5_exemple_ajax/#forma-tradicional","title":"Forma tradicional","text":"<p>ajax_pur.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;AJAX pur&lt;/title&gt;\n        &lt;script src=\"./js/ajax.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"contingut\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> ajax.js<pre><code>window.onload = ()=&gt; {\n    carregaJSON();\n}\n\nfunction carregaJSON(){\n    let peticio = new XMLHttpRequest();\n    peticio.onreadystatechange = function() {\n        if (this.readyState == 4 &amp;&amp; this.status == 200){\n            let resposta = peticio.responseText;\n            ajaxOK(resposta);\n        }\n    }\n    peticio.open(\"GET\", \"http://ip.jsontest.com/\", true);\n    peticio.send();\n}\n\nfunction ajaxOK(resp){\n    let ip = JSON.parse(resp);\n    let cadena = \"La IP que torna el servidor \u00e9s: \" + ip.ip;\n    document.getElementById(\"contingut\").innerHTML = cadena;\n}\n</code></pre></p>"},{"location":"DWEC_UD5_exemple_ajax/#amb-fetch","title":"Amb <code>fetch()</code>","text":"fetch.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;FETCH&lt;/title&gt;\n        &lt;script src=\"./js/fetch.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"contingut\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> fetch.js<pre><code>window.onload = ()=&gt; {\n    fetch(\"http://ip.jsontest.com/\").\n        then((resp)=&gt;{\n            return resp.json();\n        }).\n        then((resposta)=&gt;{\n            let cadena = \"La IP que torna el servidor \u00e9s: \" + resposta.ip;\n            document.getElementById(\"contingut\").innerHTML = cadena;\n        }).\n        catch(\n            console.log(\"Hi ha hagut un error\")\n        );\n}\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/","title":"Peticions AJAX","text":"<p>En aquest document es mostren les diferents formes existents per a fer peticions <code>AJAX</code> a un servidor. Totes les formes s\u00f3n v\u00e0lides i el programador escollir\u00e0 la forma en que li resulta m\u00e9s c\u00f2mode treballar.</p>"},{"location":"DWEC_UD5_peticions_ajax/#1-xmlhttprequest","title":"1. XMLHttpRequest()","text":"<p>L'objecte <code>XMLHttpRequest</code> \u00e9s una interf\u00edcie que s'utilitza en programaci\u00f3 web per fer peticions a servidors web mitjan\u00e7ant JavaScript. Aquesta interf\u00edcie permet als desenvolupadors web comunicar-se amb servidors remots sense necessitat de recarregar la p\u00e0gina web, la qual cosa fa possible crear aplicacions web m\u00e9s din\u00e0miques i interactives.</p> <p>Amb l'objecte XMLHttpRequest, pots fer peticions HTTP, com ara GET o POST, i rebre dades de resposta del servidor. Aix\u00f2 \u00e9s \u00fatil per carregar contingut din\u00e0mic, com arxius JSON o HTML, o per enviar dades a un servidor per ser processades. Aquesta funcionalitat \u00e9s \u00e0mpliament utilitzada en aplicacions web AJAX (Asynchronous JavaScript and XML), que permeten actualitzar parts espec\u00edfiques d'una p\u00e0gina web sense necessitat de recarregar-la completament.</p> <p>Actualitat</p> <p>Tot i que l'objecte XMLHttpRequest va ser molt important en el passat, avui en dia molts desenvolupadors web utilitzen l'API Fetch, que proporciona una interf\u00edcie m\u00e9s moderna i potser m\u00e9s f\u00e0cil d'utilitzar per fer peticions HTTP. L'objecte XMLHttpRequest, tot i aix\u00f2, encara \u00e9s v\u00e0lid i pot ser \u00fatil en certs casos, sobretot en projectes m\u00e9s antics o en situacions on \u00e9s necess\u00e0ria una compatibilitat amb navegadors m\u00e9s antics.</p>"},{"location":"DWEC_UD5_peticions_ajax/#11-peticio-get","title":"1.1 Petici\u00f3 <code>GET</code>","text":"JavaScript<pre><code>const xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"https://jsonplaceholder.typicode.com/users\");\nxhr.send();\nxhr.responseType = \"json\";\nxhr.onload = () =&gt; {\n  if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {\n    const data = xhr.response;\n    console.log(data);\n  } else {\n    console.log(`Error: ${xhr.status}`);\n  }\n};\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#12-peticio-post","title":"1.2 Petici\u00f3 <code>POST</code>","text":"JavaScript<pre><code>const xhr = new XMLHttpRequest();\nxhr.open(\"POST\", \"https://jsonplaceholder.typicode.com/posts\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nconst body = JSON.stringify({\n  title: \"Hello World\",\n  body: \"My POST request\",\n  userId: 900,\n});\nxhr.onload = () =&gt; {\n  if (xhr.readyState == 4 &amp;&amp; xhr.status == 201) {\n    console.log(JSON.parse(xhr.responseText));\n  } else {\n    console.log(`Error: ${xhr.status}`);\n  }\n};\nxhr.send(body);\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#13-peticions-put-i-patch","title":"1.3 Peticions <code>PUT i PATCH</code>","text":"<p>Amb <code>PUT</code> actualitzem tot l'objecte, amb <code>PATCH</code> nom\u00e9s una part.</p> JavaScript<pre><code>const xhr = new XMLHttpRequest();\nxhr.open(\"PATCH\", \"https://jsonplaceholder.typicode.com/posts/101\");\nxhr.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\nconst body = JSON.stringify({\n  body: \"My PATCH request\",\n});\nxhr.onload = () =&gt; {\n  var data = JSON.parse(xhr.responseText);\n  if (xhr.readyState == 4 &amp;&amp; xhr.status == \"200\") {\n    console.log(data);\n  } else {\n    console.log(`Error: ${xhr.status}`);\n  }\n};\nxhr.send(body);\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#14-peticio-delete","title":"1.4 Petici\u00f3 <code>DELETE</code>","text":"JavaScript<pre><code>const xhr = new XMLHttpRequest();\nxhr.open(\"DELETE\", \"https://jsonplaceholder.typicode.com/posts/3\");\nxhr.onload = function () {\n  var data = JSON.parse(xhr.responseText);\n  if (xhr.readyState == 4 &amp;&amp; xhr.status == \"200\") {\n    console.log(data);\n  } else {\n    console.log(`Error: ${xhr.status}`);\n  }\n};\nxhr.send();\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#2-fetch","title":"2. FETCH","text":"<p>L'API <code>Fetch</code> en JavaScript no \u00e9s espec\u00edficament \"en AJAX\" (Asynchronous JavaScript and XML), sin\u00f3 que \u00e9s una API moderna per fer peticions de xarxa as\u00edncrones. L'\u00fas de Fetch ha reempla\u00e7at en gran mesura l'\u00fas de l'objecte XMLHttpRequest per fer peticions HTTP a servidors remots en aplicacions web. Amb Fetch, pots realitzar peticions a servidors web i obtenir respostes de manera as\u00edncrona, el que permet carregar o enviar dades sense necessitat de recarregar tota la p\u00e0gina web.</p> <p>L'API Fetch ofereix una interf\u00edcie m\u00e9s simple i prometedora que XMLHttpRequest. Proporciona una forma m\u00e9s moderna d'interactuar amb recursos a trav\u00e9s d'HTTP i altres protocols de xarxa. Aqu\u00ed tens un exemple senzill de com fer una sol\u00b7licitud GET amb Fetch:</p> JavaScript<pre><code>fetch('https://exemple.com/api/dades')\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre> <p>En aquest exemple, fem una sol\u00b7licitud <code>GET</code> a una URL especificada i, quan es rep la resposta, la convertim a <code>JSON</code> i la mostrem a la consola. La interf\u00edcie <code>Promise</code> utilitzada aqu\u00ed facilita la gesti\u00f3 de peticions as\u00edncrones i respostes.</p> <p>L'API Fetch \u00e9s compatible amb les \u00faltimes versions de navegadors web moderns i \u00e9s una opci\u00f3 recomanada per fer peticions de xarxa en aplicacions web actuals. Proporciona una sintaxi m\u00e9s clara i m\u00e9s flexible que l'objecte <code>XMLHttpRequest</code>, i permet fer servir Promises per gestionar les respostes, cosa que fa que el codi sigui m\u00e9s llegible i mantenible.</p>"},{"location":"DWEC_UD5_peticions_ajax/#21-get","title":"2.1 GET","text":"JavaScript<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\")\n.then((response) =&gt; response.json())\n.then((json) =&gt; console.log(json));\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#22-post","title":"2.2 POST","text":"JavaScript<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n  method: \"POST\",\n  body: JSON.stringify({\n    title: \"Hello World\",\n    body: \"My POST request\",\n    userId: 900,\n  }),\n  headers: {\n    \"Content-type\": \"application/json; charset=UTF-8\",\n  },\n})\n.then((response) =&gt; response.json())\n.then((json) =&gt; console.log(json));\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#23-put","title":"2.3 PUT","text":"JavaScript<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"PUT\",\n  body: JSON.stringify({\n    id: 1,\n    title: \"My PUT request\",\n    body: \"Updating the entire object\",\n    userId: 1,\n  }),\n  headers: {\n    \"Content-type\": \"application/json; charset=UTF-8\",\n  },\n})\n.then((response) =&gt; response.json())\n.then((json) =&gt; console.log(json));\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#24-delete","title":"2.4 DELETE","text":"JavaScript<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/3\", {\n  method: \"DELETE\",\n});\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#3-axios","title":"3 AXIOS","text":"<p>Axios \u00e9s una llibreria JavaScript que s'utilitza per fer peticions HTTP des del costat del client en aplicacions web. Aquesta llibreria \u00e9s particularment popular en el desenvolupament web, ja que simplifica la realitzaci\u00f3 de peticions a servidors web i la gesti\u00f3 de les respostes obtingudes mitjan\u00e7ant una interf\u00edcie f\u00e0cil d'utilitzar.</p> <p>Axios est\u00e0 basat en Promises i ofereix una forma m\u00e9s simple i concisa de fer peticions HTTP que l'objecte XMLHttpRequest o l'API Fetch. La llibreria gestiona molts dels aspectes complicats de les peticions de xarxa, com la gesti\u00f3 de les respostes, l'enviament d'encap\u00e7alaments i la gesti\u00f3 d'errors. Tamb\u00e9 permet fer peticions amb diferents m\u00e8todes HTTP com GET, POST, PUT, DELETE, etc.</p> <p>Aqu\u00ed tens un exemple b\u00e0sic de com fer una sol\u00b7licitud GET amb Axios:</p> JavaScript<pre><code>const axios = require('axios');\n\naxios.get('https://exemple.com/api/dades')\n  .then(response =&gt; {\n    console.log(response.data);\n  })\n  .catch(error =&gt; {\n    console.error('Error:', error);\n  });\n</code></pre> <p>Axios tamb\u00e9 \u00e9s molt \u00fatil en aplicacions de JavaScript del costat del client com React, Vue.js i Angular, ja que facilita la integraci\u00f3 amb servidors i l'obtenci\u00f3 de dades a trav\u00e9s d'APIs.</p> <p>En resum, Axios \u00e9s una llibreria popular i \u00e0mpliament utilitzada per fer peticions HTTP a servidors web des del costat del client en desenvolupament web, i proporciona una interf\u00edcie m\u00e9s senzilla i f\u00e0cil d'utilitzar per aquest prop\u00f2sit.</p> <p>Instalar</p> <p>AXIOS \u00e9s una llibreria que cal instal\u00b7lar</p> Bash<pre><code>npm install axios\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#31-get","title":"3.1 GET","text":"JavaScript<pre><code>axios.get(\"https://jsonplaceholder.typicode.com/posts\")\n.then((response) =&gt; console.log(response.data))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#32-post","title":"3.2 POST","text":"JavaScript<pre><code>axios.post(\"https://jsonplaceholder.typicode.com/posts\", {\n  title: \"POST request with Axios\",\n  body: \"POST request\",\n  userId: 10,\n})\n.then(function (response) {\n  console.log(response.data);\n})\n.then((error) =&gt; console.log(error))\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#33-put","title":"3.3 PUT","text":"JavaScript<pre><code>axios.put(\"https://jsonplaceholder.typicode.com/posts/10\", {\n  title: \"PUT request with Axios\",\n  body: \"PUT request\",\n  userId: 10,\n})\n.then(function (response) {\n  console.log(response.data);\n})\n.then((error) =&gt; console.log(error))\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#34-delete","title":"3.4 DELETE","text":"JavaScript<pre><code>axios.delete(\"https://jsonplaceholder.typicode.com/posts/10\")\n.then(function (response) {\n  console.log(response);\n})\n.then((error) =&gt; console.log(error))\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#4-promeses","title":"4. Promeses","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ajax pur&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .container{\n            display: grid;\n            grid-template-columns: auto;\n            grid-gap: 10px;\n            background-color: red;\n            padding: 10px;\n        }\n\n        .container &gt; div {\n            color: white;\n            background-color: green;\n            font-size: 20px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n\n        @media only screen and (min-width: 600px) {\n            /* For tablets: */\n            .container{grid-template-columns: auto auto auto}\n        }\n\n        @media only screen and (min-width: 768px) {\n          /* For desktop: */\n          .container{grid-template-columns: auto auto auto auto auto}\n        }\n    &lt;/style&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function carregaQuadrats(url){\n            promesa = new Promise((resolve,reject)=&gt;{\n                xhr=new XMLHttpRequest();\n                xhr.onreadystatechange=()=&gt;{\n                    if (xhr.readyState == 4){\n                        if (xhr.status == 200){\n                            //resposta=JSON.parse(xhr.responseText);\n                            //console.log(resposta[0].url);\n                            //console.log(xhr.responseText);\n                            resolve(xhr.responseText);\n                        }else {reject();}\n                    }\n                }\n                xhr.open(\"GET\", url, true);\n                xhr.send();\n            });\n            return promesa;\n        }\n\n        function exitPromesa(resp){\n            //console.log(resp);\n            vector = JSON.parse(resp);\n            //alert(vector.length);\n            cadena=\"\";\n            vector.forEach(elem=&gt;{\n                cadena += \"&lt;div&gt;&lt;p&gt;\"+elem.title+\"&lt;/p&gt;&lt;/div&gt;\";\n            });\n            document.getElementById(\"contenedor\").innerHTML=cadena;\n        }\n\n        function mostraError(){\n            alert(\"Error en la petici\u00f3...\");\n        }\n\n        window.onload = ()=&gt;{\n            carregaQuadrats(\"http://jsonplaceholder.typicode.com/posts\").then(exitPromesa).catch(function(){alert(\"Error AJAX\")});\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"contenedor\" class=\"container\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD5_peticions_ajax/#5-async-awayt","title":"5. ASYNC / AWAYT","text":"<p>Es pot utilitzar asincronia d'aquesta forma...</p> JavaScript<pre><code>const cargarDatos = async () =&gt; {\n  const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n  const res = await fetch(url);\n  const datos = await res.json();\n  console.log(datos);\n};\ncargarDatos();\n</code></pre> <p><code>async</code> i <code>await</code> s\u00f3n caracter\u00edstiques de JavaScript que es van introduir amb l'arribada de les Promises i ECMAScript 2017 (ES8). Aquestes caracter\u00edstiques s\u00f3n utilitzades per simplificar la gesti\u00f3 de codi as\u00edncron en JavaScript, fent-lo m\u00e9s llegible i f\u00e0cil d'entendre. S\u00f3n especialment \u00fatils quan es fan peticions de xarxa o quan es realitzen operacions que triguen un temps indeterminat a completar-se, com ara la lectura de fitxers o l'acc\u00e9s a bases de dades.</p> <ul> <li><code>async</code>: \u00e9s una paraula clau que s'afegeix davant d'una funci\u00f3 per indicar que aquesta funci\u00f3 cont\u00e9 codi as\u00edncron. Les funcions marcades com a <code>async</code> sempre retornen una Promise i permeten l'\u00fas de <code>await</code> dins del cos de la funci\u00f3.</li> </ul> <p>Exemple d'una funci\u00f3 <code>async</code>:</p> JavaScript<pre><code>async function ferAlgunaFeina() {\n  // Codi as\u00edncron aqu\u00ed\n}\n</code></pre> <ul> <li><code>await</code>: \u00e9s una paraula clau que s'utilitza dins de funcions marcades com a <code>async</code> per indicar que es vol esperar fins que una Promise es resolgui (o es rebutgi) abans de continuar amb la seg\u00fcent l\u00ednia de codi. Aix\u00f2 fa que el flux d'execuci\u00f3 es detingui fins que la Promise estigui en un estat final (ja sigui resolta o rebutjada).</li> </ul> <p>Exemple d'\u00fas de <code>await</code>:</p> JavaScript<pre><code>async function exemple() {\n  const resultat = await promesaAsincrona(); // Espera fins que la promesa es resolgui\n  console.log(resultat);\n}\n</code></pre> <p>Note</p> <p>L'\u00fas de <code>async</code> i <code>await</code> facilita la gesti\u00f3 de Promises i fa que el codi sigui m\u00e9s semblant a una programaci\u00f3 s\u00edncrona, el que el fa m\u00e9s llegible i menys propens a \"callback hell\" o \"Pyramid of Doom\", que s\u00f3n problemes comuns quan es treballa amb codi as\u00edncron anidat. Aquestes caracter\u00edstiques han millorat en gran mesura la forma de gestionar la programaci\u00f3 as\u00edncrona a JavaScript.</p>"},{"location":"DWEC_UD5_prac_ajax/","title":"Pr\u00e0ctica AJAX b\u00e0sica","text":"<p>API de prova</p> <p>Consulta la guia sobre com utilitzar la API de prova. </p> <p>Despr\u00e9s implementa una consulta de tipus <code>GET</code> a la URL <code>https://jsonplaceholder.typicode.com/users</code> fent \u00fas almenys dels seg\u00fcents m\u00e8todes:</p> <ul> <li>XMLHttpRequest()</li> <li>Fetch()</li> </ul> <p>Representa el resultat de la consulta en una taula.</p> <p>Implementa una consulta de tipus <code>POST</code> amb <code>fetch()</code> i comprova que l'objecte que retorna la API \u00e9s correcte.</p>"},{"location":"DWEC_UD5_promeses/","title":"AJAX amb promeses","text":""},{"location":"DWEC_UD5_promeses/#1-que-es-una-promesa","title":"1. Que \u00e9s una promesa?","text":"<p>Vegem com ho expliquen a lenguajeJS.com;</p> <p>Les promeses s\u00f3n un concepte per resoldre el problema d'assincronia de manera molt m\u00e9s elegant i pr\u00e0ctica que, per exemple, utilitzant funcions callbacks directament.</p> <p>Com indica el seu propi nom, una promesa \u00e9s una cosa que, en principi pensem que es complir\u00e0, per\u00f2 en el futur poden passar diverses coses:</p> <p>;</p> <ul> <li>La promesa es compleix (promesa resolta)</li> <li>La promesa no es compleix (promesa es rebutja)</li> <li>La promesa es queda en un estat incert indefinidament (promesa pendent)</li> </ul> JavaScript<pre><code>const promesa = new Promise((resolve, reject) =&gt; {\n  // Simulem una operaci\u00f3 as\u00edncrona\n  setTimeout(() =&gt; {\n    const exit = true; // Suposem que l'operaci\u00f3 va b\u00e9\n    if (exit) {\n      resolve('Dades de la promesa'); // La promesa es compleix\n    } else {\n      reject('Hi ha hagut un error'); // La promesa es rebutja amb un missatge d'error\n    }\n  }, 2000); // Esperem 2 segons abans de resoldre o rebutjar la promesa\n});\n\npromesa.then((resultat) =&gt; {\n  console.log('Promesa completada:', resultat);\n}).catch((error) =&gt; {\n  console.error('Promesa rebutjada:', error);\n});\n</code></pre> <p>En aquest exemple, creem una promesa que simula una operaci\u00f3 as\u00edncrona mitjan\u00e7ant un temporitzador (setTimeout). Si l'operaci\u00f3 t\u00e9 \u00e8xit, la promesa es resol amb les dades. Si hi ha un error, la promesa es rebutja amb un missatge d'error. A continuaci\u00f3, utilitzem els m\u00e8todes .then() i .catch() per gestionar la resoluci\u00f3 o el rebuig de la promesa.</p>"},{"location":"DWEC_UD5_promeses/#2-metodes","title":"2. M\u00e8todes","text":"<p>;</p>"},{"location":"DWEC_UD5_promeses/#3-sintaxi","title":"3. Sintaxi","text":"JavaScript<pre><code>new Promise(function(resolve, reject) { ... });\n</code></pre> <p><code>resolve</code> i <code>reject</code> s\u00f3n les funcions que passem per a utilitzar en cas d'\u00e8xit o frac\u00e0s de la promesa.</p>"},{"location":"DWEC_UD5_promeses/#4-exemple-de-crida-axax-gestionada-en-promeses","title":"4. Exemple de crida <code>AXAX</code> gestionada en promeses","text":"JavaScript<pre><code>function carregaQuadrats(url){\n            promesa = new Promise((resolve,reject)=&gt;{\n                xhr=new XMLHttpRequest();\n                xhr.onreadystatechange=()=&gt;{\n                    if (xhr.readyState == 4){\n                        if (xhr.status == 200){\n                            //resposta=JSON.parse(xhr.responseText);\n                            //console.log(resposta[0].url);\n                            //console.log(xhr.responseText);\n                            resolve(xhr.responseText);\n                        }else {reject();}\n                    }\n                }\n                xhr.open(\"GET\", url, true);\n                xhr.send();\n            });\n            return promesa;\n        }\n\n        function exitPromesa(resp){\n            //console.log(resp);\n            vector = JSON.parse(resp);\n            //alert(vector.length);\n            cadena=\"\";\n            vector.forEach(elem=&gt;{\n                cadena += \"&lt;div&gt;&lt;p&gt;\"+elem.title+\"&lt;/p&gt;&lt;/div&gt;\";\n            });\n            document.getElementById(\"contenedor\").innerHTML=cadena;\n        }\n\n        function mostraError(){\n            alert(\"Error en la petici\u00f3...\");\n        }\n</code></pre> <p>Podeu provar a executar tot aquest codi per veure una web (responsive) d'exemple.</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ajax pur&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .container{\n            display: grid;\n            grid-template-columns: auto;\n            grid-gap: 10px;\n            background-color: red;\n            padding: 10px;\n        }\n\n        .container &gt; div {\n            color: white;\n            background-color: green;\n            font-size: 20px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n\n        @media only screen and (min-width: 600px) {\n            /* For tablets: */\n            .container{grid-template-columns: auto auto auto}\n        }\n\n        @media only screen and (min-width: 768px) {\n          /* For desktop: */\n          .container{grid-template-columns: auto auto auto auto auto}\n        }\n    &lt;/style&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function carregaQuadrats(url){\n            promesa = new Promise((resolve,reject)=&gt;{\n                xhr=new XMLHttpRequest();\n                xhr.onreadystatechange=()=&gt;{\n                    if (xhr.readyState == 4){\n                        if (xhr.status == 200){\n                            //resposta=JSON.parse(xhr.responseText);\n                            //console.log(resposta[0].url);\n                            //console.log(xhr.responseText);\n                            resolve(xhr.responseText);\n                        }else {reject();}\n                    }\n                }\n                xhr.open(\"GET\", url, true);\n                xhr.send();\n            });\n            return promesa;\n        }\n\n        function exitPromesa(resp){\n            //console.log(resp);\n            vector = JSON.parse(resp);\n            //alert(vector.length);\n            cadena=\"\";\n            vector.forEach(elem=&gt;{\n                cadena += \"&lt;div&gt;&lt;p&gt;\"+elem.title+\"&lt;/p&gt;&lt;/div&gt;\";\n            });\n            document.getElementById(\"contenedor\").innerHTML=cadena;\n        }\n\n        function mostraError(){\n            alert(\"Error en la petici\u00f3...\");\n        }\n\n        window.onload = ()=&gt;{\n            carregaQuadrats(\"http://jsonplaceholder.typicode.com/posts\").then(exitPromesa).catch(function(){alert(\"Error AJAX\")});\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"contenedor\" class=\"container\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DWEC_UD5_teoria_ajax/","title":"UD5 AJAX Teoria","text":""},{"location":"DWEC_UD5_teoria_ajax/#que-es-ajax","title":"Que \u00e9s <code>AJAX</code>?","text":"<p>Sigles</p> <p>AJAX significa \"Asynchronous JavaScript and XML\" (JavaScript asincr\u00f2nic i XML, per les seves sigles en angl\u00e8s)</p> <p>\u00c9s una t\u00e8cnica de programaci\u00f3 utilitzada en el desenvolupament web per crear aplicacions interactives i din\u00e0miques. AJAX permet a una p\u00e0gina web comunicar-se amb el servidor en segon pla sense necessitat de recarregar tota la p\u00e0gina. Aix\u00f2 significa que les dades es poden recuperar i enviar al servidor sense interrompre l'experi\u00e8ncia de l'usuari a la p\u00e0gina web.</p> <p></p> <p>Les caracter\u00edstiques principals d'AJAX inclouen:</p> <ul> <li> <p>Asincronia: Les sol\u00b7licituds AJAX s'envien de manera asincr\u00f2nica, la qual cosa vol dir que la p\u00e0gina web pot continuar sent interactiva mentre s'espera una resposta del servidor.</p> </li> <li> <p>JavaScript: AJAX utilitza JavaScript per enviar i rebre dades, la qual cosa permet manipular el contingut de la p\u00e0gina web en temps real.</p> </li> <li> <p>XML (encara que s'utilitza JSON en el seu lloc): Encara que el nom fa refer\u00e8ncia a XML, en la pr\u00e0ctica, AJAX utilitza principalment el format JSON (JavaScript Object Notation) per intercanviar dades amb el servidor, degut a la seva simplicitat i efici\u00e8ncia.</p> </li> <li> <p>Actualitzacions parcials: En lloc de recarregar tota la p\u00e0gina, AJAX permet actualitzar parts espec\u00edfiques de la mateixa, la qual cosa estalvia temps i amplada de banda.</p> </li> <li> <p>Millora de l'experi\u00e8ncia de l'usuari: Gr\u00e0cies a AJAX, les aplicacions web poden proporcionar una experi\u00e8ncia m\u00e9s r\u00e0pida i flu\u00efda a l'usuari, ja que es poden carregar i mostrar dades de manera din\u00e0mica sense necessitat de recarregar tota la p\u00e0gina.</p> </li> </ul> <p>AJAX</p> <p>En resum, AJAX \u00e9s una t\u00e8cnica important en el desenvolupament web que permet la creaci\u00f3 d'aplicacions web interactives i din\u00e0miques en permetre la comunicaci\u00f3 asincr\u00f2nica amb el servidor per actualitzar parts espec\u00edfiques de la p\u00e0gina sense recarregar-la per complet.</p>"},{"location":"DWEC_UD5_teoria_ajax/#exemple-amb-una-resposta-json","title":"Exemple amb una resposta <code>JSON</code>","text":"<p>XML i json</p> <p>Antigament era habitual que les respostes que proporciona el servidor estigueren en llenguatge <code>XML</code>. Avu\u00ed en dia el format m\u00e9s utilitzat \u00e9s <code>json</code>.</p> <p>Vegem un exemple en el que fem una crida <code>AJAX</code> a una <code>url</code> on el servidor ens retorna la informaci\u00f3 referent a un usuari en format <code>json</code>.</p> JSON<pre><code>{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"email\": \"johndoe@example.com\"\n}\n</code></pre> <p>El codi per a fer la crida \u00e9s:</p> JavaScript<pre><code>var xhr = new XMLHttpRequest();\nxhr.open('GET', '/data', true);\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {\n        var data = JSON.parse(xhr.responseText);\n        document.getElementById(\"name\").innerHTML = data.name;\n        document.getElementById(\"age\").innerHTML = data.age;\n        document.getElementById(\"email\").innerHTML = data.email;\n    }\n};\nxhr.send();\n</code></pre> <p>JSON.parse()</p> <p>Observa com cal fer un <code>JSON.parse()</code> per a convertir l'objecte <code>json</code> que torna el servidor en un objecte <code>javascript</code> natiu.</p> <p>A continuaci\u00f3 vos deixe un conjunt de <code>APIs</code> per a fer proves.</p> <p>APIs JSON per a AJAX</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/","title":"Primers passos","text":""},{"location":"DWEC_UD6_VUE_1rs_passos/#frameworks-de-javascript","title":"Frameworks de Javascript","text":"<p>Aquestos s\u00f3n alguns dels m\u00e9s utilitzats:</p> <ol> <li> <p>React.js: Desenvolupat per Facebook, React \u00e9s un framework de llibreria de JavaScript utilitzat per construir interf\u00edcies d'usuari interactives. Es destaca per la seva virtual DOM i l'enfocament basat en components.</p> </li> <li> <p>Angular.js / Angular: Desenvolupat per Google, Angular \u00e9s un framework complet per construir aplicacions web i m\u00f2bils. Utilitza TypeScript i ofereix una arquitectura basada en components.</p> </li> <li> <p>Vue.js: Vue.js \u00e9s un framework de JavaScript progressiu utilitzat per construir interf\u00edcies d'usuari. \u00c9s conegut per la seva simplicitat i flexibilitat, i pot ser integrat f\u00e0cilment en altres projectes.</p> </li> <li> <p>Node.js: Mentre que no \u00e9s un framework en si mateix, Node.js \u00e9s una plataforma que permet l'execuci\u00f3 de JavaScript del costat del servidor. Es basa en el motor V8 de Google Chrome i \u00e9s utilitzat per construir aplicacions del costat del servidor escalables i eficients.</p> </li> <li> <p>Express.js: \u00c9s un framework minimalista de Node.js utilitzat per construir aplicacions web i API. \u00c9s flexible i permet als desenvolupadors definir l'estructura de les seves aplicacions.</p> </li> <li> <p>Next.js: Un framework de React que facilita la creaci\u00f3 d'aplicacions React amb caracter\u00edstiques com el renderitzat del costat del servidor (SSR) i el renderitzat del costat del client (CSR).</p> </li> <li> <p>Nest.js: Un framework de Node.js per construir aplicacions eficients i escalables al costat del servidor. Utilitza TypeScript i es basa en els principis de l'arquitectura modular.</p> </li> <li> <p>Svelte: Un framework de JavaScript que es diferencia dels altres pel seu enfocament \"compila mentre escrius\". La major part de la l\u00f2gica del framework es trasllada al temps de compilaci\u00f3, el que pot resultar en codi m\u00e9s eficient en temps d'execuci\u00f3.</p> </li> </ol> <p>Recorda que les tend\u00e8ncies en el desenvolupament de software poden canviar r\u00e0pidament, i \u00e9s una bona pr\u00e0ctica mantenir-se actualitzat amb les \u00faltimes novetats i canvis en l'ecosistema de JavaScript.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#installacio","title":"Instal\u00b7laci\u00f3","text":"<p>Per instal\u00b7lar Vue.js 3 en un sistema Linux, pots seguir aquests passos generals. Tingues en compte que els detalls poden variar segons la distribuci\u00f3 espec\u00edfica que estiguis utilitzant.</p> <ol> <li>Node.js i npm:    Assegura't de tenir Node.js i npm instal\u00b7lats al teu sistema. Pots descarregar i instal\u00b7lar Node.js des del lloc web oficial: https://nodejs.org/</li> </ol> <p>Pots verificar les versions instal\u00b7lades executant els seg\u00fcents comandaments al teu terminal:    Bash<pre><code>node -v\nnpm -v\n</code></pre></p> <ol> <li>Instal\u00b7laci\u00f3 de Vue CLI:    Vue.js proporciona una interf\u00edcie de l\u00ednia de comandes (CLI) que facilita la creaci\u00f3 i gesti\u00f3 de projectes Vue. Per instal\u00b7lar Vue CLI, executa la seg\u00fcent comanda al teu terminal:    Bash<pre><code>npm install -g @vue/cli\n</code></pre></li> </ol> <p>El flag <code>-g</code> instal\u00b7la el paquet globalment, el que permet accedir a la CLI de Vue des de qualsevol directori.</p> <ol> <li>Verificaci\u00f3 de la instal\u00b7laci\u00f3:    Pots verificar que Vue CLI s'hagi instal\u00b7lat correctament executant:    Bash<pre><code>vue --version\n</code></pre></li> </ol> <p>Aix\u00f2 hauria de mostrar la versi\u00f3 de Vue CLI instal\u00b7lada.</p> <ol> <li>Creaci\u00f3 d'un nou projecte Vue:    Pots crear un nou projecte Vue executant:    Bash<pre><code>vue create nom_del_projecte\n</code></pre></li> </ol> <p>Segueix les instruccions interactives per configurar el teu projecte.</p> <ol> <li> <p>Entrar al directori del projecte:    Canvia al directori del projecte recentment creat:    Bash<pre><code>cd nom_del_projecte\n</code></pre></p> </li> <li> <p>Inici del servidor de desenvolupament:    Per iniciar el servidor de desenvolupament, executa:    Bash<pre><code>npm run serve\n</code></pre></p> </li> </ol> <p>Aix\u00f2 hauria de iniciar un servidor local, i podr\u00e0s veure la teva aplicaci\u00f3 Vue al teu navegador visitant http://localhost:8080/ o una altra URL que s'indiqui a la sortida de la comanda.</p> <p>Funciona??</p> <p>Ja est\u00e0! Ara hauries de tenir Vue.js 3 instal\u00b7lat i funcionant al teu sistema Linux. Recorda que aquests s\u00f3n passos generals i poden variar segons la distribuci\u00f3 espec\u00edfica de Linux que estiguis utilitzant.</p> <p></p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#component-en-vue3","title":"Component en VUE3","text":"<p>Options API vs Composition API</p> <p><code>VUE3</code> presenta dues opcions per a organitzar codi, Options API i Composition API.</p> <p>L'estructura b\u00e0sica d'un component en vue \u00e9s...</p> JavaScript<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;label for=\"name\"&gt;Introdueix el teu nom:&lt;/label&gt;\n    &lt;input id=\"name\" v-model=\"userName\" /&gt;\n\n    &lt;p v-if=\"userName\"&gt;Benvingut, {{ userName }}!&lt;/p&gt;\n    &lt;p v-else&gt;Si us plau, introdueix el teu nom.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'WelcomeUser',\n\n  // Dades del component\n  data() {\n    return {\n      userName: '',\n    };\n  },\n\n  // M\u00e8todes del component\n  methods: {\n    // Funci\u00f3 per reinicialitzar el nom\n    resetName() {\n      this.userName = '';\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Estils espec\u00edfics per al component */\ndiv {\n  margin: 20px;\n}\n\nlabel {\n  font-weight: bold;\n}\n\ninput {\n  margin-bottom: 10px;\n  padding: 5px;\n}\n\np {\n  margin-top: 10px;\n}\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li>Les dades del component es gestionen amb la funci\u00f3 <code>data</code>, on es defineix la variable <code>userName</code>.</li> <li>Els m\u00e8todes del component es gestionen amb la propietat <code>methods</code>, on es defineix la funci\u00f3 <code>resetName</code> per reinicialitzar el nom.</li> <li>A la plantilla, utilitzem <code>v-model</code> per enlla\u00e7ar la caixa de text amb la variable <code>userName</code>.</li> <li>Es mostren missatges de benvinguda personalitzats segons si s'ha introdu\u00eft un nom o no.</li> </ul> <p>L'Options API \u00e9s m\u00e9s declarativa i fa servir opcions com <code>data</code>, <code>methods</code>, <code>computed</code>, etc., per organitzar el component. Tot i que aquest exemple \u00e9s senzill, per components m\u00e9s grans o complexes, la Composition API pot proporcionar una organitzaci\u00f3 i reutilitzaci\u00f3 de codi m\u00e9s efica\u00e7. Les dues opcions, Options API i Composition API, s\u00f3n v\u00e0lides i es poden utilitzar segons les necessitats del projecte.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#options-api-vs-composition-api","title":"Options API vs Composition API","text":"<p><code>Options API</code> organitza el codi d'una forma m\u00e9s clara i m\u00e9s amigable per a la gent que comen\u00e7a a programar en VUE, mentre que <code>Composition API</code> facilita el desenvolupament i la reutilitzaci\u00f3 de codi. </p> <p>Dues opcions v\u00e0lides</p> <ul> <li>Per a aplicacions i components m\u00e9s senzills on voleu alguna cosa r\u00e0pida i senzilla, l'API d'Opcions pot ser la millor opci\u00f3.</li> <li>Per a aplicacions m\u00e9s grans o components amb l\u00f2gica complexa, o si teniu previst reutilitzar la l\u00f2gica entre components, \u00e9s probable que l'API de composici\u00f3 sigui m\u00e9s adequada.</li> <li>Si esteu comen\u00e7ant un nou projecte i espereu que creixi en complexitat, l'adopci\u00f3 de l'API de composici\u00f3 des del principi pot ser benefici\u00f3s.</li> <li>Si <code>TypeScript</code> \u00e9s essencial per al vostre projecte, l'API de composici\u00f3 \u00e9s una millor opci\u00f3.</li> </ul> <p></p> OPTIONS API<pre><code>&lt;script&gt;\n  export default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      increment() {\n        this.count++\n      }\n    },\n    computed: {\n      double() {\n        return this.count * 2\n      }\n    }\n}\n&lt;/script&gt;\n</code></pre> COMPOSITION API<pre><code>&lt;script&gt; \n  import { ref, computed } from 'vue'\n\n  export default {\n    setup() {\n      const count = ref(0)\n\n      const increment = () =&gt; {\n        count.value++\n      }\n\n      const double = computed(() =&gt; {\n        return count.value * 2\n      })\n\n      return {\n        count,\n        increment,\n        double\n      }\n    }\n  }\n&lt;/script&gt;\n</code></pre>"},{"location":"DWEC_UD6_VUE_1rs_passos/#estructura-tipica-dun-projecte","title":"Estructura t\u00edpica d'un projecte","text":"<p>L'estructura d'un projecte en Vue 3 pot variar segons les prefer\u00e8ncies del desenvolupador o els requisits del projecte, per\u00f2 hi ha una estructura comuna que es pot seguir. A continuaci\u00f3, es detalla una estructura de projecte t\u00edpica per a una aplicaci\u00f3 Vue 3:</p> Estructura t\u00edpica<pre><code>my-vue-project/\n|-- public/\n|   |-- index.html\n|   |-- favicon.ico\n|-- src/\n|   |-- assets/\n|   |   |-- logo.png\n|   |-- components/\n|   |   |-- HelloWorld.vue\n|   |-- views/\n|   |   |-- Home.vue\n|   |   |-- About.vue\n|   |-- App.vue\n|   |-- main.js\n|-- node_modules/\n|-- .gitignore\n|-- package.json\n|-- README.md\n|-- babel.config.js\n|-- vue.config.js\n</code></pre> <p>Explicaci\u00f3 de l'estructura:</p> <ul> <li> <p><code>public/</code>: Aquest directori cont\u00e9 arxius est\u00e0tics que es poden accedir directament des de l'arrel de l'aplicaci\u00f3. L'arxiu <code>index.html</code> \u00e9s l'arxiu principal d'entrada on s'inicialitza l'aplicaci\u00f3 Vue.</p> </li> <li> <p><code>src/</code>: Aquest directori cont\u00e9 tot el codi font de l'aplicaci\u00f3 Vue.</p> </li> <li> <p><code>assets/</code>: Cont\u00e9 fitxers multim\u00e8dia com imatges, fonts, etc.</p> </li> <li> <p><code>components/</code>: \u00c9s aqu\u00ed on es guarden els components reutilitzables de l'aplicaci\u00f3. Cada component t\u00e9 un directori propi amb el seu fitxer <code>.vue</code>.</p> </li> <li> <p><code>views/</code>: Cont\u00e9 les vistes de l'aplicaci\u00f3. Cada vista correspon a una p\u00e0gina o secci\u00f3 de l'aplicaci\u00f3 i pot estar formada per diversos components.</p> </li> <li> <p><code>App.vue</code>: \u00c9s el component principal que agrupa tota l'aplicaci\u00f3. Cont\u00e9 la plantilla global, els estils i la configuraci\u00f3 general.</p> </li> <li> <p><code>main.js</code>: \u00c9s l'arxiu d'inici de l'aplicaci\u00f3, on es crea la inst\u00e0ncia principal de Vue i es configura l'aplicaci\u00f3. Aqu\u00ed \u00e9s on es pot importar i utilitzar plugins, configurar rutes (si s'utilitza Vue Router), entre altres coses.</p> </li> <li> <p><code>node_modules/</code>: Aquest directori cont\u00e9 les dependencies del projecte que s'instal\u00b7len amb <code>npm install</code>.</p> </li> <li> <p><code>.gitignore</code>: \u00c9s un arxiu on es poden llistar els arxius i directoris que es volen excloure del control de versions amb Git.</p> </li> <li> <p><code>package.json</code>: \u00c9s l'arxiu de configuraci\u00f3 de Node.js i npm que cont\u00e9 la llista de dependencies, scripts, i altres configuracions.</p> </li> <li> <p><code>README.md</code>: Un arxiu de markdown que sol proporcionar documentaci\u00f3 i informaci\u00f3 sobre el projecte.</p> </li> <li> <p><code>babel.config.js</code>: Arxiu de configuraci\u00f3 per a Babel, que es pot utilitzar per transpilar el codi JavaScript a una versi\u00f3 compatible amb diferents navegadors.</p> </li> <li> <p><code>vue.config.js</code>: Arxiu de configuraci\u00f3 per a Vue CLI, on es poden especificar diferents opcions de configuraci\u00f3 del projecte.</p> </li> </ul> <p>Aquesta estructura \u00e9s bastant est\u00e0ndard, per\u00f2 podria variar lleugerament en funci\u00f3 de les necessitats del projecte i les prefer\u00e8ncies dels desenvolupadors. En projectes m\u00e9s grans o complexos, tamb\u00e9 podries tenir carpetes addicionals per a l'arquitectura, gesti\u00f3 d'estat, serveis, etc.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#us-de-components","title":"\u00das de components","text":"<p>Observem un exemple en el qual creem un component que mostra una taula i l'integrem en la nostra aplicaci\u00f3 principal en <code>VUE3</code>.</p> <p>Clar, aqu\u00ed tens un exemple senzill d'un component amb una taula, i com es pot importar i utilitzar des del component principal en Vue 3.</p> <ol> <li>Crea el teu component de taula:</li> </ol> HTML<pre><code>&lt;!-- TaulaComponent.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Taula de Persones&lt;/h2&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Nom&lt;/th&gt;\n          &lt;th&gt;Edat&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr v-for=\"persona in persones\" :key=\"persona.id\"&gt;\n          &lt;td&gt;{{ persona.id }}&lt;/td&gt;\n          &lt;td&gt;{{ persona.nom }}&lt;/td&gt;\n          &lt;td&gt;{{ persona.edat }}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      persones: [\n        { id: 1, nom: 'Joan', edat: 25 },\n        { id: 2, nom: 'Anna', edat: 30 },\n        { id: 3, nom: 'Pere', edat: 28 },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Estils espec\u00edfics per a aquest component, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <ol> <li>Importa i utilitza el component a la teva p\u00e0gina principal:</li> </ol> HTML<pre><code>&lt;!-- App.vue --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;h1&gt;Aplicaci\u00f3 principal&lt;/h1&gt;\n    &lt;TaulaComponent /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport TaulaComponent from './components/TaulaComponent.vue';\n\nexport default {\n  components: {\n    TaulaComponent,\n  },\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n/* Estils globals de l'aplicaci\u00f3, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li> <p><code>TaulaComponent</code> \u00e9s importat a la p\u00e0gina principal utilitzant la instrucci\u00f3 <code>import</code>.</p> </li> <li> <p>S'afegeix el component <code>TaulaComponent</code> a la secci\u00f3 <code>components</code> de la p\u00e0gina principal. Aix\u00f2 permet utilitzar-lo com un element a la plantilla (<code>&lt;TaulaComponent /&gt;</code>).</p> </li> <li> <p>Dins de la plantilla de <code>App.vue</code>, simplement es col\u00b7loca <code>&lt;TaulaComponent /&gt;</code> on es vol que aparegui la taula.</p> </li> </ul> <p>Aquesta \u00e9s una manera senzilla d'estructurar els components a Vue i d'utilitzar-los a la teva aplicaci\u00f3 principal. Pots repetir aquest proc\u00e9s per afegir i utilitzar altres components segons les teves necessitats.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#data-i-methods","title":"data i methods","text":"<p>En Vue 3, les propietats <code>data</code> i <code>methods</code> s\u00f3n dues seccions clau en la definici\u00f3 d'un component. Aqu\u00ed tens una explicaci\u00f3 de cada una:</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#data","title":"<code>data</code>","text":"<p>La propietat <code>data</code> \u00e9s una funci\u00f3 que retorna un objecte. Aquest objecte cont\u00e9 les dades que es volen utilitzar dins del component. \u00c9s important destacar que, a partir de Vue 3, <code>data</code> ha de ser una funci\u00f3 que retorna l'objecte de dades en lloc d'un objecte directament. Aix\u00f2 \u00e9s perqu\u00e8 cada inst\u00e0ncia del component t\u00e9 les seves pr\u00f2pies dades reactives, i utilitzar una funci\u00f3 assegura que les dades siguin inicialitzades de manera \u00fanica per a cada inst\u00e0ncia del component.</p> <p>Exemple:</p> JavaScript<pre><code>&lt;script&gt;\nexport default {\n  data() {\n    return {\n      missatge: 'Hola des del component',\n      contador: 0,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest exemple, el component t\u00e9 dues propietats de dades (<code>missatge</code> i <code>contador</code>) que poden ser utilitzades a la plantilla i ser reactivament actualitzades.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#methods","title":"<code>methods</code>","text":"<p>La propietat <code>methods</code> \u00e9s un objecte que cont\u00e9 m\u00e8todes que es poden cridar des de la plantilla o dins d'altres m\u00e8todes del component. Aquests m\u00e8todes poden contenir l\u00f2gica de negoci, manipulaci\u00f3 de dades o qualsevol altra funcionalitat que necessitis.</p> <p>Exemple:</p> JavaScript<pre><code>&lt;script&gt;\nexport default {\n  data() {\n    return {\n      contador: 0,\n    };\n  },\n  methods: {\n    incrementar() {\n      this.contador++;\n    },\n    resetejar() {\n      this.contador = 0;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest exemple, el component t\u00e9 dos m\u00e8todes, <code>incrementar</code> i <code>resetejar</code>, que poden ser cridats des de la plantilla o dins d'altres m\u00e8todes del mateix component.</p> <p>Les funcionalitats que es poden aconseguir amb <code>data</code> i <code>methods</code> s\u00f3n fonamentals per al desenvolupament de components en Vue 3. Les dades permeten la gesti\u00f3 de l'estat del component, mentre que els m\u00e8todes ofereixen la capacitat d'executar l\u00f2gica espec\u00edfica en resposta a esdeveniments o altres interaccions.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#propietats-computades","title":"Propietats computades","text":"<p>En Vue.js 3, les propietats computades (computed properties) s\u00f3n valors que es deriven din\u00e0micament a partir d'altres propietats de l'inst\u00e0ncia del component. A difer\u00e8ncia de les dades (<code>data</code>) i els m\u00e8todes (<code>methods</code>), les propietats computades no s\u00f3n funcions que es cridin, sin\u00f3 que es tracten com a propietats i es recalculen autom\u00e0ticament quan alguna de les seves depend\u00e8ncies canvia.</p> <p>Per definir una propietat computada, utilitzes la secci\u00f3 <code>computed</code> dins del teu component. Aqu\u00ed tens un exemple simple per il\u00b7lustrar com funcionen:</p> JavaScript<pre><code>&lt;script&gt;\nexport default {\n  data() {\n    return {\n      radi: 5,\n    };\n  },\n  computed: {\n    area() {\n      return Math.PI * this.radi ** 2;\n    },\n    circumferencia() {\n      return 2 * Math.PI * this.radi;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li>Hi ha una propietat <code>radi</code> dins de <code>data</code>, que \u00e9s la depend\u00e8ncia per a les propietats computades.</li> <li>Les propietats computades, <code>area</code> i <code>circumferencia</code>, s\u00f3n declarades dins de la secci\u00f3 <code>computed</code>. Aquestes propietats s\u00f3n calculades a partir del valor de <code>radi</code>.</li> <li>Quan el valor de <code>radi</code> canvia, les propietats computades es recalculen autom\u00e0ticament.</li> </ul> <p>Aix\u00ed, a la plantilla, pots fer servir les propietats computades de la mateixa manera que ho fas amb qualsevol altra propietat de dades:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Radi: {{ radi }}&lt;/p&gt;\n    &lt;p&gt;\u00c0rea: {{ area }}&lt;/p&gt;\n    &lt;p&gt;Circumfer\u00e8ncia: {{ circumferencia }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> <p>En aquest exemple, cada vegada que es modifica el valor de <code>radi</code>, les propietats computades <code>area</code> i <code>circumferencia</code> es recalcularan autom\u00e0ticament, i les actualitzacions es reflectiran a la plantilla.</p> <p>Les propietats computades s\u00f3n especialment \u00fatils per a c\u00e0lculs derivats, filtrat i manipulaci\u00f3 de dades en una manera que mant\u00e9 la l\u00f2gica clara i eficient.</p>"},{"location":"DWEC_UD6_VUE_1rs_passos/#watchers","title":"Watchers","text":"<p>Els \"watchers\" en Vue.js s\u00f3n una funcionalitat que et permeten observar canvis en les propietats de les inst\u00e0ncies de Vue i executar l\u00f2gica personalitzada en resposta a aquests canvis. S\u00f3n \u00fatils quan vols reaccionar a canvis espec\u00edfics en dades de la teva aplicaci\u00f3 i realitzar accions com ara fer peticions a l'API, actualitzar altres propietats o realitzar qualsevol acci\u00f3 personalitzada.</p> <p>Per utilitzar un \"watcher\" en una inst\u00e0ncia de Vue, pots utilitzar la propietat <code>watch</code>. Aqu\u00ed tens un exemple senzill:</p> JavaScript<pre><code>const vm = new Vue({\n  data() {\n    return {\n      message: 'Hola, m\u00f3n!',\n    };\n  },\n  watch: {\n    message(nouMissatge, anticMissatge) {\n      console.log(`Missatge canviat de \"${anticMissatge}\" a \"${nouMissatge}\"`);\n      // Realitza altres accions en resposta al canvi de missatge\n    },\n  },\n});\n</code></pre> <p>En aquest exemple, estem observant la propietat <code>message</code> i, quan aquesta propietat canvia, s'executa la funci\u00f3 del \"watcher\". La funci\u00f3 del \"watcher\" rep dos arguments: el nou valor i l'antic valor de la propietat observada.</p> <p>Pots utilitzar els \"watchers\" per a moltes tasques, com validar dades abans que es canvi\u00efn, gestionar animacions, o fins i tot activar canvis en altres propietats. Aqu\u00ed tens un exemple m\u00e9s avan\u00e7at:</p> JavaScript<pre><code>const vm = new Vue({\n  data() {\n    return {\n      counter: 0,\n    };\n  },\n  watch: {\n    counter(nouValor, anticValor) {\n      if (nouValor &gt; 5) {\n        this.counter = 5;  // Limita el valor a 5\n      }\n      if (nouValor % 2 === 0) {\n        this.$emit('counterEven', nouValor);  // Llan\u00e7a un esdeveniment quan el nombre \u00e9s parell\n      }\n    },\n  },\n  methods: {\n    incrementCounter() {\n      this.counter++;\n    },\n  },\n});\n</code></pre> <p>Aquest \u00e9s un exemple senzill que mostra com pots utilitzar un \"watcher\" per gestionar el valor d'una propietat (<code>counter</code>) i realitzar accions basades en aquest valor. Els \"watchers\" s\u00f3n una eina potent en Vue.js que et permeten controlar i reaccionar a canvis en temps d'execuci\u00f3.</p>"},{"location":"DWEC_UD6_vue_cicle_vida/","title":"Cicle de vida","text":""},{"location":"DWEC_UD6_vue_cicle_vida/#cicle-de-vida","title":"Cicle de vida","text":"<p>El cicle de vida d'un component en Vue 3 fa refer\u00e8ncia a les diferents etapes o fases per les quals passa un component des de la seva creaci\u00f3 fins a la seva destrucci\u00f3. Aquestes etapes permeten als desenvolupadors executar codi en moments espec\u00edfics del cicle de vida del component. Aqu\u00ed tens una descripci\u00f3 general de les principals etapes del cicle de vida d'un component en Vue 3:</p> <p></p>"},{"location":"DWEC_UD6_vue_cicle_vida/#creacio-creation","title":"Creaci\u00f3 (Creation):","text":"<ul> <li>beforeCreate: Aquest esdeveniment es dispara abans que les inst\u00e0ncies del component siguin inicialitzades.</li> <li>created: Es dispara despr\u00e9s que s'ha creat l'inst\u00e0ncia del component. Les dades, m\u00e8todes, observadors i esdeveniments han estat inicialitzats i vinculats.</li> </ul>"},{"location":"DWEC_UD6_vue_cicle_vida/#actualitzacio-updating","title":"Actualitzaci\u00f3 (Updating):","text":"<ul> <li>beforeMount: Es dispara abans que el component sigui muntat (mounted) al DOM. En aquest punt, el template ja s'ha compilat a una funci\u00f3 de renderitzaci\u00f3.</li> <li>mounted: Es dispara quan el component s'ha muntat al DOM. \u00c9s un bon lloc per a fer operacions que necessitin accedir als elements del DOM.</li> <li>beforeUpdate: Es dispara abans que les dades reatives del component es reprocessin i el DOM es torni a renderitzar.</li> <li>updated: Es dispara quan les dades reatives es reprocessen i el DOM s'actualitza.</li> </ul>"},{"location":"DWEC_UD6_vue_cicle_vida/#destruccio-destroying","title":"Destrucci\u00f3 (Destroying):","text":"<ul> <li>beforeUnmount: Es dispara abans que el component sigui desmuntat del DOM.</li> <li>unmounted: Es dispara quan el component s'ha desmuntat del DOM. \u00c9s un bon moment per alliberar recursos i realitzar tasques de neteja.</li> </ul>"},{"location":"DWEC_UD6_vue_cicle_vida/#errors-error-handling","title":"Errors (Error Handling):","text":"<ul> <li>errorCaptured: Es dispara quan es produeix un error en qualsevol dels fills d'aquest component. Es pot utilitzar per gestionar i gestionar errors a nivell de component.</li> </ul>"},{"location":"DWEC_UD6_vue_cicle_vida/#composicio-composition-api","title":"Composici\u00f3 (Composition API):","text":"<ul> <li>setup: Aquest esdeveniment permet utilitzar la nova Composici\u00f3 API de Vue 3. S'executa abans de totes les altres fases i \u00e9s on es configuren els m\u00e8todes, dades i altres elements del component.</li> </ul> <p>Aquestes etapes permeten als desenvolupadors controlar el comportament del component en diferents moments del seu cicle de vida. Per exemple, es podria utilitzar l'esdeveniment <code>created</code> per inicialitzar dades o carregar recursos, o l'esdeveniment <code>beforeUnmount</code> per alliberar recursos abans que el component sigui desmuntat.</p>"},{"location":"DWEC_UD6_vue_cicle_vida/#mounted","title":"mounted","text":"<p>Aqu\u00ed tens un exemple d'un component simple que utilitza l'esdeveniment de cicle de vida <code>mounted</code> en Vue 3. En aquest exemple, es fa una crida a una API quan el component s'ha muntat al DOM per obtenir dades i actualitzar una propietat del component:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Dades de l'API&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for=\"item in dadesAPI\" :key=\"item.id\"&gt;{{ item.nom }}&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      dadesAPI: [],\n    };\n  },\n  mounted() {\n    // L'esdeveniment mounted es dispara quan el component s'ha muntat al DOM\n    // Fem una crida a una API o realitzem altres operacions aqu\u00ed\n    this.obtenirDadesAPI();\n  },\n  methods: {\n    obtenirDadesAPI() {\n      // Simulem una crida a una API per obtenir dades\n      // En una aplicaci\u00f3 real, aix\u00f2 seria una crida real a una API\n      setTimeout(() =&gt; {\n        this.dadesAPI = [\n          { id: 1, nom: 'Element 1' },\n          { id: 2, nom: 'Element 2' },\n          { id: 3, nom: 'Element 3' },\n        ];\n      }, 1000); // Simulem un retard de 1 segon\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n/* Estils espec\u00edfics per a aquest component, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li>Quan el component es munta al DOM, l'esdeveniment <code>mounted</code> s'activa autom\u00e0ticament.</li> <li>Dins de la funci\u00f3 <code>mounted</code>, cridem el m\u00e8tode <code>obtenirDadesAPI</code> que simula una crida a una API per obtenir dades.</li> <li>Les dades obtingudes de la crida a l'API s'assignen a la propietat <code>dadesAPI</code>, i aquesta propietat s'utilitza a la plantilla per mostrar els elements de la llista.</li> </ul> <p>Aquest patr\u00f3 \u00e9s com\u00fa quan vols realitzar accions espec\u00edfiques, com ara crides a API, manipulaci\u00f3 del DOM o altres operacions, despr\u00e9s que el component s'ha muntat al DOM.</p>"},{"location":"DWEC_UD6_vue_databinding/","title":"Data binding","text":""},{"location":"DWEC_UD6_vue_databinding/#que-es-data-binding","title":"Que \u00e9s data binding?","text":"<p>Data binding</p> <p>En Vue.js 3, el \"data binding\" (vinculaci\u00f3 de dades) es refereix a la capacitat de mantenir sincronitzats els dades entre el model (la capa de dades) i la vista (la capa de presentaci\u00f3). Vue.js facilita aquest proc\u00e9s mitjan\u00e7ant un sistema de reactivitat que permet actualitzar autom\u00e0ticament la interf\u00edcie d'usuari quan les dades subjacents canvien, i viceversa.</p> <p>En el context de Vue.js 3, hi ha dos tipus principals de data binding:</p>"},{"location":"DWEC_UD6_vue_databinding/#one-way-binding-vinculacio-unidireccional","title":"One-Way Binding (Vinculaci\u00f3 Unidireccional):","text":"<ul> <li> <p>Interpolaci\u00f3 (Interpolation): Pots usar la sintaxi de dobles claus <code>{{ }}</code> per realitzar la vinculaci\u00f3 unidireccional de dades des del model a la vista. Per exemple:</p> HTML<pre><code>&lt;p&gt;{{ message }}&lt;/p&gt;\n</code></pre> <p>On <code>message</code> \u00e9s una propietat en el model de dades.</p> </li> </ul>"},{"location":"DWEC_UD6_vue_databinding/#two-way-binding-vinculacio-bidireccional","title":"Two-Way Binding (Vinculaci\u00f3 Bidireccional):","text":"<ul> <li> <p>v-model: Aquesta directiva s'utilitza per aconseguir la vinculaci\u00f3 bidireccional entre un input i una propietat en el model. Per exemple:</p> HTML<pre><code>&lt;input v-model=\"message\"&gt;\n</code></pre> <p>En aquest cas, qualsevol canvi a l'input actualitzar\u00e0 la propietat <code>message</code> en el model, i qualsevol canvi en <code>message</code> en el model tamb\u00e9 es reflectir\u00e0 a l'input.</p> </li> </ul> <p>Vue.js utilitza un sistema de reactivitat basat en l'objecte Proxy per detectar canvis en les dades i actualitzar autom\u00e0ticament les vistes afectades. Aix\u00f2 significa que no necessites preocupar-te de manipular manualment el DOM; Vue ho fa per tu.</p>"},{"location":"DWEC_UD6_vue_databinding/#unidireccional","title":"Unidireccional","text":"<p>Entesos. Aqu\u00ed tens un exemple b\u00e0sic de data binding en una taula amb Vue 3 utilitzant la directiva <code>v-for</code>:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Exemple de Data Binding en una Taula amb Vue 3&lt;/h2&gt;\n\n    &lt;!-- Taula utilitzant v-for per iterar sobre l'array de dades --&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Nom&lt;/th&gt;\n          &lt;th&gt;Edat&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr v-for=\"persona in personas\" :key=\"persona.id\"&gt;\n          &lt;td&gt;{{ persona.id }}&lt;/td&gt;\n          &lt;td&gt;{{ persona.nom }}&lt;/td&gt;\n          &lt;td&gt;{{ persona.edat }}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      personas: [\n        { id: 1, nom: 'Joan', edat: 25 },\n        { id: 2, nom: 'Anna', edat: 30 },\n        { id: 3, nom: 'Pere', edat: 28 },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Estils espec\u00edfics per a aquest component, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li> <p>La propietat <code>personas</code> en <code>data</code> cont\u00e9 un array d'objectes, cadascun representant una persona amb <code>id</code>, <code>nom</code>, i <code>edat</code>.</p> </li> <li> <p>S'utilitza la directiva <code>v-for</code> per iterar sobre l'array de <code>personas</code> i crear din\u00e0micament les files de la taula.</p> </li> <li> <p><code>:key=\"persona.id\"</code> s'utilitza per proporcionar una clau \u00fanica a cada fila, el que ajuda a Vue a fer un seguiment eficient dels elements durant les actualitzacions.</p> </li> </ul> <p>Cada cop que canvies les dades a l'array <code>personas</code>, la taula es actualitzar\u00e0 autom\u00e0ticament gr\u00e0cies al sistema de reactivitat de Vue. Aquest \u00e9s un exemple b\u00e0sic, i pots expandir-lo segons les necessitats espec\u00edfiques de la teva aplicaci\u00f3.</p>"},{"location":"DWEC_UD6_vue_databinding/#directiva-v-bind","title":"Directiva <code>v-bind:</code>","text":"<p>L'exemple a continuaci\u00f3 mostra com utilitzar la directiva <code>v-bind</code> en Vue 3 per enlla\u00e7ar din\u00e0micament els atributs d'un element HTML:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Exemple de v-bind en Vue 3&lt;/h2&gt;\n\n    &lt;!-- Utilitzant v-bind per enlla\u00e7ar din\u00e0micament l'atribut 'href' --&gt;\n    &lt;a :href=\"url\" target=\"_blank\"&gt;Enlla\u00e7 Extern&lt;/a&gt;\n\n    &lt;!-- Utilitzant v-bind per enlla\u00e7ar din\u00e0micament l'estil 'color' --&gt;\n    &lt;p :style=\"{ color: textColor }\"&gt;Aquest text t\u00e9 un color din\u00e0mic.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      url: 'https://www.example.com',\n      textColor: 'blue',\n    };\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Estils espec\u00edfics per a aquest component, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li> <p>Utilitzem <code>:href=\"url\"</code> per enlla\u00e7ar din\u00e0micament l'atribut <code>href</code> d'un element <code>&lt;a&gt;</code>. Aix\u00f2 fa que l'enlla\u00e7 apunti a la URL continguda a la variable <code>url</code>.</p> </li> <li> <p>Utilitzem <code>:style=\"{ color: textColor }\"</code> per enlla\u00e7ar din\u00e0micament l'estil <code>color</code> d'un element <code>&lt;p&gt;</code>. Aix\u00f2 fa que el color del text sigui din\u00e0mic, canviant segons el valor contingut a la variable <code>textColor</code>.</p> </li> </ul> <p>Aquests s\u00f3n exemples senzills, per\u00f2 <code>v-bind</code> pot ser utilitzat per enlla\u00e7ar din\u00e0micament gaireb\u00e9 qualsevol atribut o propietat d'un element HTML o component de Vue. Pots fer servir expressions, variables, o fins i tot objectes o arrays per definir el valor que es vincula.</p> <p>v-bind: i :</p> <p>En Vue 3, <code>v-bind:</code> \u00e9s equivalent a utilitzar el modificador curt <code>:</code>. Ambdues formes s\u00f3n utilitzades per aplicar la directiva <code>v-bind</code>. </p> <p>Per exemple, aquestes dues declaracions s\u00f3n equivalents:</p> HTML<pre><code>&lt;!-- Utilitzant v-bind: --&gt;\n&lt;a v-bind:href=\"url\"&gt;Enlla\u00e7 Extern&lt;/a&gt;\n\n&lt;!-- Utilitzant : (modificador cort) --&gt;\n&lt;a :href=\"url\"&gt;Enlla\u00e7 Extern&lt;/a&gt;\n</code></pre> <p>Ambdues maneres produeixen el mateix resultat i s\u00f3n comunes en la comunitat de desenvolupadors de Vue. La versi\u00f3 amb <code>:</code> (modificador cort) \u00e9s m\u00e9s concisa i \u00e9s molt utilitzada en la pr\u00e0ctica. Pots triar la forma que trobis m\u00e9s llegible o amb la qual et sentis m\u00e9s c\u00f2mode.</p>"},{"location":"DWEC_UD6_vue_databinding/#bidireccional","title":"Bidireccional","text":"<p>Segur! Aqu\u00ed tens un exemple senzill d'\u00fas de la directiva <code>v-model</code> en un component de Vue 3 amb un element <code>&lt;input&gt;</code>:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Exemple de v-model en Vue 3 amb un Input&lt;/h2&gt;\n\n    &lt;!-- Utilitzant v-model amb un input --&gt;\n    &lt;label for=\"inputText\"&gt;Introdueix un text:&lt;/label&gt;\n    &lt;input v-model=\"text\" id=\"inputText\" type=\"text\" /&gt;\n    &lt;p&gt;Text introdu\u00eft: {{ text }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      text: '',\n    };\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Estils espec\u00edfics per a aquest component, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li> <p>Utilitzem <code>v-model=\"text\"</code> a l'input per establir una vinculaci\u00f3 bidireccional amb la variable <code>text</code> del <code>data</code> del component. Aix\u00f2 significa que qualsevol canvi a l'input actualitzar\u00e0 autom\u00e0ticament la variable <code>text</code> i viceversa.</p> </li> <li> <p>Mostrem el valor actual de <code>text</code> a la p\u00e0gina amb la interpolaci\u00f3 <code>{{ text }}</code>.</p> </li> </ul> <p>Aquesta \u00e9s una forma senzilla d'utilitzar <code>v-model</code> amb un input, i aquesta directiva tamb\u00e9 es pot utilitzar amb altres tipus d'elements com ara checkboxes, radios i selects. La directiva <code>v-model</code> proporciona una manera concisa i convenient de gestionar l'estat dels formularis en les aplicacions Vue.</p>"},{"location":"DWEC_UD6_vue_pas_dades/","title":"Pas de dades","text":""},{"location":"DWEC_UD6_vue_pas_dades/#pas-de-dades-dun-component-pare-a-fill","title":"Pas de dades d'un component pare a fill","text":"<p>A continuaci\u00f3 es mostra un exemple en el que la informaci\u00f3 de les dades per a emplenar una taula est\u00e0 en el component <code>arrel o pare</code> i les passem al component <code>fill</code> per a que les mostre.</p> <p>Crea el teu component de taula:</p> HTML<pre><code>&lt;!-- TaulaComponent.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Taula de Persones&lt;/h2&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Nom&lt;/th&gt;\n          &lt;th&gt;Edat&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr v-for=\"persona in persones\" :key=\"persona.id\"&gt;\n          &lt;td&gt;{{ persona.id }}&lt;/td&gt;\n          &lt;td&gt;{{ persona.nom }}&lt;/td&gt;\n          &lt;td&gt;{{ persona.edat }}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    persones: Array,\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Estils espec\u00edfics per a aquest component, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>Importa i utilitza el component a la teva p\u00e0gina principal i passa les dades com a propietat:</p> HTML<pre><code>&lt;!-- App.vue --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;h1&gt;Aplicaci\u00f3 principal&lt;/h1&gt;\n    &lt;TaulaComponent :persones=\"dadesPersones\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport TaulaComponent from './components/TaulaComponent.vue';\n\nexport default {\n  components: {\n    TaulaComponent,\n  },\n  data() {\n    return {\n      dadesPersones: [\n        { id: 1, nom: 'Joan', edat: 25 },\n        { id: 2, nom: 'Anna', edat: 30 },\n        { id: 3, nom: 'Pere', edat: 28 },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n/* Estils globals de l'aplicaci\u00f3, si \u00e9s necessari */\n&lt;/style&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li> <p>S'ha afegit una propietat <code>persones</code> al component <code>TaulaComponent</code> utilitzant la clau <code>props</code>. Aquesta propietat ser\u00e0 utilitzada per mostrar les dades a la taula.</p> </li> <li> <p>A l'aplicaci\u00f3 principal, s'ha creat una propietat <code>dadesPersones</code> a <code>data</code> i s'ha passat aquesta propietat com a propietat al component fill utilitzant la sintaxi <code>:persones=\"dadesPersones\"</code>.</p> </li> </ul> <p>Ara, el component de taula rep les dades com a propietat i es pot utilitzar d'aquesta manera per tal de passar dades entre components a Vue.</p>"},{"location":"DWEC_UD6_vue_pas_dades/#pas-de-dades-dun-component-fill-a-un-component-pare","title":"Pas de dades d'un component fill a un component pare","text":"<p>A Vue.js, per passar dades d'un component fill a un component pare, normalment es fa utilitzant esdeveniments (events). El component fill emet un esdeveniment, i el component pare escolta aquest esdeveniment per capturar les dades que es transmeten.</p> <p>A continuaci\u00f3, es mostra un exemple senzill d'aquesta din\u00e0mica:</p> <p>Component Fill (<code>FillComponent.vue</code>):</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"enviarDades\"&gt;Enviar Dades&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    enviarDades() {\n      // Simulem alguna acci\u00f3 o dades que es volen transmetre\n      const dades = {\n        missatge: 'Hola desde el fill',\n      };\n\n      // Emitim un esdeveniment anomenat 'dades-enviades' amb les dades com a par\u00e0metre\n      this.$emit('dades-enviades', dades);\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>Component Pare (<code>PareComponent.vue</code>):</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Component Pare&lt;/h2&gt;\n\n    &lt;!-- Afegim el component fill i escoltem l'esdeveniment 'dades-enviades' --&gt;\n    &lt;FillComponent @dades-enviades=\"capturarDades\" /&gt;\n\n    &lt;p&gt;Dades rebudes: {{ dadesRebudes?.missatge }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport FillComponent from './FillComponent.vue';\n\nexport default {\n  components: {\n    FillComponent,\n  },\n  data() {\n    return {\n      dadesRebudes: null,\n    };\n  },\n  methods: {\n    // M\u00e8tode que s'executar\u00e0 quan s'escolti l'esdeveniment 'dades-enviades'\n    capturarDades(dades) {\n      // Dades rebudes del component fill\n      this.dadesRebudes = dades;\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li> <p>En el component fill (<code>FillComponent</code>), quan es fa clic al bot\u00f3, s'emeteix l'esdeveniment <code>dades-enviades</code> amb les dades desitjades.</p> </li> <li> <p>En el component pare (<code>PareComponent</code>), s'afegeix el component fill i es posa un <code>@dades-enviades=\"capturarDades\"</code> per escoltar l'esdeveniment. Quan es produeix l'esdeveniment, s'executa el m\u00e8tode <code>capturarDades</code> que captura les dades i les guarda a la propietat <code>dadesRebudes</code>, que pot ser utilitzada a la plantilla.</p> </li> </ul> <p>Aquest \u00e9s un patr\u00f3 com\u00fa per passar dades dels components fills als components pares en Vue.js.</p>"},{"location":"DWEC_UD6_vue_renderitzat_directives/","title":"Directives de renderitzat","text":""},{"location":"DWEC_UD6_vue_renderitzat_directives/#renderitzat-condicional","title":"Renderitzat condicional","text":"<p>Clar, entenc que prefereixes que la resposta sigui en catal\u00e0. Aqu\u00ed tens l'explicaci\u00f3 del renderitzat condicional en Vue 3:</p> <p>El renderitzat condicional en Vue 3 es basa en mostrar o amagar elements o blocs de codi basant-se en condicions. Pots utilitzar diverses directrius i t\u00e8cniques per aconseguir el renderitzat condicional en Vue 3. Aqu\u00ed tens algunes formes comunes de fer-ho:</p>"},{"location":"DWEC_UD6_vue_renderitzat_directives/#1-directiva-v-if-i-v-else","title":"1. Directiva <code>v-if</code> i <code>v-else</code>","text":"<p>La directiva <code>v-if</code> s'utilitza per renderitzar un element o bloc de codi si una expressi\u00f3 \u00e9s certa. Pots utilitzar <code>v-else</code> per renderitzar un altre element o bloc de codi si l'expressi\u00f3 \u00e9s falsa.</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p v-if=\"mostrarMissatge\"&gt;Hola, aquest missatge es mostra si mostrarMissatge \u00e9s cert.&lt;/p&gt;\n    &lt;p v-else&gt;No es mostrar\u00e0 si mostrarMissatge \u00e9s fals.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      mostrarMissatge: true,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"DWEC_UD6_vue_renderitzat_directives/#2-directiva-v-show","title":"2. Directiva <code>v-show</code>","text":"<p>La directiva <code>v-show</code> tamb\u00e9 s'utilitza per mostrar o amagar elements, per\u00f2 a difer\u00e8ncia de <code>v-if</code>, els elements amb <code>v-show</code> sempre estan presents al DOM, simplement s'oculten o mostren mitjan\u00e7ant CSS.</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p v-show=\"mostrarMissatge\"&gt;Aquest missatge es mostra o amaga segons el valor de mostrarMissatge.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      mostrarMissatge: true,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"DWEC_UD6_vue_renderitzat_directives/#3-renderitzat-condicional-amb-operador-ternari","title":"3. Renderitzat condicional amb operador ternari","text":"<p>Pots utilitzar l'operador ternari en les expressions d'interpolaci\u00f3 a la plantilla per fer el renderitzat condicional d'una manera m\u00e9s concisa.</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;{{ mostrarMissatge ? 'Missatge visible' : 'Missatge amagat' }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      mostrarMissatge: true,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"DWEC_UD6_vue_renderitzat_directives/#4-renderitzat-condicional-amb-v-if-en-una-llista","title":"4. Renderitzat condicional amb <code>v-if</code> en una llista","text":"<p>Pots utilitzar <code>v-if</code> juntament amb <code>v-for</code> per fer el renderitzat condicional en una llista d'elements.</p> HTML<pre><code>&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li v-for=\"item in llistaDItems\" :key=\"item.id\"&gt;\n      &lt;span v-if=\"item.actiu\"&gt;{{ item.nom }}&lt;/span&gt;\n      &lt;span v-else style=\"text-decoration: line-through;\"&gt;{{ item.nom }}&lt;/span&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      llistaDItems: [\n        { id: 1, nom: 'Element 1', actiu: true },\n        { id: 2, nom: 'Element 2', actiu: false },\n        // ...\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>Aquestes s\u00f3n nom\u00e9s algunes de les formes en qu\u00e8 pots fer el renderitzat condicional en Vue 3. La elecci\u00f3 entre elles dependr\u00e0 de la situaci\u00f3 i del comportament espec\u00edfic que vulguis aconseguir a la teva aplicaci\u00f3.</p>"},{"location":"DWEC_UD6_vue_renderitzat_directives/#renderitzar-bucles-amb-v-for","title":"Renderitzar bucles amb v-for","text":"<p>En Vue 3, pots renderitzar bucles amb la directiva <code>v-for</code>. Aquesta directiva t'ajuda a iterar sobre una llista o objecte i renderitzar din\u00e0micament elements a la plantilla. Aqu\u00ed tens un exemple senzill que demostra com utilitzar <code>v-for</code> per renderitzar una llista d'elements:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Llista d'Elements&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for=\"(element, index) in llistaDElements\" :key=\"index\"&gt;\n        {{ index + 1 }}. {{ element.nom }}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      llistaDElements: [\n        { id: 1, nom: 'Element 1' },\n        { id: 2, nom: 'Element 2' },\n        { id: 3, nom: 'Element 3' },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest exemple:</p> <ul> <li>La directiva <code>v-for</code> s'aplica a l'element <code>li</code> per iterar sobre la llista d'elements <code>llistaDElements</code>.</li> <li>La sintaxi <code>(element, index) in llistaDElements</code> indica que es far\u00e0 un bucle sobre cada element de la llista i tamb\u00e9 es proporcionar\u00e0 l'\u00edndex d'aquest element.</li> <li>Amb <code>:key=\"index\"</code>, s'estableix una clau \u00fanica per cada element de la llista. Aix\u00f2 ajuda a Vue a identificar els elements de manera eficient durant les actualitzacions.</li> </ul> <p>Tamb\u00e9 pots utilitzar <code>v-for</code> amb objectes per iterar sobre les seves propietats. Aqu\u00ed tens un exemple:</p> HTML<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Detalls del Producte&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for=\"(valor, clau) in detallsProducte\" :key=\"clau\"&gt;\n        {{ clau }}: {{ valor }}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      detallsProducte: {\n        marca: 'Marca X',\n        model: 'Model Y',\n        preu: '$100',\n      },\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest cas, <code>v-for</code> itera sobre les propietats de l'objecte <code>detallsProducte</code> i mostra el nom de la propietat (<code>clau</code>) i el seu valor (<code>valor</code>).</p> <p>Recorda que \u00e9s important utilitzar una clau \u00fanica amb <code>v-for</code> per garantir un renderitzat eficient i correcte dels elements. La clau \u00e9s especialment important quan est\u00e0s iterant sobre una llista d'elements que pot canviar din\u00e0micament.</p>"},{"location":"DWEC_UD6_vue_tutorials_neoguias/","title":"Pr\u00e0ctiques del tema","text":""},{"location":"DWEC_UD6_vue_tutorials_neoguias/#tutorial-guiat","title":"Tutorial guiat","text":"<p>Segueix el tutorial de Neoguias guiat fins a acabar l'aplicaci\u00f3.</p>"},{"location":"DWEC_UD7_codis_extra/","title":"Exemples de codi","text":""},{"location":"DWEC_UD7_codis_extra/#exemple-de-router-link","title":"Exemple de router link","text":"<p>Per utilitzar <code>router-link</code> en Vue 3, primer cal assegurar-se que has configurat i instal\u00b7lat Vue Router correctament en el teu projecte, com es va indicar en les respostes anteriors. A continuaci\u00f3, et proporcionar\u00e9 un exemple senzill de com utilitzar <code>router-link</code> en Vue 3.</p> <p>Assumim que tens dues vistes (components) anomenades <code>Home</code> i <code>About</code>. Aquest \u00e9s un exemple de com utilitzar <code>router-link</code> per navegar entre aquestes dues vistes:</p> <ol> <li>Crea els components Home i About:</li> </ol> Text Only<pre><code>&lt;!-- Home.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Home&lt;/h2&gt;\n    &lt;p&gt;Contingut de la p\u00e0gina principal&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> Text Only<pre><code>&lt;!-- About.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;About&lt;/h2&gt;\n    &lt;p&gt;Informaci\u00f3 sobre nosaltres&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> <ol> <li>Configura les rutes en el teu fitxer <code>main.js</code>:</li> </ol> JavaScript<pre><code>// main.js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport Home from './components/Home.vue'\nimport About from './components/About.vue'\n\nconst routes = [\n  { path: '/', component: Home },\n  { path: '/about', component: About },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\nconst app = createApp(App);\napp.use(router);\napp.mount('#app');\n</code></pre> <ol> <li>Utilitza <code>router-link</code> en el teu component App.vue:</li> </ol> Text Only<pre><code>&lt;!-- App.vue --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;h1&gt;Vue 3 Router Example&lt;/h1&gt;\n    &lt;!-- Utilitza router-link per navegar entre les vistes --&gt;\n    &lt;router-link to=\"/\"&gt;Home&lt;/router-link&gt;\n    &lt;router-link to=\"/about\"&gt;About&lt;/router-link&gt;\n\n    &lt;!-- Mostrem el contingut de la vista actual --&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'App',\n};\n&lt;/script&gt;\n</code></pre> <p>En aquest exemple, <code>router-link</code> es fa servir per crear enlla\u00e7os que naveguin entre les rutes definides en el teu router. L'atribut <code>to</code> de <code>router-link</code> s'utilitza per especificar la ruta a la qual es vol navegar.</p> <p>Recorda que aquest \u00e9s nom\u00e9s un exemple b\u00e0sic. Pots personalitzar i estilitzar els <code>router-link</code> segons les teves necessitats. La documentaci\u00f3 oficial de Vue Router proporciona m\u00e9s informaci\u00f3 sobre com utilitzar aquest component: Vue Router - router-link.</p>"},{"location":"DWEC_UD7_codis_extra/#exemple-de-router-push","title":"Exemple de router push","text":"<p>Per utilitzar <code>router.push</code> en Vue 3, aix\u00f2 implica fer una navegaci\u00f3 program\u00e0tica a trav\u00e9s del router. A continuaci\u00f3, es mostra un exemple senzill on es fa servir <code>router.push</code> despr\u00e9s d'una certa acci\u00f3 o esdeveniment:</p> <p>Assumim que tens la mateixa configuraci\u00f3 de router i components que s'ha proporcionat en les respostes anteriors (amb les vistes <code>Home</code> i <code>About</code>). Ara, volem fer una navegaci\u00f3 program\u00e0tica des d'una altra part del codi.</p> <ol> <li>Modifica el component <code>Home</code> per afegir un bot\u00f3 de navegaci\u00f3:</li> </ol> Text Only<pre><code>&lt;!-- Home.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Home&lt;/h2&gt;\n    &lt;p&gt;Contingut de la p\u00e0gina principal&lt;/p&gt;\n\n    &lt;!-- Afegim un bot\u00f3 que far\u00e0 la navegaci\u00f3 program\u00e0tica --&gt;\n    &lt;button @click=\"navigateToAbout\"&gt;Anar a About&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    // M\u00e8tode per fer la navegaci\u00f3 program\u00e0tica\n    navigateToAbout() {\n      // Utilitzem router.push per navegar a la ruta /about\n      this.$router.push('/about');\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <ol> <li>Assegura't que el component <code>About</code> \u00e9s el mateix:</li> </ol> Text Only<pre><code>&lt;!-- About.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;About&lt;/h2&gt;\n    &lt;p&gt;Informaci\u00f3 sobre nosaltres&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> <ol> <li>El component <code>App</code> segueix igual:</li> </ol> Text Only<pre><code>&lt;!-- App.vue --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;h1&gt;Vue 3 Router Example&lt;/h1&gt;\n    &lt;router-link to=\"/\"&gt;Home&lt;/router-link&gt;\n    &lt;router-link to=\"/about\"&gt;About&lt;/router-link&gt;\n\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'App',\n};\n&lt;/script&gt;\n</code></pre> <p>Amb aquest exemple, quan es fa clic al bot\u00f3 a la p\u00e0gina <code>Home</code>, el m\u00e8tode <code>navigateToAbout</code> es crida, i utilitzant <code>this.$router.push('/about')</code>, es fa una navegaci\u00f3 program\u00e0tica a la ruta <code>/about</code>.</p> <p>Recordeu que aquest exemple \u00e9s molt b\u00e0sic i potser la vostra aplicaci\u00f3 necessiti una l\u00f2gica m\u00e9s complexa per a les navegacions program\u00e0tiques. La documentaci\u00f3 oficial de Vue Router \u00e9s una excel\u00b7lent refer\u00e8ncia per a m\u00e9s detalls: Vue Router - Programmatic Navigation.</p>"},{"location":"DWEC_UD7_vue_router/","title":"El router de Vue","text":"<p>En Vue 3, el router fa refer\u00e8ncia al router oficial de Vue, anomenat Vue Router. Vue Router \u00e9s una llibreria que s'utilitza per a la navegaci\u00f3 en aplicacions Vue d'una sola p\u00e0gina (SPA). Facilita la gesti\u00f3 de les transicions entre diferents \"p\u00e0gines\" o components en una aplicaci\u00f3 Vue, permetent que els usuaris naveguin entre diferents vistes sense haver de recarregar la p\u00e0gina.</p> <p>Algunes caracter\u00edstiques clau de Vue Router inclouen:</p> <ol> <li> <p>Enrutament Declaratiu: Vue Router permet definir rutes de forma declarativa en lloc de imperativa. Pots emparellar rutes amb components Vue espec\u00edfics, cosa que facilita l'associaci\u00f3 de components amb rutes espec\u00edfiques.</p> </li> <li> <p>Navegaci\u00f3 Basada en Components: Cada ruta pot tenir un component associat, i quan l'usuari navega a aquesta ruta, el component es renderitza a l'\u00e0rea de la interf\u00edcie d'usuari designada per mostrar contingut din\u00e0mic.</p> </li> <li> <p>Navegaci\u00f3 Program\u00e0tica: Pots canviar de ruta program\u00e0ticament mitjan\u00e7ant l'\u00fas de m\u00e8todes proporcionats per Vue Router. Per exemple, pots utilitzar <code>router.push()</code> per navegar a una nova ruta.</p> </li> <li> <p>Par\u00e0metres de Ruta: Vue Router permet definir par\u00e0metres din\u00e0mics en les rutes. Aquests par\u00e0metres poden ser capturats i utilitzats en el component associat a aquesta ruta.</p> </li> <li> <p>Anidament de Rutes: Pots anidar rutes per crear una jerarquia de vistes a la teva aplicaci\u00f3. Aix\u00f2 \u00e9s \u00fatil quan necessites dividir la teva aplicaci\u00f3 en m\u00f2duls o seccions.</p> </li> <li> <p>Navegaci\u00f3 amb Historial: Vue Router gestiona la navegaci\u00f3 amb historial, la qual cosa significa que pots utilitzar la barra de navegaci\u00f3 del navegador per retrocedir i avan\u00e7ar a la pila d'historial.</p> </li> </ol> <p>A continuaci\u00f3, es mostra un exemple b\u00e0sic de com es pot configurar Vue Router en una aplicaci\u00f3 Vue 3:</p> JavaScript<pre><code>// main.js\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { createRouter, createWebHistory } from 'vue-router'\n\nimport Home from './components/Home.vue'\nimport About from './components/About.vue'\n\nconst routes = [\n  { path: '/', component: Home },\n  { path: '/about', component: About }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')\n</code></pre> <p>En aquest exemple:</p> <ul> <li>S'importa <code>createRouter</code> i <code>createWebHistory</code> de <code>vue-router</code>.</li> <li>Es defineixen rutes associant rutes amb components espec\u00edfics.</li> <li>Es crea una inst\u00e0ncia del router amb <code>createRouter</code>.</li> <li>La inst\u00e0ncia del router s'utilitza a l'aplicaci\u00f3 mitjan\u00e7ant <code>app.use(router)</code>.</li> </ul> <p>Amb aquesta configuraci\u00f3, pots comen\u00e7ar a utilitzar el router a la teva aplicaci\u00f3 Vue 3 per gestionar la navegaci\u00f3 entre diferents vistes. Per obtenir m\u00e9s informaci\u00f3 i detalls, consulta la documentaci\u00f3 oficial de Vue Router.</p>"},{"location":"DWEC_UD7_vue_router/#installacio","title":"Instal\u00b7laci\u00f3","text":"<p>Per instal\u00b7lar Vue Router 4 (la versi\u00f3 compatible amb Vue 3), pots utilitzar npm o yarn. Aqu\u00ed tens com fer-ho amb npm:</p> <ol> <li>Crea un projecte Vue 3:    Assegura't que ja tens un projecte Vue 3 creat. Si no, pots utilitzar la seg\u00fcent comanda per crear un projecte amb <code>vue-cli</code>:</li> </ol> Bash<pre><code>vue create nom_del_projecte\n</code></pre> <p>Segueix les instruccions per configurar el projecte.</p> <ol> <li>Instal\u00b7la Vue Router:    Accedeix al directori del teu projecte i executa la seg\u00fcent comanda per instal\u00b7lar Vue Router:</li> </ol> Bash<pre><code>npm install vue-router@4\n</code></pre> <p>Si utilitzes yarn, pots utilitzar aquesta comanda:</p> Bash<pre><code>yarn add vue-router@4\n</code></pre> <ol> <li>Configura Vue Router en el teu projecte:    Despr\u00e9s d'instal\u00b7lar Vue Router, has de configurar-lo en el teu projecte Vue. Obre l'arxiu <code>src/main.js</code> (o el teu arxiu d'entrada principal) i afegeix el seg\u00fcent codi:</li> </ol> JavaScript<pre><code>import { createApp } from 'vue'\n import App from './App.vue'\n import router from './router'\n\n createApp(App).use(router).mount('#app')\n</code></pre> <p>Pots configurar l'arxiu <code>./router/index.js</code> de la seg\u00fcent manera:</p> JavaScript<pre><code>import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\n\n const routes = [\n {\n     path: '/',\n     name: 'home',\n     component: HomeView\n },\n {\n     path: '/about',\n     name: 'about',\n     // route level code-splitting\n     // this generates a separate chunk (about.[hash].js) for this route\n     // which is lazy-loaded when the route is visited.\n     component: () =&gt; import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n }\n ]\n\n const router = createRouter({\n history: createWebHistory(process.env.BASE_URL),\n routes\n })\n\n export default router\n</code></pre> <p>On <code>Home</code> i <code>About</code> s\u00f3n components que has de crear i importar.</p> <p>Ara ja has instal\u00b7lat i configurat Vue Router amb \u00e8xit al teu projecte Vue 3. Pots comen\u00e7ar a utilitzar Vue Router per gestionar les rutes de la teva aplicaci\u00f3. Consulta la documentaci\u00f3 oficial de Vue Router per obtenir m\u00e9s informaci\u00f3 sobre com utilitzar-lo.</p> <p>Tamb\u00e9 pots comprovar abans si el tens instal\u00b7lat mirant l'arxiu <code>package.json</code> i buscant alguna cosa semblant a  JSON<pre><code>\"vue-router\": \"^3.0.3\"\n</code></pre></p> <p>\u00das de la CLI</p> <p>Si tries l'opci\u00f3 d'utilitzar el router de <code>Vue</code> quan crees el projecte des de la CLI genera autom\u00e0ticament tots els arxius necessaris.</p>"},{"location":"DWEC_UD7_vue_router/#redireccions","title":"Redireccions","text":"JSON<pre><code>{\n  path: \"/404\",\n  redirect: \"/error\"\n}\n</code></pre> <p>Quan hi ha un error es carregar\u00e0 autom\u00e0ticamen el component <code>error</code></p> <p>Tamb\u00e9 es pot gastar el nom...</p> JSON<pre><code>{\n  path: \"/404\",\n  redirect: { name: 'error' }\n}\n</code></pre>"},{"location":"DWEC_UD7_vue_router/#router-link","title":"Router Link","text":"<p>Per a navegar a una ruta tenim el <code>router-link</code></p> Text Only<pre><code>&lt;router-link to=\"/about\"&gt;Link a la p\u00e1gina de about&lt;/router-link&gt;\n</code></pre> <p>O b\u00e9 el nom...</p> Text Only<pre><code>&lt;router-link :to=\"{ name: 'user'}\"&gt;User&lt;/router-link&gt;\n</code></pre> <p>Consulta els exemples</p> <p>Tens un exemple m\u00e9s complet en l'apartat d'apunts complementaris del tema</p>"},{"location":"DWEC_UD7_vue_router/#router-push","title":"Router push","text":"<p>Per a navegar a una ruta des d'algun component tenim el <code>router push</code></p> JavaScript<pre><code>// Con la URL de la ruta\nthis.$router.push(\"home\");\n\n// Con el nombre de la ruta\nthis.$router.push({ path: \"home\" });\n</code></pre> <p>Consulta els exemples</p> <p>Tens un exemple m\u00e9s complet en l'apartat d'apunts complementaris del tema</p>"},{"location":"DWEC_UD7_vue_router/#router-replace","title":"Router replace","text":"<p>\u00c9s paregut al push per\u00f2 l'usuari navegar\u00e0 a la ruta i no podr\u00e0 tornar enrere des del bot\u00f3 del navegador...</p> JavaScript<pre><code>// Con la URL de la ruta\nthis.$router.replace(\"home\");\n\n// Con el nombre de la ruta\nthis.$router.replace({ path: \"home\" });\n</code></pre>"},{"location":"DWEC_UD7_vue_router/#rutes-amb-parametres","title":"Rutes amb par\u00e0metres","text":""},{"location":"DWEC_UD7_vue_router/#pas-de-parametres-a-una-ruta","title":"Pas de par\u00e0metres a una ruta","text":"<p>Definim la ruta com sempre...</p> <p>JSON<pre><code>{\n    path: \"/users\",\n    name: \"users\",\n    component: PageUsers\n}\n</code></pre> Passem par\u00e0metres per la ruta aix\u00ed...</p> JavaScript<pre><code>&lt;router.link :to=\"{path: 'users', query: {sort: 'desc'}}\"&gt;&lt;/router-link&gt;\n</code></pre> <p>I els podem llegir aix\u00ed...</p> JavaScript<pre><code>this.$route.query.sort;\n</code></pre>"},{"location":"DWEC_UD7_vue_router/#rutes-dinamiques","title":"Rutes din\u00e0miques","text":"<p>Clar, aqu\u00ed tens un exemple b\u00e0sic d'una ruta en Vue 3 que segueix el patr\u00f3 <code>:id</code>. En una aplicaci\u00f3 Vue, normalment s'utilitza un enrutador com Vue Router per gestionar les rutes. Aqu\u00ed tens un exemple simple amb Vue Router:</p> <ul> <li>Configura la teva aplicaci\u00f3 amb un component que rebr\u00e0 el par\u00e0metre <code>id</code>:</li> </ul> HTML<pre><code>&lt;!-- App.vue --&gt;\n&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'App',\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n&lt;/style&gt;\n</code></pre> <ul> <li>Crea un component per mostrar els detalls de l'element amb el <code>id</code> proporcionat:</li> </ul> HTML<pre><code>&lt;!-- components/ItemDetails.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Detalls de l'element {{ $route.params.id }}&lt;/h2&gt;\n    &lt;!-- Aqu\u00ed col\u00b7locaries el contingut espec\u00edfic de l'element amb l'ID proporcionat --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'ItemDetails',\n};\n&lt;/script&gt;\n</code></pre> <ul> <li>Configura Vue Router a la teva aplicaci\u00f3:</li> </ul> JavaScript<pre><code>// main.js\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport ItemDetails from './components/ItemDetails.vue';\nimport { createRouter, createWebHistory } from 'vue-router';\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    { path: '/', redirect: '/item/1' }, // Redirigeix a la primera p\u00e0gina amb ID 1\n    { path: '/item/:id', component: ItemDetails, props: true },\n  ],\n});\n\nconst app = createApp(App);\napp.use(router);\napp.mount('#app');\n</code></pre> <p>En aquest exemple, la ruta <code>'/item/:id'</code> indicar\u00e0 que el component <code>ItemDetails</code> es renderitzar\u00e0 quan es visiti una URL que segueixi aquest patr\u00f3. El par\u00e0metre <code>id</code> estar\u00e0 disponible al component a trav\u00e9s de <code>$route.params.id</code>. Pots adaptar aquest exemple segons les teves necessitats espec\u00edfiques.</p> <p>Rutes din\u00e0miques</p> <p>Pots provar aquest exemple accedint a una <code>url</code> que tinga la forma que has definint, b\u00e9 directament o amb les opcions de navegar a una ruta que has vist.</p>"},{"location":"DWEC_UD7_vue_router_avan%C3%A7at/","title":"Router avan\u00e7at","text":""},{"location":"DWEC_UD7_vue_router_avan%C3%A7at/#els-guards","title":"Els Guards","text":"<p>En Vue.js, un \"guard\" es refereix a les funcions utilitzades en les rutes d'una aplicaci\u00f3 Vue que fa servir l'enrutador (<code>vue-router</code>). Els guards s\u00f3n funcions que s'executen en cert moments durant la navegaci\u00f3 entre rutes i s'utilitzen per controlar o protegir l'acc\u00e9s a certes rutes segons condicions espec\u00edfiques.</p> <p>Els tres tipus principals de guards en <code>vue-router</code> s\u00f3n:</p> <p>Before Each Guard:    - <code>beforeEach</code>: S'executa abans d'entrar en una nova ruta. Pots utilitzar aquest guard per realitzar verificacions o tasques abans de permetre que l'usuari navegui cap a la seg\u00fcent ruta.</p> JavaScript<pre><code>router.beforeEach((to, from, next) =&gt; {\n  // Alguna l\u00f2gica o verificaci\u00f3 abans de navegar a la nova ruta\n  next(); // Crida a next() per permetre la navegaci\u00f3, o next(false) per impedir-la\n});\n</code></pre> <p>Before Resolve Guard:    - <code>beforeResolve</code>: Similar a <code>beforeEach</code>, per\u00f2 s'executa despr\u00e9s que totes les promeses relacionades amb la navegaci\u00f3 s'hagin resolt.</p> JavaScript<pre><code>router.beforeResolve((to, from, next) =&gt; {\n  // L\u00f2gica despr\u00e9s de resoldre promeses abans de navegar a la nova ruta\n  next();\n});\n</code></pre> <p>After Each Guard:    - <code>afterEach</code>: S'executa despr\u00e9s que el component de la ruta s'hagi renderitzat. Pots utilitzar aquest guard per realitzar tasques despr\u00e9s que s'hagi completat la navegaci\u00f3.</p> JavaScript<pre><code>router.afterEach((to, from) =&gt; {\n  // L\u00f2gica despr\u00e9s que la nova ruta s'hagi renderitzat\n});\n</code></pre> <p>Aquests guards permeten controlar el flux de l'aplicaci\u00f3 abans, durant i despr\u00e9s de la navegaci\u00f3, i s\u00f3n \u00fatils per implementar l\u00f2gica d'autoritzaci\u00f3, redirecci\u00f3 o qualsevol tasca que necessitis realitzar en el proc\u00e9s de canvi de ruta.</p>"},{"location":"DWEC_UD7_vue_router_avan%C3%A7at/#lazy-loading","title":"Lazy Loading","text":"<p>En Vue.js 3, el \"lazy loading\" o c\u00e0rrega diferida del router \u00e9s una caracter\u00edstica que permet carregar els components de les rutes nom\u00e9s quan s\u00f3n necessaris, en comptes de carregar-los tots al principi. Aix\u00f2 pot millorar significativament el rendiment de la teva aplicaci\u00f3, ja que nom\u00e9s carregues el codi necessari per a la vista actual.</p> <p>En el context de Vue Router 4 (les versions m\u00e9s recents en la meva data de coneixement fins a gener de 2022), pots aconseguir la c\u00e0rrega diferida mitjan\u00e7ant la utilitzaci\u00f3 de la funci\u00f3 <code>component</code> dins de la definici\u00f3 de la ruta. Aquesta funci\u00f3 rep un <code>import</code> din\u00e0mic del m\u00f2dul del component que vols carregar, i la c\u00e0rrega diferida es realitza autom\u00e0ticament pel sistema.</p> <p>Aqu\u00ed tens un exemple de com podria ser implementat:</p> JavaScript<pre><code>const routes = [\n  {\n    path: '/home',\n    name: 'Home',\n    component: () =&gt; import(/* webpackChunkName: \"home\" */ '@/views/Home'),\n    // ^ C\u00e0rrega diferida del component Home\n  },\n  {\n    path: '/about',\n    name: 'About',\n    component: () =&gt; import(/* webpackChunkName: \"about\" */ '@/views/About'),\n    // ^ C\u00e0rrega diferida del component About\n  },\n  // ... altres rutes\n];\n</code></pre> <p>En aquest exemple, <code>import(/* webpackChunkName: \"home\" */ '@/views/Home')</code> utilitza <code>import()</code> per carregar din\u00e0micament el m\u00f2dul del component Home. Aquesta sintaxi \u00e9s compatible amb Webpack i altres eines de construcci\u00f3 que permeten la c\u00e0rrega diferida.</p> <p>El comentari <code>/* webpackChunkName: \"home\" */</code> \u00e9s una anotaci\u00f3 que et permet assignar un nom espec\u00edfic al \"chunk\" generat pel Webpack. Aix\u00f2 pot ser \u00fatil per al control de la producci\u00f3.</p> <p>En resum, la c\u00e0rrega diferida del router en Vue.js 3 permet millorar el rendiment de l'aplicaci\u00f3 carregant els components de les rutes nom\u00e9s quan s\u00f3n necessaris, reduint aix\u00ed el temps de c\u00e0rrega inicial.</p>"},{"location":"DWEC_UD8_api_rest_vue/","title":"API RESTful","text":""},{"location":"DWEC_UD8_api_rest_vue/#concepte-api-rest","title":"Concepte API REST","text":"<p>API REST</p> <p>Una API REST (Representational State Transfer) \u00e9s un conjunt d'arquitectures de comunicaci\u00f3 que es defineixen per a la creaci\u00f3, lectura, actualitzaci\u00f3 i eliminaci\u00f3 (CRUD) d'informaci\u00f3. Es basa en els principis d'arquitectura RESTful, que s\u00f3n un conjunt de convencions i restriccions que faciliten la creaci\u00f3 de sistemes web escalables, mantenibles i interoperables.</p> <p>A continuaci\u00f3, es detallen alguns dels principals conceptes associats a les API REST:</p> <ul> <li> <p>Recursos: En una API REST, les dades o les entitats es representen com a recursos, que poden ser qualsevol cosa (com ara un usuari, una publicaci\u00f3, una imatge, etc.). Cada recurs t\u00e9 una URI (Identificador de Recurs Uniforme) \u00fanic que s'utilitza per accedir-hi.</p> </li> <li> <p>Operacions CRUD: Les operacions CRUD (Crear, Llegir, Actualitzar, Esborrar) es mapegen a les operacions HTTP: POST per crear, GET per llegir, PUT o PATCH per actualitzar i DELETE per esborrar. Aquestes operacions es realitzen sobre els recursos identificats per les URIs.</p> </li> <li> <p>Representaci\u00f3: Les representacions dels recursos es poden transferir entre el client i el servidor en diferents formats com ara JSON o XML. La representaci\u00f3 defineix l'estat actual del recurs.</p> </li> <li> <p>Estil arquitect\u00f2nic: REST \u00e9s un estil arquitect\u00f2nic que destaca la simplicitat, la modularitat, l'escalabilitat i la visibilitat. Utilitza les restriccions com la falta d'estat (stateless), la interf\u00edcie uniforme, la capa de client-servidor, etc.</p> </li> <li> <p>Interf\u00edcie uniforme: Les API REST segueixen una interf\u00edcie uniforme que inclou operacions comuns, com ara la identificaci\u00f3 del recurs, la manipulaci\u00f3 a trav\u00e9s de representacions i l'enlla\u00e7 entre recursos.</p> </li> </ul> <p>Les API REST s\u00f3n \u00e0mpliament utilitzades a l'arquitectura de serveis web i s\u00f3n preferides per molts desenvolupadors per la seva simplicitat i efic\u00e0cia. El protocol HTTP \u00e9s la base de moltes implementacions d'API REST, per\u00f2 REST no est\u00e0 lligat a cap protocol espec\u00edfic.</p> <p></p>"},{"location":"DWEC_UD8_api_rest_vue/#els-end-points","title":"Els end-points","text":""},{"location":"DWEC_UD8_api_rest_vue/#pas-1-disseny-de-lapi","title":"Pas 1: Disseny de l'API","text":"<p>Per comen\u00e7ar, defineix quins recursos vols gestionar amb la teva API. En aquest exemple, utilitzarem una aplicaci\u00f3 de gesti\u00f3 de tasques i definirem el recurs \"tasca\".</p>"},{"location":"DWEC_UD8_api_rest_vue/#pas-2-defineix-els-recursos","title":"Pas 2: Defineix els Recursos","text":"<p>Decideix quines propietats tindr\u00e0 cada tasca. En aquest exemple, podem tenir les propietats \"id\", \"nom\", \"descripci\u00f3\" i \"completada\".</p>"},{"location":"DWEC_UD8_api_rest_vue/#pas-3-defineix-les-operacions-crud","title":"Pas 3: Defineix les Operacions CRUD","text":"<p>Associa cada operaci\u00f3 CRUD amb un m\u00e8tode HTTP. Per a la nostra aplicaci\u00f3 de tasques, podr\u00edem tenir:</p> <ul> <li><code>GET /tasques</code>: Obtenir totes les tasques.</li> <li><code>GET /tasques/:id</code>: Obtenir una tasca per la seva ID.</li> <li><code>POST /tasques</code>: Crear una nova tasca.</li> <li><code>PUT /tasques/:id</code>: Actualitzar una tasca per la seva ID.</li> <li><code>DELETE /tasques/:id</code>: Eliminar una tasca per la seva ID.</li> </ul>"},{"location":"DWEC_UD8_api_rest_vue/#pas-4-implementa-els-punts-finals","title":"Pas 4: Implementa els Punts Finals","text":"<p>Exemple en Node</p> <p>A continuaci\u00f3 vos mostre un exemple senzill d'implementaci\u00f3 en Node.js amb Express. La part del back end la fareu en el m\u00f2dul de \"DWES\", per tant no cal que implementeu aquest exemple. Per a simplificar el desenvolupament nosaltres utilitzarem <code>json-server</code>.</p> JavaScript<pre><code>// Importa les dependencies\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// Dades d'exemple\nlet tasques = [\n  { id: 1, nom: 'Comprar al supermercat', descripcio: 'Llet, pa, fruita', completada: false },\n  { id: 2, nom: 'Estudiar per l'examen', descripcio: 'Repasar apunts', completada: false },\n];\n\n// Punt final per obtenir totes les tasques\napp.get('/tasques', (req, res) =&gt; {\n  res.json(tasques);\n});\n\n// Punt final per obtenir una tasca per la seva ID\napp.get('/tasques/:id', (req, res) =&gt; {\n  const tascaId = parseInt(req.params.id);\n  const tasca = tasques.find(t =&gt; t.id === tascaId);\n\n  if (!tasca) {\n    res.status(404).json({ missatge: 'Tasca no trobada' });\n  } else {\n    res.json(tasca);\n  }\n});\n\n// Punt final per crear una nova tasca\napp.post('/tasques', (req, res) =&gt; {\n  const novaTasca = req.body;\n  tasques.push(novaTasca);\n  res.status(201).json(novaTasca);\n});\n\n// Punt final per actualitzar una tasca per la seva ID\napp.put('/tasques/:id', (req, res) =&gt; {\n  const tascaId = parseInt(req.params.id);\n  const tascaIndex = tasques.findIndex(t =&gt; t.id === tascaId);\n\n  if (tascaIndex === -1) {\n    res.status(404).json({ missatge: 'Tasca no trobada' });\n  } else {\n    tasques[tascaIndex] = req.body;\n    res.json(tasques[tascaIndex]);\n  }\n});\n\n// Punt final per eliminar una tasca per la seva ID\napp.delete('/tasques/:id', (req, res) =&gt; {\n  const tascaId = parseInt(req.params.id);\n  tasques = tasques.filter(t =&gt; t.id !== tascaId);\n  res.json({ missatge: 'Tasca eliminada correctament' });\n});\n\n// Inicia el servidor\nconst port = 3000;\napp.listen(port, () =&gt; {\n  console.log(`Servidor en funcionament a http://localhost:${port}`);\n});\n</code></pre> <p>Aquest codi utilitza Express per gestionar les crides i simula l'emmagatzematge de tasques en mem\u00f2ria. Les operacions CRUD es gestionen a trav\u00e9s dels diferents punts finals.</p>"},{"location":"DWEC_UD8_api_rest_vue/#pas-5-prova-la-teva-api","title":"Pas 5: Prova la teva API","text":"<p>Prova els teus punts finals utilitzant eines com Postman, curl o fins i tot creant un frontend interactiu.</p> <ul> <li>Obtenir totes les tasques: <code>GET http://localhost:3000/tasques</code></li> <li>Obtenir una tasca per la seva ID: <code>GET http://localhost:3000/tasques/1</code></li> <li>Crear una nova tasca: <code>POST http://localhost:3000/tasques</code> (amb dades al cos de la petici\u00f3)</li> <li>Actualitzar una tasca per la seva ID: <code>PUT http://localhost:3000/tasques/1</code> (amb dades actualitzades al cos de la petici\u00f3)</li> <li>Eliminar una tasca per la seva ID: <code>DELETE http://localhost:3000/tasques/1</code></li> </ul> <p>Info extra</p> <p>Teniu m\u00e9s informaci\u00f3 en aquest enlla\u00e7.</p> <p>Aclariment</p> <p>Les peticions a la API s'han realitzat amb <code>async/await</code> per\u00f2 qualsevol m\u00e8tode dels estudiats en la unitat <code>AJAX</code> \u00e9s v\u00e0lid.</p>"},{"location":"DWEC_UD8_app_exemple/","title":"Aplicaci\u00f3 d'exemple","text":""},{"location":"DWEC_UD8_app_exemple/#app-exemple","title":"APP exemple","text":"<p>Teniu el codi de la APP disponible en el repositori:</p> <ul> <li>https://github.com/xusodocent/api_rest_ports</li> </ul>"},{"location":"DWEC_UD8_app_exemple/#posada-en-marxa","title":"Posada en marxa","text":"<p>A continuaci\u00f3 vos mostre els passos a seguir per a poder posar la app en marxa.</p> <ul> <li>Clonar o descarregar-se el repositori.</li> <li>Des de dintre del repositori: <code>npm install</code> per a que instal\u00b7le les depend\u00e8ncies.</li> </ul> <p>Dintre del projecte teniu una carpeta anomenada <code>model_backend</code> en la que hi ha un arxiu <code>ports.json</code> d'exemple. Des de dintre de la carpeta heu d'al\u00e7ar el servidor amb <code>json-server ports.json</code> i segurament vos obrir\u00e0 un servidor en localhost. Atents a la url que proporciona:</p> <p></p> <p>url backend</p> <p>En cas que el vostre servidor vos proporcione una URL diferent a la meua, caldr\u00e0 que modifiqueu les url de les crides AJAX a la URL que vos proporcione el vostre servidor.</p> <ul> <li>Poseu en marxa el projecte de VUE, amb <code>npm run serve</code></li> </ul>"},{"location":"DWEC_UD8_app_exemple/#explicacio-de-la-app","title":"Explicaci\u00f3 de la APP","text":"<p>En cas que tot funcione correctament es desplegar\u00e0 una app que mostra una pantalla inicial amb instruccions, i un men\u00fa en el que es mostra informaci\u00f3 de diferents ports de muntanya que obt\u00e9 amb un <code>GET</code>.</p> <p></p> <p>Com es pot comprovar les operacions de <code>CRUD</code> apareixen als botons de mostrar, editar, borrar o afegir.</p> <ul> <li>Amb un <code>GET url/:id</code> obtenim els detalls d'un port.</li> </ul> <p></p> <ul> <li>Amb el bot\u00f3 d'afegir o editar es mostra un formulari per a fer les operacions. Les crides s\u00f3n <code>POST url</code> o <code>PUT url/:id</code>. Per a crear nous ports s'ha implementat una funcionalitat en <code>javascript</code> per a generar la <code>id</code> que en un backend real no haureu de fer.</li> </ul> <p></p>"},{"location":"DWEC_json_serve/","title":"Apunts del tema","text":"<p>Breu Tutorial d'\u00fas de json-server</p> <p><code>json-server</code> \u00e9s una eina que permet crear una API RESTful amb un fitxer JSON com a backend. Aquesta eina simplifica el desenvolupament de prototips i la prova d'aplicacions sense necessitat d'un servidor complet.</p> <p>Pas 1: Instal\u00b7laci\u00f3</p> <p>Assegura't de tenir Node.js i npm instal\u00b7lats. Pots instal\u00b7lar <code>json-server</code> globalment utilitzant la comanda:</p> Bash<pre><code>npm install -g json-server\n</code></pre> <p>Pas 2: Crear un fitxer JSON</p> <p>Crea un fitxer JSON amb les dades que vols utilitzar com a base de dades. Per exemple, crea un fitxer anomenat <code>db.json</code> amb contingut com aquest:</p> JSON<pre><code>{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"Post 1\" },\n    { \"id\": 2, \"title\": \"Post 2\" },\n    { \"id\": 3, \"title\": \"Post 3\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"Comment 1\", \"postId\": 1 },\n    { \"id\": 2, \"body\": \"Comment 2\", \"postId\": 1 },\n    { \"id\": 3, \"body\": \"Comment 3\", \"postId\": 2 }\n  ]\n}\n</code></pre> <p>Pas 3: Executar json-server</p> <p>Executa la seg\u00fcent comanda al directori on es troba el teu fitxer JSON (<code>db.json</code>):</p> Bash<pre><code>json-server --watch db.json\n</code></pre> <p>Aix\u00f2 iniciar\u00e0 un servidor a <code>http://localhost:3000</code> per defecte.</p> <p>Pas 4: Provar l'API</p> <p>Ara tens una API RESTful en execuci\u00f3. Pots fer peticions HTTP a les rutes definides al teu fitxer JSON. Per exemple:</p> <ul> <li>Per obtenir tots els posts: <code>GET http://localhost:3000/posts</code></li> <li>Per obtenir un post espec\u00edfic: <code>GET http://localhost:3000/posts/1</code></li> <li>Per afegir un nou post: <code>POST http://localhost:3000/posts</code> amb el cos de la petici\u00f3 que cont\u00e9 les dades del nou post.</li> </ul> <p>Pas 5: Personalitzaci\u00f3</p> <p>Pots personalitzar les rutes, ports i altres configuracions mitjan\u00e7ant la l\u00ednia de comandes o un fitxer de configuraci\u00f3 <code>json-server.json</code>. Consulta la documentaci\u00f3 oficial per a m\u00e9s opcions.</p> <p>Amb aquest tutorial, has apr\u00e8s com utilitzar <code>json-server</code> per crear r\u00e0pidament una API RESTful per a les teves aplicacions Vue o altres projectes front-end.</p>"},{"location":"DWEC_login_jwt/","title":"Exemple login JWT","text":""},{"location":"DWEC_login_jwt/#jwt","title":"JWT","text":"<p>L'\u00fas de tokens JWT (JSON Web Tokens) per gestionar el proc\u00e9s de login implica diversos passos i pot aportar una capa segura d'autenticaci\u00f3 en una aplicaci\u00f3. Aqu\u00ed tens els passos generals i els conceptes involucrats en la implementaci\u00f3 d'un sistema de login amb tokens JWT:</p> <p>Solicitud d'Inici de Sessi\u00f3 (Login Request):    L'usuari envia les seves credencials (com nom d'usuari i contrasenya) al servidor per autenticar-se. Aquesta informaci\u00f3 es comprova amb les dades emmagatzemades al sistema.</p> <p>Generaci\u00f3 del Token JWT (JWT Generation):    Si les credencials s\u00f3n correctes, el servidor genera un JWT que cont\u00e9 informaci\u00f3 rellevant sobre l'usuari, com l'identificador d'usuari i possiblement altres claims (drets d'acc\u00e9s, temps d'expiraci\u00f3, etc.). Aquest JWT \u00e9s signat amb una clau secreta o privada per assegurar la seva autenticitat.</p> <p>Enviament del Token al Client:    El servidor envia el JWT al client com a part de la resposta a la sol\u00b7licitud d'inici de sessi\u00f3. Aquest token pot ser incrustat en la cap\u00e7alera d'autoritzaci\u00f3 de les sol\u00b7licituds posteriors o emmagatzemat localment pel client.</p> <p>Emmagatzematge del Token al Client (Client-Side Storage):    El client emmagatzema el token. Aix\u00f2 pot ser en una cookie segura o a l'emmagatzematge local (localStorage o sessionStorage), depenent de les necessitats de seguretat i de l'arquitectura de l'aplicaci\u00f3.</p> <p>Inclusi\u00f3 del Token en Sol\u00b7licituds Posteriors:    Amb cada sol\u00b7licitud posterior a recursos protegits, el client inclou el JWT en la cap\u00e7alera d'autoritzaci\u00f3 com a prova que ha estat autenticat.</p> <p>Verificaci\u00f3 del Token al Servei:    El servidor verifica la validesa del JWT amb la seva clau p\u00fablica o compartida. Aix\u00f2 assegura que el token no ha estat alterat i que \u00e9s v\u00e0lid.</p> <p>Processament del JWT al Servei:    Despr\u00e9s de verificar la validesa, el servidor processa la informaci\u00f3 continguda al JWT. Aix\u00f2 pot incloure l'extracci\u00f3 de claims rellevants i la comprovaci\u00f3 dels permisos necessaris per accedir als recursos sol\u00b7licitats.</p> <p>Renovaci\u00f3 del Token (Optional):    Per mantenir la sessi\u00f3 activa, el client pot sol\u00b7licitar un nou JWT abans que l'antic expire. Aix\u00f2 pot ser implementat amb tokens d'actualitzaci\u00f3 o altres mecanismes.</p> <p>Tancament de Sessi\u00f3 (Logout):    Per tancar la sessi\u00f3, el client pot destruir o eliminar el token emmagatzemat. Aix\u00f2 assegura que, fins i tot si alg\u00fa aconsegueix el token, no podran utilitzar-lo despr\u00e9s que l'usuari hagi tancat la sessi\u00f3.</p> <p>L'\u00fas de tokens JWT simplifica la gesti\u00f3 d'autenticaci\u00f3, ja que les dades d'autenticaci\u00f3 es poden emmagatzemar de manera segura al mateix token, i aquest pot ser verificat sense la necessitat de mantenir estats de sessi\u00f3 al servidor. Tot i aix\u00ed, \u00e9s crucial mantenir la seguretat amb pr\u00e0ctiques com l'\u00fas de connexions segures (HTTPS), maneig segur de claus i altres mesures de seguretat.</p> <p></p>"},{"location":"DWEC_login_jwt/#json-server-auth","title":"JSON-SERVER-AUTH","text":"<p>Existeix un m\u00f2dul d'autentificaci\u00f3 per a json-server que et permet simular un sistema de login. Podeu consultar com funciona a aquesta web</p> <p>POSTMAN</p> <p>Llen\u00e7a el servidor tal i com diu la web anterior i feu proves amb POSTMAN per a comprovar com et respon el servidor</p> <p></p>"},{"location":"DWEC_login_jwt/#aplicacio","title":"Aplicaci\u00f3","text":"<p>Teniu l'aplicaci\u00f3 disponible al seg\u00fcent repositori:</p> <p>Aplicaci\u00f3</p> <p>https://github.com/xusodocent/login_jwt_vue</p> <p>Port per al json-server</p> <p>Si intenteu incorporar el sistema de login al vostre projecte haureu de tindre dues inst\u00e0ncies de json-server al port 3000 i no vos funcionar\u00e0. Heu de canviar el port d'una de les dos de la seg\u00fcent forma: <code>json-server arxius.json --port 3001</code></p>"},{"location":"DWEC_login_jwt/#protegir-la-ruta","title":"Protegir la ruta","text":"<p>La forma en que es protegeix una ruta \u00e9s:</p> Text Only<pre><code>{\n    path: '/about',\n    name: 'about',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () =&gt; import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue'),\n    beforeEnter: authMiddleware,\n  }\n</code></pre>"},{"location":"DWEC_login_jwt/#middleware","title":"Middleware","text":"<p>El codi fa \u00fas d'un middleware per a comprovar si la ruta est\u00e0 protegida. El middleware el trobareu en la carpeta middleware.</p> JavaScript<pre><code>import { authService } from '../services/auth.js';\n\nexport const authMiddleware = async (to, from, next) =&gt; {\n  const token = authService.getToken();\n\n  if (!token) {\n    // No hay token, redirigir a la p\u00e1gina de inicio de sesi\u00f3n\n    next('/login');\n  } else {\n    // Token presente, permitir el acceso a la ruta\n    next();\n  }\n};\n</code></pre>"},{"location":"DWEC_login_jwt/#servei","title":"Servei","text":"<p>I a la vegada el middleware fa \u00fas d'un servei per a obtindre el token que el trobareu a <code>../services/auth.js</code>...</p> JavaScript<pre><code>import axios from 'axios';\n\nconst API_URL = 'http://localhost:3000';\n\nexport const authService = {\n  login: async (username, password) =&gt; {\n    const response = await axios.post(`${API_URL}/login`, { \"email\": username, \"password\": password });\n    //await console.log(response.data);\n    const token  = await response.data;\n    //await console.log(token);\n    await localStorage.setItem('token', JSON.stringify(token));\n    return token;\n  },\n  register: async (username, password) =&gt; {\n    const response = await axios.post(`${API_URL}/register`, { \"email\": username, \"password\": password });\n    const token  = await response.data;\n    await localStorage.setItem('token', JSON.stringify(token));\n    return token;\n  },\n  logout: () =&gt; {\n    localStorage.removeItem('token');\n  },\n  getToken: () =&gt; {\n    return localStorage.getItem('token');\n  },\n};\n</code></pre>"},{"location":"DWEC_login_jwt/#comprovacions-del-token-en-un-sistema-real","title":"Comprovacions del token en un sistema real","text":"<p>Enviament token en cap\u00e7aleres</p> <p>Segons com estiga confeccionat el teu servidor podries necessitar enviar el token el les cap\u00e7aleres de les teues peticions al servidor.</p> <p>No est\u00e0 implementat en l'aplicaci\u00f3</p> <p>Aquest apartat \u00e9s una explicaci\u00f3 per a implementar-ho en un sistema real, no en una api de desenvolupament com json-server, per tant no est\u00e0 implementat en l'aplicaci\u00f3 que vos he passat.</p> <p>Per enviar un token JWT des del client implementat en Vue.js a un servidor implementat en Node.js, primer cal gestionar la generaci\u00f3 i emmagatzematge del token al client, i despr\u00e9s enviar-lo com a part de les sol\u00b7licituds HTTP cap al servidor Node.js. A continuaci\u00f3, t'oferir\u00e9 un exemple senzill utilitzant Axios com a client HTTP al costat del client Vue.js i Express com a servidor Node.js.</p> <p>1. Client en Vue.js:</p> <p>Assumirem que ja has implementat l'autenticaci\u00f3 i que tens un token JWT disponible quan l'usuari inicia sessi\u00f3. Aqu\u00ed tens un exemple senzill de com enviar un token amb Axios des de Vue.js:</p> JavaScript<pre><code>// Instal\u00b7la Axios si encara no ho has fet\n// npm install axios\n\n// Importa Axios al teu component Vue\nimport axios from 'axios';\n\n// Exemple de funci\u00f3 per enviar una sol\u00b7licitud amb un token\nfunction enviarSolicitudAmbToken() {\n  const token = 'el_teu_token_jwt_aqui'; // Obtingut despr\u00e9s de l'autenticaci\u00f3\n\n  // Configuraci\u00f3 de l'encap\u00e7alament amb el token\n  const config = {\n    headers: { 'Authorization': `Bearer ${token}` }\n  };\n\n  // Exemple de sol\u00b7licitud amb Axios\n  axios.get('http://localhost:3000/api/ruta_protegida', config)\n    .then(response =&gt; {\n      console.log(response.data);\n    })\n    .catch(error =&gt; {\n      console.error(error);\n    });\n}\n</code></pre> <p>Aquest exemple envia una sol\u00b7licitud GET a <code>http://localhost:3000/api/ruta_protegida</code> amb l'encap\u00e7alament d'autoritzaci\u00f3 que cont\u00e9 el token JWT.</p> <p>2. Servidor en Node.js amb Express:</p> <p>Al servidor Node.js, necessitar\u00e0s un middleware per verificar i gestionar el token. Aqu\u00ed tens un exemple senzill amb Express i el paquet <code>jsonwebtoken</code>:</p> JavaScript<pre><code>// Instal\u00b7la els paquets necessaris\n// npm install express jsonwebtoken\n\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\nconst port = 3000;\n\n// Exemple de ruta protegida que requereix el token JWT\napp.get('/api/ruta_protegida', verificarToken, (req, res) =&gt; {\n  res.json({ message: 'Aquesta \u00e9s una ruta protegida!' });\n});\n\n// Funci\u00f3 de middleware per verificar el token\nfunction verificarToken(req, res, next) {\n  const token = req.headers.authorization;\n\n  if (!token) {\n    return res.status(403).json({ message: 'Acc\u00e9s denegat. Token no proporcionat.' });\n  }\n\n  jwt.verify(token.replace('Bearer ', ''), 'secret_key', (err, decoded) =&gt; {\n    if (err) {\n      return res.status(401).json({ message: 'Token no v\u00e0lid.' });\n    }\n\n    // Desar l'identificador d'usuari (o altres dades) al req per utilitzar-lo m\u00e9s endavant\n    req.userId = decoded.userId;\n    next();\n  });\n}\n\napp.listen(port, () =&gt; {\n  console.log(`Servidor escoltant a http://localhost:${port}`);\n});\n</code></pre> <p>Aquest servidor Express inclou una ruta protegida (<code>/api/ruta_protegida</code>) que verifica el token abans de processar la sol\u00b7licitud. La clau secreta (<code>'secret_key'</code>) utilitzada per signar el token hauria de ser la mateixa que s'utilitza al client per generar el token.</p> <p>Aquest exemple \u00e9s molt b\u00e0sic i es pot adaptar segons les necessitats del teu projecte. \u00c9s important gestionar correctament les claus secretes i assegurar-te que la comunicaci\u00f3 estigui protegida mitjan\u00e7ant HTTPS per garantir la seguretat del teu sistema d'autenticaci\u00f3.</p>"},{"location":"DWEC_projecte_vue/","title":"DWEC projecte vue","text":""},{"location":"DWEC_projecte_vue/#enunciat","title":"Enunciat","text":"<p>El projecte consistir\u00e0 en realitzar una aplicaci\u00f3 RESTful en VUE3 que utilitze els serveis que proporcione un servidor.</p> <p>Per al servidor utilitzarem una FAKE API en <code>json-server</code>. </p> <p>OBLIGATORI <code>json-server</code></p> <p>Com que en aquest m\u00f2dul nom\u00e9s s'avaluar\u00e0 la part de client, necessitem al\u00e7ar de forma \u00e0gil APIs per a desenvolupament. En el m\u00f2dul de <code>Desenvolupament Web en Entorn Servidor</code> ser\u00e0 on estudiareu com implementar la part de servidor de forma m\u00e9s professional. Per a facilitar la correcci\u00f3 ser\u00e0 OBLIGATORI UTILITZAR json-server.</p> <p>La tem\u00e0tica de l'aplicaci\u00f3 ser\u00e0 lliure, jo vos he passat una d'exemple de ports de muntanya per\u00f2 podeu triar qualsevol tema que vos agrade.</p> <p>La funcionalitat b\u00e0sica ha de ser un CRUD complet... es a dir:</p> CRUD <p>CRUD \u00e9s un acr\u00f2nim que fa refer\u00e8ncia a les operacions b\u00e0siques realitzades en bases de dades. Cada lletra en CRUD representa una d'aquestes operacions:</p> <p>Crear (Create): Implica la creaci\u00f3 de nous registres o entrades a la base de dades.</p> <p>Llegir (Read): Implica la lectura o recuperaci\u00f3 d'informaci\u00f3 existent a la base de dades. Aix\u00f2 es refereix a la consulta de dades emmagatzemades.</p> <p>Actualitzar (Update): Implica la modificaci\u00f3 de dades existents a la base de dades. Es fa servir per actualitzar la informaci\u00f3 dels registres existents.</p> <p>Eliminar (Delete): Implica l'eliminaci\u00f3 de registres o dades de la base de dades.</p> <p>Per tant heu de tindre almenys una crida de cada tipus:</p> Crides <p>Suposant que la aplicaci\u00f3 va sobre tasques...</p> <ul> <li>GET /tasques: Obtenir totes les tasques.</li> <li>GET /tasques/:id: Obtenir una tasca per la seva ID.</li> <li>POST /tasques: Crear una nova tasca.</li> <li>PUT /tasques/:id: Actualitzar una tasca per la seva ID.</li> <li>DELETE /tasques/:id: Eliminar una tasca per la seva ID.</li> </ul> <p>L'aplicaci\u00f3 principal haur\u00e0 de tindre almenys un component i un router-view, el component pot ser un men\u00fa...</p> Text Only<pre><code>&lt;template&gt;\n  &lt;Menu /&gt;\n  &lt;router-view/&gt;\n&lt;/template&gt;\n</code></pre> <p>Algunes de les funcionalitats obligat\u00f2ries que ha d'incloure s\u00f3n...</p> <ul> <li>Pas de dades entre pares/fills (events, propietats, etc).</li> <li>Validaci\u00f3 de formularis.</li> <li>Un component ha d'incloure a altre component.</li> <li>Navegaci\u00f3 per les vistes utilitzant $router.push() o <code>&lt;router-link&gt;</code></li> </ul> <p>Entrega</p> <ul> <li>Caldr\u00e0 entregar un v\u00eddeo breu explicant les parts m\u00e9s importants del projecte. </li> <li>Pujar el codi a algun repositori o entregar un <code>*.zip</code> amb el codi (sense la carpeta node_modules).</li> <li>Entregar l'arxiu <code>*.json</code> utlitzat per llen\u00e7ar la fake api.</li> </ul>"},{"location":"UD2_Prac_DOM/","title":"Explicaci\u00f3","text":"<p>Per a que les funcions del DOM puguen accedir correctament als nodes, cal que l'arbre del DOM estiga creat. En el moment en que el navegador obri la p\u00e0gina no es crea immediatament el DOM, necessita un temps de computaci\u00f3. Per tal d'evitar errades has d'incloure el teu codi <code>JS</code> dintre de la seg\u00fcent funci\u00f3:</p> JavaScript<pre><code>window.onload = function() {\n    //el teu codi ac\u00ed\n} \n</code></pre>"},{"location":"UD2_Prac_DOM/#exercici-1","title":"Exercici 1","text":"<p>Baixa't la plantilla seg\u00fcent i fes les seg\u00fcents tasques:</p> <ul> <li>Trau un alert informant del n\u00famero d'enlla\u00e7os que hi ha</li> <li>Modifica din\u00e0micament la imatge del logo</li> <li>Modifica din\u00e0micament els textos del men\u00fa principal</li> <li>Elimina din\u00e0micament la part dels <code>favorite links</code>.</li> </ul>"},{"location":"UD2_Prac_DOM/#exercici-2","title":"Exercici 2","text":"<p>Baixa't la plantilla seg\u00fcent i fes les seg\u00fcents tasques:</p> <ul> <li>Canvia din\u00e0micament el text del men\u00fa principal i els men\u00fas secundaris.</li> <li>Canvia el color de la lletra dels men\u00fas din\u00e0micament.</li> <li>Esborra el contingut del <code>&lt;div&gt;</code> que t\u00e9 per <code>id=\"content\"</code> i fes que apareguen tres paragrafs predefinits per tu.</li> </ul> <p>Has de fer l'exercici utilitzant innerHTML per a modificar el contingut</p>"},{"location":"UD2_Prac_DOM/#exercici-3","title":"Exercici 3","text":"<p>Baixa't la plantilla seg\u00fcent i fes les seg\u00fcents tasques:</p> <ul> <li>Canvia din\u00e0micament el text del men\u00fa principal i els men\u00fas secundaris.</li> <li>Canvia el color de la lletra dels men\u00fas din\u00e0micament fent \u00fas d'un canvi de classe.</li> <li>Esborra el contingut del <code>&lt;div&gt;</code> que t\u00e9 per <code>id=\"content\"</code> i fes que apareguen tres paragrafs predefinits per tu.</li> </ul> <p>Has de fer l'exercici sense utilitzar innerHTML per a modificar el contingut</p>"},{"location":"UD2_Prac_DOM/#exercici-4","title":"Exercici 4","text":"<p>Baixa't la plantilla seg\u00fcent i fes les seg\u00fcents tasques:</p> <ul> <li>Esborra el contingut del <code>&lt;div&gt;</code> que t\u00e9 per <code>id=\"content\"</code> i fes que aparega una imatge aleat\u00f2ria cada vegada que carregues la p\u00e0gina.</li> </ul> <p>Has de fer l'exercici utilitzant innerHTML per a modificar el contingut</p>"},{"location":"UD2_Prac_DOM/#exercici-5","title":"Exercici 5","text":"<p>Baixa't la plantilla seg\u00fcent i fes les seg\u00fcents tasques:</p> <ul> <li>Fes que aparega una taula amb el nom de 5 paissos i la seua capital. Els valors estaran guardats en un o v\u00e0rios vectors.</li> </ul> <p>Has de fer l'exercici utilitzant innerHTML per a modificar el contingut</p>"},{"location":"UD2_Prac_DOM/#exercici-6","title":"Exercici 6","text":"<p>Baixa't la plantilla seg\u00fcent i fes les seg\u00fcents tasques:</p> <ul> <li>Fes que aparega un rellotge digital a la web.</li> </ul> <p>Has de fer l'exercici utilitzant innerHTML per a modificar el contingut</p> <p>Tens la soluci\u00f3 ac\u00ed per a generar el rellotge. Comprova com la propia soluci\u00f3 fa \u00fas de les funcions del DOM.</p>"},{"location":"UD2_Prac_Events/","title":"1. Exercici","text":"<p>Un nutricionista et demana que programes una funcionalitat per a la seva aplicaci\u00f3 web de dissenyar men\u00fas. En concret et demana afegir una funcionalitat per a fer amanides saludables aleat\u00f2ries.</p> <p>Per a tal funcionalitat necessites un bot\u00f3 de <code>Comen\u00e7ar</code>. Quan polsem el bot\u00f3 s'esborra tot el contingut central de la web i han d'apareixer tres botons.</p> <ul> <li>Afegir verdolaga</li> <li>Afegir proteines</li> <li>Afegir alinyament</li> </ul> <p>Cada vegada que polses un bot\u00f3 ha d'afegir una xicoteta imatge d'un dels productes (aleatori). Pots afegir tants productes com vullgues.</p> <p>Quan fem doble click sobre la imatge ha de poder llevar-se. I tamb\u00e9 hi haur\u00e0 un bot\u00f3 per a netejar tots els productes i deixar-la en blanc.</p>"},{"location":"UD2_Prac_Events/#2-exercici","title":"2. Exercici","text":"<p>Et demanen una funcionalitat per a un aplicaci\u00f3 que ser\u00e0 gastada en classes de rep\u00e0s de prim\u00e0ria.</p> <p>Hi han quatre nivells, que es triaran mitjan\u00e7ant un bot\u00f3. Segons el nivell es generar\u00e0 una taula de tantes files i columnes com el n\u00famero del nivell.</p> <p>La taula ha de tindre les cel.les d'un color, per\u00f2 en passar per sobre d'una cel.la ha de canviar el color (no per CSS, per events). En la taula hi hauran banderetes en miniatura de diferents estats, i en fer clic sobre una cel.la apareixer\u00e0 el nom de la capital en un alert.</p>"},{"location":"practicaJSbasic/","title":"Pr\u00e0ctica - Javascript b\u00e0sic","text":""},{"location":"practicaJSbasic/#exercici-1","title":"Exercici 1","text":"<p>Fes un programa que demane la nota d'un alumne i et responga la qualificaci\u00f3 que ha obt\u00e9s (insuficient, suficient, b\u00e9, notable, excel\u00b7lent). Tamb\u00e9 ha de donar un av\u00eds en cas que la nota introduida no siga v\u00e0lida.</p>"},{"location":"practicaJSbasic/#exercici-2","title":"Exercici 2","text":"<p>Fes un programa que et mostre el valor m\u00ednim i m\u00e0xim d'un vector de 15 n\u00fameros sencers, sense utilitzar cap funci\u00f3 espec\u00edfica.</p>"},{"location":"practicaJSbasic/#exercici-3","title":"Exercici 3","text":"<p>Fes un programa que et demane l'al\u00e7ada i el pes i et responga quin \u00e9s l'estat del pacient segons el seu IMC. No cal fer formulari, pots assignar directament valor a les variables o utilitzar un prompt.</p> <p>F\u00f2rmula i taula d'estats;</p>"},{"location":"practicaJSbasic/#exercici-4","title":"Exercici 4","text":"<p>Ordena un vector de 15 nombres sencers.</p>"},{"location":"practicaJSbasic/#exercici-4_1","title":"Exercici 4","text":"<p>Fes un programa amb un men\u00fa que tinga 5 opcions (sumar, restar, multiplicar, dividir i eixir). En cas d'introduir alguna de les 4 primeres, demar\u00e0 els dos operands i tornar\u00e0 el resultat. En cas de triar l'opci\u00f3 d'eixir el programa acabar\u00e0.</p>"},{"location":"practicaJSbasic/#exercici-5","title":"Exercici 5","text":"<p>Fes un programa que vaja sumant els n\u00fameros que anem introduint fins que arribe a 1000. Quan arribe a 1000 o superio el programa informar\u00e0 a l'usuari i acabar\u00e0.</p>"},{"location":"practicaJSbasic/#exercici-6","title":"Exercici 6","text":"<p>Fes una quadr\u00edcula de 5x5 i ubica 10 bombes dins. En programa demanar\u00e0 que introduisques la coordenada <code>X</code> i la <code>Y</code> i indicar\u00e0 si hi ha bomba o no.</p>"},{"location":"practicaJSbasic/#exercici-7","title":"Exercici 7","text":"<p>Genera 6 n\u00fameros aleatoris que simularan la primitiva. Seran n\u00fameros sencers entre 1 i 49.</p> <p>JavaScript<pre><code>// Retorna un entero aleatorio entre min (incluido) y max (excluido)\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n</code></pre> Demana que introduisca 6 n\u00fameros o utilitza 6 variables, i indica el n\u00famero d'encerts.</p>"},{"location":"presentaci%C3%B3/","title":"1. UNITATS","text":"<ul> <li>ud0 Eines de programaci\u00f3</li> <li>ud1 Javascritp: bases i fonaments</li> <li>ud2 Javascript: interacci\u00f3 amb l\u2019usuari</li> <li>ud3 Javascript: Utilitats extra</li> <li>ud4 Ferramentes per a programadors: npm, webpack</li> <li>ud5 AJAX</li> <li>ud6 VUE3</li> <li>ud7 Aplicaci\u00f3 API REST amb VUE3</li> </ul>"},{"location":"presentaci%C3%B3/#2-professorat","title":"2. PROFESSORAT","text":""},{"location":"presentaci%C3%B3/#21-dades","title":"2.1 Dades","text":"<p>Nom: Jes\u00fas Ort\u00ed Monton</p>"},{"location":"presentaci%C3%B3/#22-horari","title":"2.2 Horari","text":"<p>Les tutories individuals seran al seg\u00fcent horari.</p> <p>Mat\u00ed: divendres a les 08:55h</p> <p>Vesprada: dilluns i dimecres a les 15:30h</p> <p>En cas de ser necess\u00e0ria una tutoria presencial, s\u2019acordar\u00e0 amb el professor del m\u00f2dul per gestionar la reserva d\u2019un aula. Cal avisar amb un m\u00ednim de 24 hores d\u2019antelaci\u00f3 la sol\u00b7licitud de tutoria, indicant dia, hora i continguts a tractar.</p>"},{"location":"presentaci%C3%B3/#23-contacte","title":"2.3 Contacte","text":"<p>j.ortimonton@edu.gva.es, jorti@ieseljust.com</p>"},{"location":"presentaci%C3%B3/#3-avaluacio","title":"3. AVALUACI\u00d3","text":""},{"location":"presentaci%C3%B3/#31-instruments","title":"3.1 Instruments","text":"<ul> <li>Pr\u00e0ctiques sobre les unitats</li> <li>Projectes</li> <li>Ex\u00e0mens </li> </ul>"},{"location":"presentaci%C3%B3/#32-qualificacio","title":"3.2 Qualificaci\u00f3","text":"<ul> <li>Pr\u00e0ctiques sobre les unitats: 30%</li> <li>Projectes: 40%</li> <li>Ex\u00e0mens: 30%</li> </ul>"},{"location":"presentaci%C3%B3/#33-consideracions","title":"3.3 Consideracions","text":"<p>Per a poder superar el m\u00f2dul \u00e9s necessari tindre una nota mitjana superior a 5. A m\u00e9s a m\u00e9s, caldr\u00e0 tindre almenys un 4 o superior en TOTS els projectes del m\u00f2dul aix\u00ed com a l'examen. </p>"},{"location":"presentaci%C3%B3/#4-calendari","title":"4. Calendari","text":"Unitat Data inici Bloc ud0 Eines de programaci\u00f3 19-09-2023 1 ud1 Javascritp: bases i fonaments 26-09-2023 1 ud2 Javascript: interacci\u00f3 amb l\u2019usuari 10-10-2023 1 ud3 Javascript: Utilitats extra 31-10-2023 1 ud4 Ferramentes per a programadors 7-11-2023 1 ud5 AJAX 14-11-2023 2 ud6 VUE3 5-12-2023 3 ud7 Aplicaci\u00f3 API REST amb VUE3 8-01-2024 3"},{"location":"pr%C3%A0ctica_arrays/","title":"E1","text":"<p>Crea una matriu de 3 files i 5 columnes. El contingut de les cel\u00b7les ha de ser un indicador de la fila i la columna de manera que la primera fila quede f1c1, f1c2, f1c3...</p> <p>Recorre tota la matriu empalmant dos <code>forEach()</code> i mostra el resultat en consola.</p>"},{"location":"pr%C3%A0ctica_arrays/#e2","title":"E2","text":"<p>Repeteix l'exercici anterior per\u00f2 has de crear la matriu a partir de tres files i afegir-les una a una fent \u00fas del m\u00e8tode <code>push()</code>.</p>"},{"location":"pr%C3%A0ctica_arrays/#e3","title":"E3","text":"<p>Genera un array de 100 n\u00fameros aleatoris sencers entre 0 i 9. Conta el n\u00famero de vegades que apareix cadascun dels d\u00edgits i mostra-ho per consola.</p>"},{"location":"pr%C3%A0ctica_arrays/#e4","title":"E4","text":"<p>Genera un array de 25 n\u00fameros aleatoris sencers entre 0 i 100. Cap n\u00famero es pot repetir. Mostra el resultat per consola.</p>"},{"location":"pr%C3%A0ctica_arrays/#e5","title":"E5","text":"<p>Genera un array de 100 n\u00fameros aleatoris sencers entre 0 i 9. Fes que siguen <code>0</code> totes les caselles des de la 25 fins a la 75.</p>"},{"location":"pr%C3%A0ctica_arrays/#e6","title":"E6","text":"<p>Genera un vector amb noms d'animals. Demana per pantalla a l'usuari que introduisca un nom i determina si existeix al vector o no amb <code>includes()</code>.</p>"},{"location":"pr%C3%A0ctica_arrays/#e7","title":"E7","text":"<p>A partir d'un vector de paraules genera un string amb totes les paraules unides.</p>"},{"location":"pr%C3%A0ctica_arrays/#e8","title":"E8","text":"<p>Ordena alfab\u00e8ticament un vector de noms.</p>"},{"location":"pr%C3%A0ctica_arrays/#e9","title":"E9","text":"<p>Fes un vector de noms. Amb <code>filter()</code> torna un vector que tinga aquells noms amb 6 o m\u00e9s lletres.</p>"},{"location":"pr%C3%A0ctica_arrays/#e10","title":"E10","text":"<p>Genera una matriu on cada fila ser\u00e0 el nom d'un producte i el seu preu en euros. Posa el preu entre 0 i 100\u20ac. Aplica les funcions necess\u00e0ries per a, a partir d'aquesta matriu, obtindre altra matriu amb aquells productes que el seu preu siga major de 75\u20ac i s'haja aplicat una rebaixa del 10%.</p>"},{"location":"pr%C3%A0ctica_operadors/","title":"1 Objectes <code>Math</code> i <code>Number</code>","text":"<p>Pots consultar les diferents propietats i contants de l'objecte <code>Math</code> ac\u00ed, de la mateixa forma ac\u00ed ho pots fer per a l'objecte <code>Number</code>.</p> <p>Tamb\u00e9 et ser\u00e0 d'utilitat saber com es poden introduir dades per part de l'usuari. Fins que aprenguem a validar <code>inputs</code> pots fer \u00fas del <code>prompt</code> mirant aquest exemple</p>"},{"location":"pr%C3%A0ctica_operadors/#2-exercicis","title":"2 Exercicis","text":""},{"location":"pr%C3%A0ctica_operadors/#21","title":"2.1","text":"<p>Fes un programa que demane una n\u00famero entre 0 i 50 i retorne el seu quadrat</p>"},{"location":"pr%C3%A0ctica_operadors/#22","title":"2.2","text":"<p>Fes un programa que demane un n\u00famero i comprove si \u00e9s un n\u00famero enter</p>"},{"location":"pr%C3%A0ctica_operadors/#23","title":"2.3","text":"<p>Fes un programa que demane un n\u00famero, que comprove si realment \u00e9s un n\u00famero i redondege a dos xifres decimals</p>"},{"location":"pr%C3%A0ctica_operadors/#24","title":"2.4","text":"<p>Fes un programa que demane un n\u00famero enter, comprove si ho \u00e9s i el convertisca en un <code>float</code></p>"},{"location":"pr%C3%A0ctica_operadors/#25","title":"2.5","text":"<p>Fes un programa que demane el radi, comprove que \u00e9s un n\u00famero i si ho \u00e9s calcule l'\u00e0rea de la circunfer\u00e8ncia fent \u00fas de PI</p>"},{"location":"pr%C3%A0ctica_operadors/#26","title":"2.6","text":"<p>Fes un programa que demane dos n\u00fameros, comprove quin \u00e9s el major i el menor, fa\u00e7a la divisi\u00f3 i mostre el resultat total, el de la part entera i el resto.</p>"}]}